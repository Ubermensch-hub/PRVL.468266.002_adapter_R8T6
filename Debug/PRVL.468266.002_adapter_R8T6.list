
PRVL.468266.002_adapter_R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004854  08004854  00005854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  08004894  08004894  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004894  08004894  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004894  08004894  00005894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004898  08004898  00005898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800489c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000018  080048b4  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080048b4  0000625c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e262  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ca  00000000  00000000  000142a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00016570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb4  00000000  00000000  00017458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea6  00000000  00000000  0001800c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f69  00000000  00000000  0002feb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b30d  00000000  00000000  00041e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd128  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000dd16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e0778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800483c 	.word	0x0800483c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	0800483c 	.word	0x0800483c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <Update_Disk_Status>:
/* USER CODE BEGIN PFP */




void Update_Disk_Status(uint8_t disk_id, uint8_t status) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	1c0a      	adds	r2, r1, #0
 800022c:	701a      	strb	r2, [r3, #0]
	if (disk_id >= 24) return; // Проверка на корректность disk_id
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b17      	cmp	r3, #23
 8000234:	d838      	bhi.n	80002a8 <Update_Disk_Status+0x8c>

	// Вычисляем позицию в массиве disk_status
	uint8_t byte_index = disk_id / 4; // Каждый байт содержит 4 диска
 8000236:	200f      	movs	r0, #15
 8000238:	183b      	adds	r3, r7, r0
 800023a:	1dfa      	adds	r2, r7, #7
 800023c:	7812      	ldrb	r2, [r2, #0]
 800023e:	0892      	lsrs	r2, r2, #2
 8000240:	701a      	strb	r2, [r3, #0]
	uint8_t bit_offset = (disk_id % 4) * 2; // Смещение в байте (0, 2, 4, 6)
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2203      	movs	r2, #3
 8000248:	4013      	ands	r3, r2
 800024a:	b2db      	uxtb	r3, r3
 800024c:	240e      	movs	r4, #14
 800024e:	193a      	adds	r2, r7, r4
 8000250:	18db      	adds	r3, r3, r3
 8000252:	7013      	strb	r3, [r2, #0]

	// Очищаем старые биты и записываем новые
	disk_status[byte_index] &= ~(0x03 << bit_offset); // Очистка битов
 8000254:	183b      	adds	r3, r7, r0
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4a15      	ldr	r2, [pc, #84]	@ (80002b0 <Update_Disk_Status+0x94>)
 800025a:	5cd3      	ldrb	r3, [r2, r3]
 800025c:	b25b      	sxtb	r3, r3
 800025e:	193a      	adds	r2, r7, r4
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	2103      	movs	r1, #3
 8000264:	4091      	lsls	r1, r2
 8000266:	000a      	movs	r2, r1
 8000268:	b252      	sxtb	r2, r2
 800026a:	43d2      	mvns	r2, r2
 800026c:	b252      	sxtb	r2, r2
 800026e:	4013      	ands	r3, r2
 8000270:	b25a      	sxtb	r2, r3
 8000272:	183b      	adds	r3, r7, r0
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2d1      	uxtb	r1, r2
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <Update_Disk_Status+0x94>)
 800027a:	54d1      	strb	r1, [r2, r3]
	disk_status[byte_index] |= (status & 0x03) << bit_offset; // Запись новых битов
 800027c:	183b      	adds	r3, r7, r0
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4a0b      	ldr	r2, [pc, #44]	@ (80002b0 <Update_Disk_Status+0x94>)
 8000282:	5cd3      	ldrb	r3, [r2, r3]
 8000284:	b25a      	sxtb	r2, r3
 8000286:	1dbb      	adds	r3, r7, #6
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2103      	movs	r1, #3
 800028c:	4019      	ands	r1, r3
 800028e:	193b      	adds	r3, r7, r4
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4099      	lsls	r1, r3
 8000294:	000b      	movs	r3, r1
 8000296:	b25b      	sxtb	r3, r3
 8000298:	4313      	orrs	r3, r2
 800029a:	b25a      	sxtb	r2, r3
 800029c:	183b      	adds	r3, r7, r0
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2d1      	uxtb	r1, r2
 80002a2:	4a03      	ldr	r2, [pc, #12]	@ (80002b0 <Update_Disk_Status+0x94>)
 80002a4:	54d1      	strb	r1, [r2, r3]
 80002a6:	e000      	b.n	80002aa <Update_Disk_Status+0x8e>
	if (disk_id >= 24) return; // Проверка на корректность disk_id
 80002a8:	46c0      	nop			@ (mov r8, r8)
}
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b005      	add	sp, #20
 80002ae:	bd90      	pop	{r4, r7, pc}
 80002b0:	20000230 	.word	0x20000230

080002b4 <ProcessSGPIOData>:

void ProcessSGPIOData(uint16_t sgpioData, uint8_t startIndex)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	1d7b      	adds	r3, r7, #5
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; ++i) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e043      	b.n	8000354 <ProcessSGPIOData+0xa0>
		uint8_t diskIndex = startIndex + i; // ндекс диска (0-3 для A, 4- 7 для B)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	b2d9      	uxtb	r1, r3
 80002d0:	200b      	movs	r0, #11
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	1d7a      	adds	r2, r7, #5
 80002d6:	7812      	ldrb	r2, [r2, #0]
 80002d8:	188a      	adds	r2, r1, r2
 80002da:	701a      	strb	r2, [r3, #0]
		uint8_t diskStatus = (sgpioData >> (3 * i)) & 0x07; // �?звлечение 3 бит для диска
 80002dc:	1dbb      	adds	r3, r7, #6
 80002de:	8819      	ldrh	r1, [r3, #0]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	0013      	movs	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	189b      	adds	r3, r3, r2
 80002e8:	4119      	asrs	r1, r3
 80002ea:	000b      	movs	r3, r1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	240a      	movs	r4, #10
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2107      	movs	r1, #7
 80002f4:	400a      	ands	r2, r1
 80002f6:	701a      	strb	r2, [r3, #0]

		if (((diskStatus >> 0) & 0x01) == 1) Update_Disk_Status(diskIndex, 0x01); // 1-й бит - активность
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2201      	movs	r2, #1
 80002fe:	4013      	ands	r3, r2
 8000300:	d005      	beq.n	800030e <ProcessSGPIOData+0x5a>
 8000302:	183b      	adds	r3, r7, r0
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2101      	movs	r1, #1
 8000308:	0018      	movs	r0, r3
 800030a:	f7ff ff87 	bl	800021c <Update_Disk_Status>
		if (((diskStatus >> 1) & 0x01) == 1) Update_Disk_Status(diskIndex, 0x02);   // 2-й бит - локация
 800030e:	230a      	movs	r3, #10
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	085b      	lsrs	r3, r3, #1
 8000316:	b2db      	uxtb	r3, r3
 8000318:	001a      	movs	r2, r3
 800031a:	2301      	movs	r3, #1
 800031c:	4013      	ands	r3, r2
 800031e:	d006      	beq.n	800032e <ProcessSGPIOData+0x7a>
 8000320:	230b      	movs	r3, #11
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2102      	movs	r1, #2
 8000328:	0018      	movs	r0, r3
 800032a:	f7ff ff77 	bl	800021c <Update_Disk_Status>
		if (((diskStatus >> 2) & 0x01) == 1) Update_Disk_Status(diskIndex, 0x03);    // 3-й бит - ошибка
 800032e:	230a      	movs	r3, #10
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	089b      	lsrs	r3, r3, #2
 8000336:	b2db      	uxtb	r3, r3
 8000338:	001a      	movs	r2, r3
 800033a:	2301      	movs	r3, #1
 800033c:	4013      	ands	r3, r2
 800033e:	d006      	beq.n	800034e <ProcessSGPIOData+0x9a>
 8000340:	230b      	movs	r3, #11
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2103      	movs	r1, #3
 8000348:	0018      	movs	r0, r3
 800034a:	f7ff ff67 	bl	800021c <Update_Disk_Status>
	for (int i = 0; i < 4; ++i) {
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3301      	adds	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	2b03      	cmp	r3, #3
 8000358:	ddb8      	ble.n	80002cc <ProcessSGPIOData+0x18>

		// Обновление статуса диска

	}
}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	46c0      	nop			@ (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b005      	add	sp, #20
 8000362:	bd90      	pop	{r4, r7, pc}

08000364 <sendI2c>:
void sendI2c(int reg, int value, uint16_t adr_rep)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af02      	add	r7, sp, #8
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	801a      	strh	r2, [r3, #0]
	I2CTransmit[0] = reg;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <sendI2c+0x44>)
 8000378:	701a      	strb	r2, [r3, #0]
	I2CTransmit[1] = value;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <sendI2c+0x44>)
 8000380:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), I2CTransmit, 2, 100);
 8000382:	1dbb      	adds	r3, r7, #6
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	18db      	adds	r3, r3, r3
 8000388:	b299      	uxth	r1, r3
 800038a:	4a07      	ldr	r2, [pc, #28]	@ (80003a8 <sendI2c+0x44>)
 800038c:	4807      	ldr	r0, [pc, #28]	@ (80003ac <sendI2c+0x48>)
 800038e:	2364      	movs	r3, #100	@ 0x64
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2302      	movs	r3, #2
 8000394:	f002 f9c4 	bl	8002720 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000398:	200a      	movs	r0, #10
 800039a:	f001 fcd7 	bl	8001d4c <HAL_Delay>
}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b004      	add	sp, #16
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	20000238 	.word	0x20000238
 80003ac:	2000008c 	.word	0x2000008c

080003b0 <redriver_init_1>:


void redriver_init_1 (uint16_t adr_rep) //RX1
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	0002      	movs	r2, r0
 80003b8:	1dbb      	adds	r3, r7, #6
 80003ba:	801a      	strh	r2, [r3, #0]
	sendI2c(0x06, 0x18, adr_rep); 	//�?нициализация каналов
 80003bc:	1dbb      	adds	r3, r7, #6
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	001a      	movs	r2, r3
 80003c2:	2118      	movs	r1, #24
 80003c4:	2006      	movs	r0, #6
 80003c6:	f7ff ffcd 	bl	8000364 <sendI2c>
	sendI2c(0x0F, 0x00, adr_rep);	// db B_0
 80003ca:	1dbb      	adds	r3, r7, #6
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	200f      	movs	r0, #15
 80003d4:	f7ff ffc6 	bl	8000364 <sendI2c>
	sendI2c(0x10, 0xAE, adr_rep);  // VOD/VID
 80003d8:	1dbb      	adds	r3, r7, #6
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	001a      	movs	r2, r3
 80003de:	21ae      	movs	r1, #174	@ 0xae
 80003e0:	2010      	movs	r0, #16
 80003e2:	f7ff ffbf 	bl	8000364 <sendI2c>

	sendI2c(0x11, 0x00, adr_rep);  // Ослабелние
 80003e6:	1dbb      	adds	r3, r7, #6
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	2011      	movs	r0, #17
 80003f0:	f7ff ffb8 	bl	8000364 <sendI2c>
	sendI2c(0x16, 0x00, adr_rep);  //db B_1
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	2016      	movs	r0, #22
 80003fe:	f7ff ffb1 	bl	8000364 <sendI2c>
	sendI2c(0x17, 0xAE, adr_rep);
 8000402:	1dbb      	adds	r3, r7, #6
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	001a      	movs	r2, r3
 8000408:	21ae      	movs	r1, #174	@ 0xae
 800040a:	2017      	movs	r0, #23
 800040c:	f7ff ffaa 	bl	8000364 <sendI2c>

	sendI2c(0x18, 0x00, adr_rep);
 8000410:	1dbb      	adds	r3, r7, #6
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	2018      	movs	r0, #24
 800041a:	f7ff ffa3 	bl	8000364 <sendI2c>
	sendI2c(0x1D, 0x00, adr_rep);	//db B_2
 800041e:	1dbb      	adds	r3, r7, #6
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	201d      	movs	r0, #29
 8000428:	f7ff ff9c 	bl	8000364 <sendI2c>
	sendI2c(0x1E, 0xAE, adr_rep);
 800042c:	1dbb      	adds	r3, r7, #6
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	001a      	movs	r2, r3
 8000432:	21ae      	movs	r1, #174	@ 0xae
 8000434:	201e      	movs	r0, #30
 8000436:	f7ff ff95 	bl	8000364 <sendI2c>

	sendI2c(0x1F, 0x00, adr_rep);
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	201f      	movs	r0, #31
 8000444:	f7ff ff8e 	bl	8000364 <sendI2c>
	sendI2c(0x24, 0x00, adr_rep);	//db B_3
 8000448:	1dbb      	adds	r3, r7, #6
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	2024      	movs	r0, #36	@ 0x24
 8000452:	f7ff ff87 	bl	8000364 <sendI2c>
	sendI2c(0x25, 0xAE, adr_rep);
 8000456:	1dbb      	adds	r3, r7, #6
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	001a      	movs	r2, r3
 800045c:	21ae      	movs	r1, #174	@ 0xae
 800045e:	2025      	movs	r0, #37	@ 0x25
 8000460:	f7ff ff80 	bl	8000364 <sendI2c>
	sendI2c(0x26, 0x00, adr_rep);
 8000464:	1dbb      	adds	r3, r7, #6
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	2026      	movs	r0, #38	@ 0x26
 800046e:	f7ff ff79 	bl	8000364 <sendI2c>
	sendI2c(0x2C, 0x00, adr_rep);	//db A_0
 8000472:	1dbb      	adds	r3, r7, #6
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	202c      	movs	r0, #44	@ 0x2c
 800047c:	f7ff ff72 	bl	8000364 <sendI2c>
	sendI2c(0x2D, 0xAE, adr_rep);
 8000480:	1dbb      	adds	r3, r7, #6
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	001a      	movs	r2, r3
 8000486:	21ae      	movs	r1, #174	@ 0xae
 8000488:	202d      	movs	r0, #45	@ 0x2d
 800048a:	f7ff ff6b 	bl	8000364 <sendI2c>
	sendI2c(0x2E, 0x00, adr_rep);
 800048e:	1dbb      	adds	r3, r7, #6
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	202e      	movs	r0, #46	@ 0x2e
 8000498:	f7ff ff64 	bl	8000364 <sendI2c>
	sendI2c(0x33, 0x00, adr_rep);	//db A_1
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	2033      	movs	r0, #51	@ 0x33
 80004a6:	f7ff ff5d 	bl	8000364 <sendI2c>
	sendI2c(0x34, 0xAE, adr_rep);
 80004aa:	1dbb      	adds	r3, r7, #6
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	001a      	movs	r2, r3
 80004b0:	21ae      	movs	r1, #174	@ 0xae
 80004b2:	2034      	movs	r0, #52	@ 0x34
 80004b4:	f7ff ff56 	bl	8000364 <sendI2c>
	sendI2c(0x35, 0x00, adr_rep);
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	2035      	movs	r0, #53	@ 0x35
 80004c2:	f7ff ff4f 	bl	8000364 <sendI2c>
	sendI2c(0x3A, 0x00, adr_rep);	//db A_2
 80004c6:	1dbb      	adds	r3, r7, #6
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	203a      	movs	r0, #58	@ 0x3a
 80004d0:	f7ff ff48 	bl	8000364 <sendI2c>
	sendI2c(0x3B, 0xAE, adr_rep);
 80004d4:	1dbb      	adds	r3, r7, #6
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	001a      	movs	r2, r3
 80004da:	21ae      	movs	r1, #174	@ 0xae
 80004dc:	203b      	movs	r0, #59	@ 0x3b
 80004de:	f7ff ff41 	bl	8000364 <sendI2c>
	sendI2c(0x3C, 0x00, adr_rep);
 80004e2:	1dbb      	adds	r3, r7, #6
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	203c      	movs	r0, #60	@ 0x3c
 80004ec:	f7ff ff3a 	bl	8000364 <sendI2c>
	sendI2c(0x41, 0x00, adr_rep);	//db A_3
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	2041      	movs	r0, #65	@ 0x41
 80004fa:	f7ff ff33 	bl	8000364 <sendI2c>
	sendI2c(0x42, 0xAE, adr_rep);
 80004fe:	1dbb      	adds	r3, r7, #6
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	001a      	movs	r2, r3
 8000504:	21ae      	movs	r1, #174	@ 0xae
 8000506:	2042      	movs	r0, #66	@ 0x42
 8000508:	f7ff ff2c 	bl	8000364 <sendI2c>
	sendI2c(0x43, 0x00, adr_rep);
 800050c:	1dbb      	adds	r3, r7, #6
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	2043      	movs	r0, #67	@ 0x43
 8000516:	f7ff ff25 	bl	8000364 <sendI2c>
}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}

08000522 <redriver_init_2>:

void redriver_init_2 (uint16_t adr_rep) //RX2
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	0002      	movs	r2, r0
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	801a      	strh	r2, [r3, #0]
	sendI2c(0x06, 0x18, adr_rep); 	//�?нициализация каналов
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	001a      	movs	r2, r3
 8000534:	2118      	movs	r1, #24
 8000536:	2006      	movs	r0, #6
 8000538:	f7ff ff14 	bl	8000364 <sendI2c>
	sendI2c(0x0F, 0x00, adr_rep);	//db B_0
 800053c:	1dbb      	adds	r3, r7, #6
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	200f      	movs	r0, #15
 8000546:	f7ff ff0d 	bl	8000364 <sendI2c>
	sendI2c(0x10, 0xAE, adr_rep);
 800054a:	1dbb      	adds	r3, r7, #6
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	001a      	movs	r2, r3
 8000550:	21ae      	movs	r1, #174	@ 0xae
 8000552:	2010      	movs	r0, #16
 8000554:	f7ff ff06 	bl	8000364 <sendI2c>
	sendI2c(0x11, 0x00, adr_rep);
 8000558:	1dbb      	adds	r3, r7, #6
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	2011      	movs	r0, #17
 8000562:	f7ff feff 	bl	8000364 <sendI2c>
	sendI2c(0x16, 0x00, adr_rep);  //db B_1
 8000566:	1dbb      	adds	r3, r7, #6
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	2016      	movs	r0, #22
 8000570:	f7ff fef8 	bl	8000364 <sendI2c>
	sendI2c(0x17, 0xAE, adr_rep);
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	001a      	movs	r2, r3
 800057a:	21ae      	movs	r1, #174	@ 0xae
 800057c:	2017      	movs	r0, #23
 800057e:	f7ff fef1 	bl	8000364 <sendI2c>
	sendI2c(0x18, 0x00, adr_rep);
 8000582:	1dbb      	adds	r3, r7, #6
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	2018      	movs	r0, #24
 800058c:	f7ff feea 	bl	8000364 <sendI2c>
	sendI2c(0x1D, 0x00, adr_rep);	//db B_2
 8000590:	1dbb      	adds	r3, r7, #6
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	201d      	movs	r0, #29
 800059a:	f7ff fee3 	bl	8000364 <sendI2c>
	sendI2c(0x1E, 0xAE, adr_rep);
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	001a      	movs	r2, r3
 80005a4:	21ae      	movs	r1, #174	@ 0xae
 80005a6:	201e      	movs	r0, #30
 80005a8:	f7ff fedc 	bl	8000364 <sendI2c>
	sendI2c(0x1F, 0x00, adr_rep);
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	201f      	movs	r0, #31
 80005b6:	f7ff fed5 	bl	8000364 <sendI2c>
	sendI2c(0x24, 0x01, adr_rep);	//db B_3
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	001a      	movs	r2, r3
 80005c0:	2101      	movs	r1, #1
 80005c2:	2024      	movs	r0, #36	@ 0x24
 80005c4:	f7ff fece 	bl	8000364 <sendI2c>
	sendI2c(0x25, 0xAE, adr_rep);
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	001a      	movs	r2, r3
 80005ce:	21ae      	movs	r1, #174	@ 0xae
 80005d0:	2025      	movs	r0, #37	@ 0x25
 80005d2:	f7ff fec7 	bl	8000364 <sendI2c>
	sendI2c(0x26, 0x00, adr_rep);
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	2026      	movs	r0, #38	@ 0x26
 80005e0:	f7ff fec0 	bl	8000364 <sendI2c>
	sendI2c(0x2C, 0x01, adr_rep);	//db A_0
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	001a      	movs	r2, r3
 80005ea:	2101      	movs	r1, #1
 80005ec:	202c      	movs	r0, #44	@ 0x2c
 80005ee:	f7ff feb9 	bl	8000364 <sendI2c>
	sendI2c(0x2D, 0xAE, adr_rep);
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	001a      	movs	r2, r3
 80005f8:	21ae      	movs	r1, #174	@ 0xae
 80005fa:	202d      	movs	r0, #45	@ 0x2d
 80005fc:	f7ff feb2 	bl	8000364 <sendI2c>
	sendI2c(0x2E, 0x00, adr_rep);
 8000600:	1dbb      	adds	r3, r7, #6
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	202e      	movs	r0, #46	@ 0x2e
 800060a:	f7ff feab 	bl	8000364 <sendI2c>
	sendI2c(0x33, 0x00, adr_rep);	//db A_1
 800060e:	1dbb      	adds	r3, r7, #6
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	2033      	movs	r0, #51	@ 0x33
 8000618:	f7ff fea4 	bl	8000364 <sendI2c>
	sendI2c(0x34, 0xAE, adr_rep);
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	001a      	movs	r2, r3
 8000622:	21ae      	movs	r1, #174	@ 0xae
 8000624:	2034      	movs	r0, #52	@ 0x34
 8000626:	f7ff fe9d 	bl	8000364 <sendI2c>
	sendI2c(0x35, 0x00, adr_rep);
 800062a:	1dbb      	adds	r3, r7, #6
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	2035      	movs	r0, #53	@ 0x35
 8000634:	f7ff fe96 	bl	8000364 <sendI2c>
	sendI2c(0x3A, 0x00, adr_rep);	//db A_2
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	203a      	movs	r0, #58	@ 0x3a
 8000642:	f7ff fe8f 	bl	8000364 <sendI2c>
	sendI2c(0x3B, 0xAE, adr_rep);
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	001a      	movs	r2, r3
 800064c:	21ae      	movs	r1, #174	@ 0xae
 800064e:	203b      	movs	r0, #59	@ 0x3b
 8000650:	f7ff fe88 	bl	8000364 <sendI2c>
	sendI2c(0x3C, 0x00, adr_rep);
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	203c      	movs	r0, #60	@ 0x3c
 800065e:	f7ff fe81 	bl	8000364 <sendI2c>
	sendI2c(0x41, 0x00, adr_rep);	//db A_3
 8000662:	1dbb      	adds	r3, r7, #6
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	2041      	movs	r0, #65	@ 0x41
 800066c:	f7ff fe7a 	bl	8000364 <sendI2c>
	sendI2c(0x42, 0xAE, adr_rep);
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	001a      	movs	r2, r3
 8000676:	21ae      	movs	r1, #174	@ 0xae
 8000678:	2042      	movs	r0, #66	@ 0x42
 800067a:	f7ff fe73 	bl	8000364 <sendI2c>
	sendI2c(0x43, 0x00, adr_rep);
 800067e:	1dbb      	adds	r3, r7, #6
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	2043      	movs	r0, #67	@ 0x43
 8000688:	f7ff fe6c 	bl	8000364 <sendI2c>
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b002      	add	sp, #8
 8000692:	bd80      	pop	{r7, pc}

08000694 <redriver_init_3>:

void redriver_init_3 (uint16_t adr_rep) //RX3
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	0002      	movs	r2, r0
 800069c:	1dbb      	adds	r3, r7, #6
 800069e:	801a      	strh	r2, [r3, #0]
	sendI2c(0x06, 0x18, adr_rep); 	//�?нициализация каналов
 80006a0:	1dbb      	adds	r3, r7, #6
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	001a      	movs	r2, r3
 80006a6:	2118      	movs	r1, #24
 80006a8:	2006      	movs	r0, #6
 80006aa:	f7ff fe5b 	bl	8000364 <sendI2c>
	sendI2c(0x0F, 0x00, adr_rep);	//db B_0
 80006ae:	1dbb      	adds	r3, r7, #6
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	200f      	movs	r0, #15
 80006b8:	f7ff fe54 	bl	8000364 <sendI2c>
	sendI2c(0x10, 0xAE, adr_rep);
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	001a      	movs	r2, r3
 80006c2:	21ae      	movs	r1, #174	@ 0xae
 80006c4:	2010      	movs	r0, #16
 80006c6:	f7ff fe4d 	bl	8000364 <sendI2c>
	sendI2c(0x11, 0x00, adr_rep);
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	2011      	movs	r0, #17
 80006d4:	f7ff fe46 	bl	8000364 <sendI2c>
	sendI2c(0x16, 0x00, adr_rep);  //db B_1
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	2016      	movs	r0, #22
 80006e2:	f7ff fe3f 	bl	8000364 <sendI2c>
	sendI2c(0x17, 0xAE, adr_rep);
 80006e6:	1dbb      	adds	r3, r7, #6
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	001a      	movs	r2, r3
 80006ec:	21ae      	movs	r1, #174	@ 0xae
 80006ee:	2017      	movs	r0, #23
 80006f0:	f7ff fe38 	bl	8000364 <sendI2c>
	sendI2c(0x18, 0x00, adr_rep);
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	2018      	movs	r0, #24
 80006fe:	f7ff fe31 	bl	8000364 <sendI2c>
	sendI2c(0x1D, 0x01, adr_rep);	//db B_2
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	001a      	movs	r2, r3
 8000708:	2101      	movs	r1, #1
 800070a:	201d      	movs	r0, #29
 800070c:	f7ff fe2a 	bl	8000364 <sendI2c>
	sendI2c(0x1E, 0xAE, adr_rep);
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	21ae      	movs	r1, #174	@ 0xae
 8000718:	201e      	movs	r0, #30
 800071a:	f7ff fe23 	bl	8000364 <sendI2c>
	sendI2c(0x1F, 0x00, adr_rep);
 800071e:	1dbb      	adds	r3, r7, #6
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	201f      	movs	r0, #31
 8000728:	f7ff fe1c 	bl	8000364 <sendI2c>
	sendI2c(0x24, 0x00, adr_rep);	//db B_3
 800072c:	1dbb      	adds	r3, r7, #6
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	2024      	movs	r0, #36	@ 0x24
 8000736:	f7ff fe15 	bl	8000364 <sendI2c>
	sendI2c(0x25, 0xAE, adr_rep);
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	001a      	movs	r2, r3
 8000740:	21ae      	movs	r1, #174	@ 0xae
 8000742:	2025      	movs	r0, #37	@ 0x25
 8000744:	f7ff fe0e 	bl	8000364 <sendI2c>
	sendI2c(0x26, 0x00, adr_rep);
 8000748:	1dbb      	adds	r3, r7, #6
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	2026      	movs	r0, #38	@ 0x26
 8000752:	f7ff fe07 	bl	8000364 <sendI2c>
	sendI2c(0x2C, 0x00, adr_rep);	//db A_0
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	202c      	movs	r0, #44	@ 0x2c
 8000760:	f7ff fe00 	bl	8000364 <sendI2c>
	sendI2c(0x2D, 0xAE, adr_rep);
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	001a      	movs	r2, r3
 800076a:	21ae      	movs	r1, #174	@ 0xae
 800076c:	202d      	movs	r0, #45	@ 0x2d
 800076e:	f7ff fdf9 	bl	8000364 <sendI2c>
	sendI2c(0x2E, 0x00, adr_rep);
 8000772:	1dbb      	adds	r3, r7, #6
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	001a      	movs	r2, r3
 8000778:	2100      	movs	r1, #0
 800077a:	202e      	movs	r0, #46	@ 0x2e
 800077c:	f7ff fdf2 	bl	8000364 <sendI2c>
	sendI2c(0x33, 0x00, adr_rep);	//db A_1
 8000780:	1dbb      	adds	r3, r7, #6
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	2033      	movs	r0, #51	@ 0x33
 800078a:	f7ff fdeb 	bl	8000364 <sendI2c>
	sendI2c(0x34, 0xAE, adr_rep);
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	001a      	movs	r2, r3
 8000794:	21ae      	movs	r1, #174	@ 0xae
 8000796:	2034      	movs	r0, #52	@ 0x34
 8000798:	f7ff fde4 	bl	8000364 <sendI2c>
	sendI2c(0x35, 0x00, adr_rep);
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	2035      	movs	r0, #53	@ 0x35
 80007a6:	f7ff fddd 	bl	8000364 <sendI2c>
	sendI2c(0x3A, 0x00, adr_rep);	//db A_2
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	203a      	movs	r0, #58	@ 0x3a
 80007b4:	f7ff fdd6 	bl	8000364 <sendI2c>
	sendI2c(0x3B, 0xAE, adr_rep);
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	21ae      	movs	r1, #174	@ 0xae
 80007c0:	203b      	movs	r0, #59	@ 0x3b
 80007c2:	f7ff fdcf 	bl	8000364 <sendI2c>
	sendI2c(0x3C, 0x00, adr_rep);
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	203c      	movs	r0, #60	@ 0x3c
 80007d0:	f7ff fdc8 	bl	8000364 <sendI2c>
	sendI2c(0x41, 0x00, adr_rep);	//db A_3
 80007d4:	1dbb      	adds	r3, r7, #6
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	2041      	movs	r0, #65	@ 0x41
 80007de:	f7ff fdc1 	bl	8000364 <sendI2c>
	sendI2c(0x42, 0xAE, adr_rep);
 80007e2:	1dbb      	adds	r3, r7, #6
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	001a      	movs	r2, r3
 80007e8:	21ae      	movs	r1, #174	@ 0xae
 80007ea:	2042      	movs	r0, #66	@ 0x42
 80007ec:	f7ff fdba 	bl	8000364 <sendI2c>
	sendI2c(0x43, 0x00, adr_rep);
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	2043      	movs	r0, #67	@ 0x43
 80007fa:	f7ff fdb3 	bl	8000364 <sendI2c>
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}

08000806 <redriver_init_other1>:

void redriver_init_other1 (uint16_t adr_rep) //TX1
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	0002      	movs	r2, r0
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	801a      	strh	r2, [r3, #0]
	sendI2c(0x06, 0x18, adr_rep); 	//�?нициализация каналов
 8000812:	1dbb      	adds	r3, r7, #6
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	001a      	movs	r2, r3
 8000818:	2118      	movs	r1, #24
 800081a:	2006      	movs	r0, #6
 800081c:	f7ff fda2 	bl	8000364 <sendI2c>
	sendI2c(0x0F, 0x00, adr_rep);	// db B_0
 8000820:	1dbb      	adds	r3, r7, #6
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	200f      	movs	r0, #15
 800082a:	f7ff fd9b 	bl	8000364 <sendI2c>
	sendI2c(0x10, 0xAE, adr_rep);  // VOD/VID
 800082e:	1dbb      	adds	r3, r7, #6
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	001a      	movs	r2, r3
 8000834:	21ae      	movs	r1, #174	@ 0xae
 8000836:	2010      	movs	r0, #16
 8000838:	f7ff fd94 	bl	8000364 <sendI2c>
	sendI2c(0x11, 0x00, adr_rep);  // Ослабелние
 800083c:	1dbb      	adds	r3, r7, #6
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	2011      	movs	r0, #17
 8000846:	f7ff fd8d 	bl	8000364 <sendI2c>
	sendI2c(0x16, 0x00, adr_rep);  //db B_1
 800084a:	1dbb      	adds	r3, r7, #6
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	2016      	movs	r0, #22
 8000854:	f7ff fd86 	bl	8000364 <sendI2c>
	sendI2c(0x17, 0xAE, adr_rep);
 8000858:	1dbb      	adds	r3, r7, #6
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	21ae      	movs	r1, #174	@ 0xae
 8000860:	2017      	movs	r0, #23
 8000862:	f7ff fd7f 	bl	8000364 <sendI2c>
	sendI2c(0x18, 0x00, adr_rep);
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	2018      	movs	r0, #24
 8000870:	f7ff fd78 	bl	8000364 <sendI2c>
	sendI2c(0x1D, 0x00, adr_rep);	//db B_2
 8000874:	1dbb      	adds	r3, r7, #6
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	201d      	movs	r0, #29
 800087e:	f7ff fd71 	bl	8000364 <sendI2c>
	sendI2c(0x1E, 0xAE, adr_rep);
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	21ae      	movs	r1, #174	@ 0xae
 800088a:	201e      	movs	r0, #30
 800088c:	f7ff fd6a 	bl	8000364 <sendI2c>
	sendI2c(0x1F, 0x00, adr_rep);
 8000890:	1dbb      	adds	r3, r7, #6
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	201f      	movs	r0, #31
 800089a:	f7ff fd63 	bl	8000364 <sendI2c>
	sendI2c(0x24, 0x00, adr_rep);	//db B_3
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	2024      	movs	r0, #36	@ 0x24
 80008a8:	f7ff fd5c 	bl	8000364 <sendI2c>
	sendI2c(0x25, 0xAE, adr_rep);
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	001a      	movs	r2, r3
 80008b2:	21ae      	movs	r1, #174	@ 0xae
 80008b4:	2025      	movs	r0, #37	@ 0x25
 80008b6:	f7ff fd55 	bl	8000364 <sendI2c>
	sendI2c(0x26, 0x00, adr_rep);
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	2026      	movs	r0, #38	@ 0x26
 80008c4:	f7ff fd4e 	bl	8000364 <sendI2c>
	sendI2c(0x2C, 0x00, adr_rep);	//db A_0
 80008c8:	1dbb      	adds	r3, r7, #6
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	202c      	movs	r0, #44	@ 0x2c
 80008d2:	f7ff fd47 	bl	8000364 <sendI2c>
	sendI2c(0x2D, 0xAE, adr_rep);
 80008d6:	1dbb      	adds	r3, r7, #6
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	001a      	movs	r2, r3
 80008dc:	21ae      	movs	r1, #174	@ 0xae
 80008de:	202d      	movs	r0, #45	@ 0x2d
 80008e0:	f7ff fd40 	bl	8000364 <sendI2c>
	sendI2c(0x2E, 0x00, adr_rep);
 80008e4:	1dbb      	adds	r3, r7, #6
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	202e      	movs	r0, #46	@ 0x2e
 80008ee:	f7ff fd39 	bl	8000364 <sendI2c>
	sendI2c(0x33, 0x00, adr_rep);	//db A_1
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	2033      	movs	r0, #51	@ 0x33
 80008fc:	f7ff fd32 	bl	8000364 <sendI2c>
	sendI2c(0x34, 0xAE, adr_rep);
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	21ae      	movs	r1, #174	@ 0xae
 8000908:	2034      	movs	r0, #52	@ 0x34
 800090a:	f7ff fd2b 	bl	8000364 <sendI2c>
	sendI2c(0x35, 0x00, adr_rep);
 800090e:	1dbb      	adds	r3, r7, #6
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	2035      	movs	r0, #53	@ 0x35
 8000918:	f7ff fd24 	bl	8000364 <sendI2c>
	sendI2c(0x3A, 0x00, adr_rep);	//db A_2
 800091c:	1dbb      	adds	r3, r7, #6
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	203a      	movs	r0, #58	@ 0x3a
 8000926:	f7ff fd1d 	bl	8000364 <sendI2c>
	sendI2c(0x3B, 0xAE, adr_rep);
 800092a:	1dbb      	adds	r3, r7, #6
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	001a      	movs	r2, r3
 8000930:	21ae      	movs	r1, #174	@ 0xae
 8000932:	203b      	movs	r0, #59	@ 0x3b
 8000934:	f7ff fd16 	bl	8000364 <sendI2c>
	sendI2c(0x3C, 0x03, adr_rep);
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	2103      	movs	r1, #3
 8000940:	203c      	movs	r0, #60	@ 0x3c
 8000942:	f7ff fd0f 	bl	8000364 <sendI2c>
	sendI2c(0x41, 0x00, adr_rep);	//db A_3
 8000946:	1dbb      	adds	r3, r7, #6
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	2041      	movs	r0, #65	@ 0x41
 8000950:	f7ff fd08 	bl	8000364 <sendI2c>
	sendI2c(0x42, 0xAE, adr_rep);
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	001a      	movs	r2, r3
 800095a:	21ae      	movs	r1, #174	@ 0xae
 800095c:	2042      	movs	r0, #66	@ 0x42
 800095e:	f7ff fd01 	bl	8000364 <sendI2c>
	sendI2c(0x43, 0x00, adr_rep);
 8000962:	1dbb      	adds	r3, r7, #6
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	2043      	movs	r0, #67	@ 0x43
 800096c:	f7ff fcfa 	bl	8000364 <sendI2c>
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <redriver_init_other2>:

void redriver_init_other2 (uint16_t adr_rep) //TX2
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	1dbb      	adds	r3, r7, #6
 8000982:	801a      	strh	r2, [r3, #0]
	sendI2c(0x06, 0x18, adr_rep); 	//�?нициализация каналов
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	2118      	movs	r1, #24
 800098c:	2006      	movs	r0, #6
 800098e:	f7ff fce9 	bl	8000364 <sendI2c>
	sendI2c(0x0F, 0x00, adr_rep);	// db B_0
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	200f      	movs	r0, #15
 800099c:	f7ff fce2 	bl	8000364 <sendI2c>
	sendI2c(0x10, 0xAE, adr_rep);
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	21ae      	movs	r1, #174	@ 0xae
 80009a8:	2010      	movs	r0, #16
 80009aa:	f7ff fcdb 	bl	8000364 <sendI2c>
	sendI2c(0x11, 0x00, adr_rep);
 80009ae:	1dbb      	adds	r3, r7, #6
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	2011      	movs	r0, #17
 80009b8:	f7ff fcd4 	bl	8000364 <sendI2c>
	sendI2c(0x16, 0x00, adr_rep);  //db B_1
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	2016      	movs	r0, #22
 80009c6:	f7ff fccd 	bl	8000364 <sendI2c>
	sendI2c(0x17, 0xAE, adr_rep);
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	21ae      	movs	r1, #174	@ 0xae
 80009d2:	2017      	movs	r0, #23
 80009d4:	f7ff fcc6 	bl	8000364 <sendI2c>
	sendI2c(0x18, 0x00, adr_rep);
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	2018      	movs	r0, #24
 80009e2:	f7ff fcbf 	bl	8000364 <sendI2c>
	sendI2c(0x1D, 0x00, adr_rep);	//db B_2
 80009e6:	1dbb      	adds	r3, r7, #6
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	201d      	movs	r0, #29
 80009f0:	f7ff fcb8 	bl	8000364 <sendI2c>
	sendI2c(0x1E, 0xAE, adr_rep);
 80009f4:	1dbb      	adds	r3, r7, #6
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	21ae      	movs	r1, #174	@ 0xae
 80009fc:	201e      	movs	r0, #30
 80009fe:	f7ff fcb1 	bl	8000364 <sendI2c>
	sendI2c(0x1F, 0x00, adr_rep);
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	201f      	movs	r0, #31
 8000a0c:	f7ff fcaa 	bl	8000364 <sendI2c>
	sendI2c(0x24, 0x03, adr_rep);	//db B_3
 8000a10:	1dbb      	adds	r3, r7, #6
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	2103      	movs	r1, #3
 8000a18:	2024      	movs	r0, #36	@ 0x24
 8000a1a:	f7ff fca3 	bl	8000364 <sendI2c>
	sendI2c(0x25, 0xA8, adr_rep);
 8000a1e:	1dbb      	adds	r3, r7, #6
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	001a      	movs	r2, r3
 8000a24:	21a8      	movs	r1, #168	@ 0xa8
 8000a26:	2025      	movs	r0, #37	@ 0x25
 8000a28:	f7ff fc9c 	bl	8000364 <sendI2c>
	sendI2c(0x26, 0x00, adr_rep);
 8000a2c:	1dbb      	adds	r3, r7, #6
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	2026      	movs	r0, #38	@ 0x26
 8000a36:	f7ff fc95 	bl	8000364 <sendI2c>
	sendI2c(0x2C, 0x03, adr_rep);	//db A_0
 8000a3a:	1dbb      	adds	r3, r7, #6
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2103      	movs	r1, #3
 8000a42:	202c      	movs	r0, #44	@ 0x2c
 8000a44:	f7ff fc8e 	bl	8000364 <sendI2c>
	sendI2c(0x2D, 0xA8, adr_rep);
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	21a8      	movs	r1, #168	@ 0xa8
 8000a50:	202d      	movs	r0, #45	@ 0x2d
 8000a52:	f7ff fc87 	bl	8000364 <sendI2c>
	sendI2c(0x2E, 0x00, adr_rep);
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	202e      	movs	r0, #46	@ 0x2e
 8000a60:	f7ff fc80 	bl	8000364 <sendI2c>
	sendI2c(0x33, 0x00, adr_rep);	//db A_1
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2033      	movs	r0, #51	@ 0x33
 8000a6e:	f7ff fc79 	bl	8000364 <sendI2c>
	sendI2c(0x34, 0xAE, adr_rep);
 8000a72:	1dbb      	adds	r3, r7, #6
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	001a      	movs	r2, r3
 8000a78:	21ae      	movs	r1, #174	@ 0xae
 8000a7a:	2034      	movs	r0, #52	@ 0x34
 8000a7c:	f7ff fc72 	bl	8000364 <sendI2c>
	sendI2c(0x35, 0x00, adr_rep);
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	2035      	movs	r0, #53	@ 0x35
 8000a8a:	f7ff fc6b 	bl	8000364 <sendI2c>
	sendI2c(0x3A, 0x00, adr_rep);	//db A_2
 8000a8e:	1dbb      	adds	r3, r7, #6
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	203a      	movs	r0, #58	@ 0x3a
 8000a98:	f7ff fc64 	bl	8000364 <sendI2c>
	sendI2c(0x3B, 0xAE, adr_rep);
 8000a9c:	1dbb      	adds	r3, r7, #6
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	21ae      	movs	r1, #174	@ 0xae
 8000aa4:	203b      	movs	r0, #59	@ 0x3b
 8000aa6:	f7ff fc5d 	bl	8000364 <sendI2c>
	sendI2c(0x3C, 0x00, adr_rep);
 8000aaa:	1dbb      	adds	r3, r7, #6
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	203c      	movs	r0, #60	@ 0x3c
 8000ab4:	f7ff fc56 	bl	8000364 <sendI2c>
	sendI2c(0x41, 0x00, adr_rep);	//db A_3
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2041      	movs	r0, #65	@ 0x41
 8000ac2:	f7ff fc4f 	bl	8000364 <sendI2c>
	sendI2c(0x42, 0xAE, adr_rep);
 8000ac6:	1dbb      	adds	r3, r7, #6
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	001a      	movs	r2, r3
 8000acc:	21ae      	movs	r1, #174	@ 0xae
 8000ace:	2042      	movs	r0, #66	@ 0x42
 8000ad0:	f7ff fc48 	bl	8000364 <sendI2c>
	sendI2c(0x43, 0x00, adr_rep);
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	2043      	movs	r0, #67	@ 0x43
 8000ade:	f7ff fc41 	bl	8000364 <sendI2c>
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <redriver_init_other3>:

void redriver_init_other3 (uint16_t adr_rep) //TX3
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	0002      	movs	r2, r0
 8000af2:	1dbb      	adds	r3, r7, #6
 8000af4:	801a      	strh	r2, [r3, #0]
	sendI2c(0x06, 0x18, adr_rep); 	//�?нициализация каналов
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	001a      	movs	r2, r3
 8000afc:	2118      	movs	r1, #24
 8000afe:	2006      	movs	r0, #6
 8000b00:	f7ff fc30 	bl	8000364 <sendI2c>
	sendI2c(0x0F, 0x00, adr_rep);	//db B_0
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	200f      	movs	r0, #15
 8000b0e:	f7ff fc29 	bl	8000364 <sendI2c>
	sendI2c(0x10, 0xA8, adr_rep);
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	21a8      	movs	r1, #168	@ 0xa8
 8000b1a:	2010      	movs	r0, #16
 8000b1c:	f7ff fc22 	bl	8000364 <sendI2c>
	sendI2c(0x11, 0x05, adr_rep);
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	001a      	movs	r2, r3
 8000b26:	2105      	movs	r1, #5
 8000b28:	2011      	movs	r0, #17
 8000b2a:	f7ff fc1b 	bl	8000364 <sendI2c>
	sendI2c(0x16, 0x00, adr_rep);  //db B_1
 8000b2e:	1dbb      	adds	r3, r7, #6
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	2016      	movs	r0, #22
 8000b38:	f7ff fc14 	bl	8000364 <sendI2c>
	sendI2c(0x17, 0xAE, adr_rep);
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	21ae      	movs	r1, #174	@ 0xae
 8000b44:	2017      	movs	r0, #23
 8000b46:	f7ff fc0d 	bl	8000364 <sendI2c>
	sendI2c(0x18, 0x00, adr_rep);
 8000b4a:	1dbb      	adds	r3, r7, #6
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	2018      	movs	r0, #24
 8000b54:	f7ff fc06 	bl	8000364 <sendI2c>
	sendI2c(0x1D, 0x03, adr_rep);	//db B_2
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2103      	movs	r1, #3
 8000b60:	201d      	movs	r0, #29
 8000b62:	f7ff fbff 	bl	8000364 <sendI2c>
	sendI2c(0x1E, 0xA8, adr_rep);
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	21a8      	movs	r1, #168	@ 0xa8
 8000b6e:	201e      	movs	r0, #30
 8000b70:	f7ff fbf8 	bl	8000364 <sendI2c>
	sendI2c(0x1F, 0x00, adr_rep);
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	201f      	movs	r0, #31
 8000b7e:	f7ff fbf1 	bl	8000364 <sendI2c>
	sendI2c(0x24, 0x00, adr_rep);	//db B_3
 8000b82:	1dbb      	adds	r3, r7, #6
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2024      	movs	r0, #36	@ 0x24
 8000b8c:	f7ff fbea 	bl	8000364 <sendI2c>
	sendI2c(0x25, 0xAE, adr_rep);
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	21ae      	movs	r1, #174	@ 0xae
 8000b98:	2025      	movs	r0, #37	@ 0x25
 8000b9a:	f7ff fbe3 	bl	8000364 <sendI2c>
	sendI2c(0x26, 0x05, adr_rep);
 8000b9e:	1dbb      	adds	r3, r7, #6
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	2026      	movs	r0, #38	@ 0x26
 8000ba8:	f7ff fbdc 	bl	8000364 <sendI2c>
	sendI2c(0x2C, 0x00, adr_rep);	//db A_0
 8000bac:	1dbb      	adds	r3, r7, #6
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	202c      	movs	r0, #44	@ 0x2c
 8000bb6:	f7ff fbd5 	bl	8000364 <sendI2c>
	sendI2c(0x2D, 0xAE, adr_rep);
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	21ae      	movs	r1, #174	@ 0xae
 8000bc2:	202d      	movs	r0, #45	@ 0x2d
 8000bc4:	f7ff fbce 	bl	8000364 <sendI2c>
	sendI2c(0x2E, 0x03, adr_rep);
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2103      	movs	r1, #3
 8000bd0:	202e      	movs	r0, #46	@ 0x2e
 8000bd2:	f7ff fbc7 	bl	8000364 <sendI2c>
	sendI2c(0x33, 0x00, adr_rep);	//db A_1
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2033      	movs	r0, #51	@ 0x33
 8000be0:	f7ff fbc0 	bl	8000364 <sendI2c>
	sendI2c(0x34, 0xAE, adr_rep);
 8000be4:	1dbb      	adds	r3, r7, #6
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	001a      	movs	r2, r3
 8000bea:	21ae      	movs	r1, #174	@ 0xae
 8000bec:	2034      	movs	r0, #52	@ 0x34
 8000bee:	f7ff fbb9 	bl	8000364 <sendI2c>
	sendI2c(0x35, 0x00, adr_rep);
 8000bf2:	1dbb      	adds	r3, r7, #6
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2035      	movs	r0, #53	@ 0x35
 8000bfc:	f7ff fbb2 	bl	8000364 <sendI2c>
	sendI2c(0x3A, 0x00, adr_rep);	//db A_2
 8000c00:	1dbb      	adds	r3, r7, #6
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	203a      	movs	r0, #58	@ 0x3a
 8000c0a:	f7ff fbab 	bl	8000364 <sendI2c>
	sendI2c(0x3B, 0xAE, adr_rep);
 8000c0e:	1dbb      	adds	r3, r7, #6
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	001a      	movs	r2, r3
 8000c14:	21ae      	movs	r1, #174	@ 0xae
 8000c16:	203b      	movs	r0, #59	@ 0x3b
 8000c18:	f7ff fba4 	bl	8000364 <sendI2c>
	sendI2c(0x3C, 0x03, adr_rep);
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	2103      	movs	r1, #3
 8000c24:	203c      	movs	r0, #60	@ 0x3c
 8000c26:	f7ff fb9d 	bl	8000364 <sendI2c>
	sendI2c(0x41, 0x00, adr_rep);	//db A_3
 8000c2a:	1dbb      	adds	r3, r7, #6
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	2041      	movs	r0, #65	@ 0x41
 8000c34:	f7ff fb96 	bl	8000364 <sendI2c>
	sendI2c(0x42, 0xAE, adr_rep);
 8000c38:	1dbb      	adds	r3, r7, #6
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	21ae      	movs	r1, #174	@ 0xae
 8000c40:	2042      	movs	r0, #66	@ 0x42
 8000c42:	f7ff fb8f 	bl	8000364 <sendI2c>
	sendI2c(0x43, 0x03, adr_rep);
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	2043      	movs	r0, #67	@ 0x43
 8000c50:	f7ff fb88 	bl	8000364 <sendI2c>
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <Redriver_Init>:
void Redriver_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c2, (adr_choice << 1), I2CInit_1, 1, 1);  //Выбор канала 0 на расширителе
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <Redriver_Init+0x88>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	18db      	adds	r3, r3, r3
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <Redriver_Init+0x8c>)
 8000c6c:	481f      	ldr	r0, [pc, #124]	@ (8000cec <Redriver_Init+0x90>)
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	f001 fd54 	bl	8002720 <HAL_I2C_Master_Transmit>
	//RX
	HAL_Delay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f001 f867 	bl	8001d4c <HAL_Delay>
	redriver_init_1 (0x59); //Зашиваем 1 редрайвер на прием
 8000c7e:	2059      	movs	r0, #89	@ 0x59
 8000c80:	f7ff fb96 	bl	80003b0 <redriver_init_1>
	HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f001 f861 	bl	8001d4c <HAL_Delay>
	redriver_init_2 (0x5B); //2
 8000c8a:	205b      	movs	r0, #91	@ 0x5b
 8000c8c:	f7ff fc49 	bl	8000522 <redriver_init_2>
	HAL_Delay(10);
 8000c90:	200a      	movs	r0, #10
 8000c92:	f001 f85b 	bl	8001d4c <HAL_Delay>
	redriver_init_3 (0x5F); //3
 8000c96:	205f      	movs	r0, #95	@ 0x5f
 8000c98:	f7ff fcfc 	bl	8000694 <redriver_init_3>
	HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f001 f855 	bl	8001d4c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, (adr_choice << 1), I2CInit_2, 1, 1);  //Выбор канала 1 на расширителе
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <Redriver_Init+0x88>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	18db      	adds	r3, r3, r3
 8000ca8:	b299      	uxth	r1, r3
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <Redriver_Init+0x94>)
 8000cac:	480f      	ldr	r0, [pc, #60]	@ (8000cec <Redriver_Init+0x90>)
 8000cae:	2301      	movs	r3, #1
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f001 fd34 	bl	8002720 <HAL_I2C_Master_Transmit>
	//TX
	HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f001 f847 	bl	8001d4c <HAL_Delay>
	redriver_init_other1 (0x59); //Зашиваем 1 редрайвер на передачу
 8000cbe:	2059      	movs	r0, #89	@ 0x59
 8000cc0:	f7ff fda1 	bl	8000806 <redriver_init_other1>
	HAL_Delay(10);
 8000cc4:	200a      	movs	r0, #10
 8000cc6:	f001 f841 	bl	8001d4c <HAL_Delay>
	redriver_init_other2 (0x5B); //2
 8000cca:	205b      	movs	r0, #91	@ 0x5b
 8000ccc:	f7ff fe54 	bl	8000978 <redriver_init_other2>
	HAL_Delay(10);
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f001 f83b 	bl	8001d4c <HAL_Delay>
	redriver_init_other3 (0x5F); //3
 8000cd6:	205f      	movs	r0, #95	@ 0x5f
 8000cd8:	f7ff ff07 	bl	8000aea <redriver_init_other3>
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 ffa2 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f824 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 f9d2 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d04:	f000 f9aa 	bl	800105c <MX_DMA_Init>
  MX_I2C1_Init();
 8000d08:	f000 f878 	bl	8000dfc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d0c:	f000 f8b8 	bl	8000e80 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000d10:	f000 f8f8 	bl	8000f04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d14:	f000 f94c 	bl	8000fb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000d18:	2064      	movs	r0, #100	@ 0x64
 8000d1a:	f001 f817 	bl	8001d4c <HAL_Delay>
	Redriver_Init();
 8000d1e:	f7ff ff9d 	bl	8000c5c <Redriver_Init>
	HAL_Delay(100);
 8000d22:	2064      	movs	r0, #100	@ 0x64
 8000d24:	f001 f812 	bl	8001d4c <HAL_Delay>
	// Включаем прерывания для I2C
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000d28:	2017      	movs	r0, #23
 8000d2a:	f001 f8f4 	bl	8001f16 <HAL_NVIC_EnableIRQ>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_I2C_Slave_Transmit(&hi2c1, disk_status, 6, HAL_MAX_DELAY);
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	4903      	ldr	r1, [pc, #12]	@ (8000d40 <main+0x4c>)
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <main+0x50>)
 8000d36:	2206      	movs	r2, #6
 8000d38:	f001 fe1c 	bl	8002974 <HAL_I2C_Slave_Transmit>
 8000d3c:	e7f7      	b.n	8000d2e <main+0x3a>
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	20000230 	.word	0x20000230
 8000d44:	20000038 	.word	0x20000038

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b093      	sub	sp, #76	@ 0x4c
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	2410      	movs	r4, #16
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	2338      	movs	r3, #56	@ 0x38
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f003 fd43 	bl	80047e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	003b      	movs	r3, r7
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f003 fd3c 	bl	80047e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fa27 	bl	80031c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2280      	movs	r2, #128	@ 0x80
 8000d80:	0252      	lsls	r2, r2, #9
 8000d82:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	0021      	movs	r1, r4
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2202      	movs	r2, #2
 8000d8a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	0292      	lsls	r2, r2, #10
 8000da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	22c0      	movs	r2, #192	@ 0xc0
 8000daa:	04d2      	lsls	r2, r2, #19
 8000dac:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	0592      	lsls	r2, r2, #22
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	0018      	movs	r0, r3
 8000dba:	f002 fa43 	bl	8003244 <HAL_RCC_OscConfig>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000dc2:	f000 fd25 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	003b      	movs	r3, r7
 8000dce:	2202      	movs	r2, #2
 8000dd0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	003b      	movs	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dde:	003b      	movs	r3, r7
 8000de0:	2102      	movs	r1, #2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f002 fd48 	bl	8003878 <HAL_RCC_ClockConfig>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000dec:	f000 fd10 	bl	8001810 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000df0:	f002 fecc 	bl	8003b8c <HAL_RCC_EnableCSS>
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b013      	add	sp, #76	@ 0x4c
 8000dfa:	bd90      	pop	{r4, r7, pc}

08000dfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e02:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <MX_I2C1_Init+0x7c>)
 8000e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12469;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e08:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <MX_I2C1_Init+0x80>)
 8000e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 72;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e0e:	2248      	movs	r2, #72	@ 0x48
 8000e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e30:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 fbcb 	bl	80025d4 <HAL_I2C_Init>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e42:	f000 fce5 	bl	8001810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	015a      	lsls	r2, r3, #5
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f002 f920 	bl	8003094 <HAL_I2CEx_ConfigAnalogFilter>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000e58:	f000 fcda 	bl	8001810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <MX_I2C1_Init+0x78>)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 f963 	bl	800312c <HAL_I2CEx_ConfigDigitalFilter>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000e6a:	f000 fcd1 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000038 	.word	0x20000038
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	00c12469 	.word	0x00c12469

08000e80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000e86:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <MX_I2C2_Init+0x7c>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C12469;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f00 <MX_I2C2_Init+0x80>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f001 fb89 	bl	80025d4 <HAL_I2C_Init>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 fca3 	bl	8001810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000eca:	2380      	movs	r3, #128	@ 0x80
 8000ecc:	015a      	lsls	r2, r3, #5
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f002 f8de 	bl	8003094 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 fc98 	bl	8001810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f002 f921 	bl	800312c <HAL_I2CEx_ConfigDigitalFilter>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 8000eee:	f000 fc8f 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000008c 	.word	0x2000008c
 8000efc:	40005800 	.word	0x40005800
 8000f00:	00c12469 	.word	0x00c12469

08000f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2310      	movs	r3, #16
 8000f12:	001a      	movs	r2, r3
 8000f14:	2100      	movs	r1, #0
 8000f16:	f003 fc65 	bl	80047e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	230c      	movs	r3, #12
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f003 fc5e 	bl	80047e4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	05d2      	lsls	r2, r2, #23
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <MX_TIM2_Init+0xa4>)
 8000f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <MX_TIM2_Init+0xa8>)
 8000f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f003 f80b 	bl	8003f6c <HAL_TIM_Base_Init>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000f5a:	f000 fc59 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	2110      	movs	r1, #16
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2280      	movs	r2, #128	@ 0x80
 8000f64:	0152      	lsls	r2, r2, #5
 8000f66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f68:	187a      	adds	r2, r7, r1
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f003 f98a 	bl	8004288 <HAL_TIM_ConfigClockSource>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f78:	f000 fc4a 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f88:	1d3a      	adds	r2, r7, #4
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_TIM2_Init+0xa0>)
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fba2 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f98:	f000 fc3a 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b008      	add	sp, #32
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000198 	.word	0x20000198
 8000fa8:	000003e7 	.word	0x000003e7
 8000fac:	0000f9ff 	.word	0x0000f9ff

08000fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f003 fc0f 	bl	80047e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	0018      	movs	r0, r3
 8000fca:	230c      	movs	r3, #12
 8000fcc:	001a      	movs	r2, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f003 fc08 	bl	80047e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <MX_TIM3_Init+0xa4>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 499;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000fdc:	22f4      	movs	r2, #244	@ 0xf4
 8000fde:	32ff      	adds	r2, #255	@ 0xff
 8000fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000fea:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <MX_TIM3_Init+0xa8>)
 8000fec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f002 ffb5 	bl	8003f6c <HAL_TIM_Base_Init>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001006:	f000 fc03 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	2110      	movs	r1, #16
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	0152      	lsls	r2, r2, #5
 8001012:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001014:	187a      	adds	r2, r7, r1
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f003 f934 	bl	8004288 <HAL_TIM_ConfigClockSource>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001024:	f000 fbf4 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001034:	1d3a      	adds	r2, r7, #4
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_TIM3_Init+0xa0>)
 8001038:	0011      	movs	r1, r2
 800103a:	0018      	movs	r0, r3
 800103c:	f003 fb4c 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001044:	f000 fbe4 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b008      	add	sp, #32
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001e4 	.word	0x200001e4
 8001054:	40000400 	.word	0x40000400
 8001058:	0000f9ff 	.word	0x0000f9ff

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_DMA_Init+0x48>)
 8001064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_DMA_Init+0x48>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	639a      	str	r2, [r3, #56]	@ 0x38
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <MX_DMA_Init+0x48>)
 8001070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2009      	movs	r0, #9
 8001080:	f000 ff34 	bl	8001eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001084:	2009      	movs	r0, #9
 8001086:	f000 ff46 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	200a      	movs	r0, #10
 8001090:	f000 ff2c 	bl	8001eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001094:	200a      	movs	r0, #10
 8001096:	f000 ff3e 	bl	8001f16 <HAL_NVIC_EnableIRQ>

}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	40021000 	.word	0x40021000

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b08b      	sub	sp, #44	@ 0x2c
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	2414      	movs	r4, #20
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	0018      	movs	r0, r3
 80010b4:	2314      	movs	r3, #20
 80010b6:	001a      	movs	r2, r3
 80010b8:	2100      	movs	r1, #0
 80010ba:	f003 fb93 	bl	80047e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b68      	ldr	r3, [pc, #416]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010c2:	4b67      	ldr	r3, [pc, #412]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010c4:	2120      	movs	r1, #32
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ca:	4b65      	ldr	r3, [pc, #404]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ce:	2220      	movs	r2, #32
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b62      	ldr	r3, [pc, #392]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010da:	4b61      	ldr	r3, [pc, #388]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010dc:	2104      	movs	r1, #4
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010f4:	2102      	movs	r1, #2
 80010f6:	430a      	orrs	r2, r1
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010fa:	4b59      	ldr	r3, [pc, #356]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b56      	ldr	r3, [pc, #344]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 8001108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800110a:	4b55      	ldr	r3, [pc, #340]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 800110c:	2101      	movs	r1, #1
 800110e:	430a      	orrs	r2, r1
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34
 8001112:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001116:	2201      	movs	r2, #1
 8001118:	4013      	ands	r3, r2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 8001120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001122:	4b4f      	ldr	r3, [pc, #316]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 8001124:	2108      	movs	r1, #8
 8001126:	430a      	orrs	r2, r1
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <MX_GPIO_Init+0x1b8>)
 800112c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112e:	2208      	movs	r2, #8
 8001130:	4013      	ands	r3, r2
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : C_SGPIO_SClock_Pin E_SGPIO_SLoad_Pin C_SGPIO_SLoad_Pin */
  GPIO_InitStruct.Pin = C_SGPIO_SClock_Pin|E_SGPIO_SLoad_Pin|C_SGPIO_SLoad_Pin;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	22c4      	movs	r2, #196	@ 0xc4
 800113a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2284      	movs	r2, #132	@ 0x84
 8001140:	0392      	lsls	r2, r2, #14
 8001142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	193b      	adds	r3, r7, r4
 800114c:	4a45      	ldr	r2, [pc, #276]	@ (8001264 <MX_GPIO_Init+0x1bc>)
 800114e:	0019      	movs	r1, r3
 8001150:	0010      	movs	r0, r2
 8001152:	f001 f889 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SGPIO_SClock_Pin A_SGPIO_SLoad_Pin B_SGPIO_SClock_Pin B_SGPIO_SLoad_Pin
                           D_SGPIO_SClock_Pin */
  GPIO_InitStruct.Pin = A_SGPIO_SClock_Pin|A_SGPIO_SLoad_Pin|B_SGPIO_SClock_Pin|B_SGPIO_SLoad_Pin
 8001156:	0021      	movs	r1, r4
 8001158:	187b      	adds	r3, r7, r1
 800115a:	4a43      	ldr	r2, [pc, #268]	@ (8001268 <MX_GPIO_Init+0x1c0>)
 800115c:	601a      	str	r2, [r3, #0]
                          |D_SGPIO_SClock_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2284      	movs	r2, #132	@ 0x84
 8001162:	0392      	lsls	r2, r2, #14
 8001164:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	000c      	movs	r4, r1
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	193b      	adds	r3, r7, r4
 8001170:	4a3e      	ldr	r2, [pc, #248]	@ (800126c <MX_GPIO_Init+0x1c4>)
 8001172:	0019      	movs	r1, r3
 8001174:	0010      	movs	r0, r2
 8001176:	f001 f877 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SGPIO_SData_Pin B_SGPIO_SData_Pin */
  GPIO_InitStruct.Pin = A_SGPIO_SData_Pin|B_SGPIO_SData_Pin;
 800117a:	193b      	adds	r3, r7, r4
 800117c:	4a3c      	ldr	r2, [pc, #240]	@ (8001270 <MX_GPIO_Init+0x1c8>)
 800117e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	193b      	adds	r3, r7, r4
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	193b      	adds	r3, r7, r4
 800118e:	4a37      	ldr	r2, [pc, #220]	@ (800126c <MX_GPIO_Init+0x1c4>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f001 f868 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_SGPIO_SClock_Pin F_SGPIO_SClock_Pin F_SGPIO_SLoad_Pin */
  GPIO_InitStruct.Pin = E_SGPIO_SClock_Pin|F_SGPIO_SClock_Pin|F_SGPIO_SLoad_Pin;
 8001198:	193b      	adds	r3, r7, r4
 800119a:	2286      	movs	r2, #134	@ 0x86
 800119c:	0212      	lsls	r2, r2, #8
 800119e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2284      	movs	r2, #132	@ 0x84
 80011a4:	0392      	lsls	r2, r2, #14
 80011a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	193a      	adds	r2, r7, r4
 80011b0:	23a0      	movs	r3, #160	@ 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 f856 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_SGPIO_SData_Pin E_SGPIO_SData_Pin D_SGPIO_SData_Pin */
  GPIO_InitStruct.Pin = C_SGPIO_SData_Pin|E_SGPIO_SData_Pin|D_SGPIO_SData_Pin;
 80011bc:	0021      	movs	r1, r4
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	22a2      	movs	r2, #162	@ 0xa2
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	000c      	movs	r4, r1
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	193b      	adds	r3, r7, r4
 80011d6:	4a27      	ldr	r2, [pc, #156]	@ (8001274 <MX_GPIO_Init+0x1cc>)
 80011d8:	0019      	movs	r1, r3
 80011da:	0010      	movs	r0, r2
 80011dc:	f001 f844 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_SGPIO_SData_Pin */
  GPIO_InitStruct.Pin = F_SGPIO_SData_Pin;
 80011e0:	0021      	movs	r1, r4
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	0052      	lsls	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	000c      	movs	r4, r1
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(F_SGPIO_SData_GPIO_Port, &GPIO_InitStruct);
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001264 <MX_GPIO_Init+0x1bc>)
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f001 f832 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : D_SGPIO_SLoad_Pin */
  GPIO_InitStruct.Pin = D_SGPIO_SLoad_Pin;
 8001204:	0021      	movs	r1, r4
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2220      	movs	r2, #32
 800120a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2284      	movs	r2, #132	@ 0x84
 8001210:	0392      	lsls	r2, r2, #14
 8001212:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(D_SGPIO_SLoad_GPIO_Port, &GPIO_InitStruct);
 800121a:	187b      	adds	r3, r7, r1
 800121c:	4a15      	ldr	r2, [pc, #84]	@ (8001274 <MX_GPIO_Init+0x1cc>)
 800121e:	0019      	movs	r1, r3
 8001220:	0010      	movs	r0, r2
 8001222:	f001 f821 	bl	8002268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2005      	movs	r0, #5
 800122c:	f000 fe5e 	bl	8001eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001230:	2005      	movs	r0, #5
 8001232:	f000 fe70 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2006      	movs	r0, #6
 800123c:	f000 fe56 	bl	8001eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001240:	2006      	movs	r0, #6
 8001242:	f000 fe68 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2007      	movs	r0, #7
 800124c:	f000 fe4e 	bl	8001eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001250:	2007      	movs	r0, #7
 8001252:	f000 fe60 	bl	8001f16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b00b      	add	sp, #44	@ 0x2c
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40021000 	.word	0x40021000
 8001264:	50000800 	.word	0x50000800
 8001268:	0000180b 	.word	0x0000180b
 800126c:	50000400 	.word	0x50000400
 8001270:	00002004 	.word	0x00002004
 8001274:	50000c00 	.word	0x50000c00

08001278 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	0002      	movs	r2, r0
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == A_SGPIO_SLoad_Pin && currentChannel == CHANNEL_A)
 8001284:	1dbb      	adds	r3, r7, #6
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d111      	bne.n	80012b0 <HAL_GPIO_EXTI_Falling_Callback+0x38>
 800128c:	4bbb      	ldr	r3, [pc, #748]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_GPIO_EXTI_Falling_Callback+0x38>
	{
		// Начало приема данных для канала A
		isReceiving_A = 1;
 8001296:	4bba      	ldr	r3, [pc, #744]	@ (8001580 <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_A = 0;
 800129c:	4bb9      	ldr	r3, [pc, #740]	@ (8001584 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
		bitCounter_A = 0;
 80012a2:	4bb9      	ldr	r3, [pc, #740]	@ (8001588 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 80012a8:	4bb8      	ldr	r3, [pc, #736]	@ (800158c <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e070      	b.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
	}
	else if (GPIO_Pin == B_SGPIO_SLoad_Pin && currentChannel == CHANNEL_B)
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	015b      	lsls	r3, r3, #5
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d111      	bne.n	80012e0 <HAL_GPIO_EXTI_Falling_Callback+0x68>
 80012bc:	4baf      	ldr	r3, [pc, #700]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10c      	bne.n	80012e0 <HAL_GPIO_EXTI_Falling_Callback+0x68>
	{
		// Начало приема данных для канала B
		isReceiving_B = 1;
 80012c6:	4bb2      	ldr	r3, [pc, #712]	@ (8001590 <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_B = 0;
 80012cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001594 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	801a      	strh	r2, [r3, #0]
		bitCounter_B = 0;
 80012d2:	4bb1      	ldr	r3, [pc, #708]	@ (8001598 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 80012d8:	4bac      	ldr	r3, [pc, #688]	@ (800158c <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e058      	b.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
	}
	else if (GPIO_Pin == C_SGPIO_SLoad_Pin && currentChannel == CHANNEL_C)
 80012e0:	1dbb      	adds	r3, r7, #6
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2b80      	cmp	r3, #128	@ 0x80
 80012e6:	d111      	bne.n	800130c <HAL_GPIO_EXTI_Falling_Callback+0x94>
 80012e8:	4ba4      	ldr	r3, [pc, #656]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d10c      	bne.n	800130c <HAL_GPIO_EXTI_Falling_Callback+0x94>
	{
		// Начало приема данных для канала B
		isReceiving_C = 1;
 80012f2:	4baa      	ldr	r3, [pc, #680]	@ (800159c <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_C = 0;
 80012f8:	4ba9      	ldr	r3, [pc, #676]	@ (80015a0 <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	801a      	strh	r2, [r3, #0]
		bitCounter_C = 0;
 80012fe:	4ba9      	ldr	r3, [pc, #676]	@ (80015a4 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 8001304:	4ba1      	ldr	r3, [pc, #644]	@ (800158c <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	e042      	b.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
	}
	else if (GPIO_Pin == D_SGPIO_SLoad_Pin && currentChannel == CHANNEL_D)
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	2b20      	cmp	r3, #32
 8001312:	d111      	bne.n	8001338 <HAL_GPIO_EXTI_Falling_Callback+0xc0>
 8001314:	4b99      	ldr	r3, [pc, #612]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b03      	cmp	r3, #3
 800131c:	d10c      	bne.n	8001338 <HAL_GPIO_EXTI_Falling_Callback+0xc0>
	{
		// Начало приема данных для канала B
		isReceiving_D = 1;
 800131e:	4ba2      	ldr	r3, [pc, #648]	@ (80015a8 <HAL_GPIO_EXTI_Falling_Callback+0x330>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_D = 0;
 8001324:	4ba1      	ldr	r3, [pc, #644]	@ (80015ac <HAL_GPIO_EXTI_Falling_Callback+0x334>)
 8001326:	2200      	movs	r2, #0
 8001328:	801a      	strh	r2, [r3, #0]
		bitCounter_D = 0;
 800132a:	4ba1      	ldr	r3, [pc, #644]	@ (80015b0 <HAL_GPIO_EXTI_Falling_Callback+0x338>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 8001330:	4b96      	ldr	r3, [pc, #600]	@ (800158c <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e02c      	b.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
	}
	else if (GPIO_Pin == E_SGPIO_SLoad_Pin && currentChannel == CHANNEL_E)
 8001338:	1dbb      	adds	r3, r7, #6
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	2b40      	cmp	r3, #64	@ 0x40
 800133e:	d111      	bne.n	8001364 <HAL_GPIO_EXTI_Falling_Callback+0xec>
 8001340:	4b8e      	ldr	r3, [pc, #568]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b04      	cmp	r3, #4
 8001348:	d10c      	bne.n	8001364 <HAL_GPIO_EXTI_Falling_Callback+0xec>
	{
		// Начало приема данных для канала B
		isReceiving_E = 1;
 800134a:	4b9a      	ldr	r3, [pc, #616]	@ (80015b4 <HAL_GPIO_EXTI_Falling_Callback+0x33c>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_E = 0;
 8001350:	4b99      	ldr	r3, [pc, #612]	@ (80015b8 <HAL_GPIO_EXTI_Falling_Callback+0x340>)
 8001352:	2200      	movs	r2, #0
 8001354:	801a      	strh	r2, [r3, #0]
		bitCounter_E = 0;
 8001356:	4b99      	ldr	r3, [pc, #612]	@ (80015bc <HAL_GPIO_EXTI_Falling_Callback+0x344>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 800135c:	4b8b      	ldr	r3, [pc, #556]	@ (800158c <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e016      	b.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
	}
	else if (GPIO_Pin == F_SGPIO_SLoad_Pin && currentChannel == CHANNEL_F)
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	429a      	cmp	r2, r3
 800136e:	d110      	bne.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
 8001370:	4b82      	ldr	r3, [pc, #520]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10b      	bne.n	8001392 <HAL_GPIO_EXTI_Falling_Callback+0x11a>
	{
		// Начало приема данных для канала B
		isReceiving_F = 1;
 800137a:	4b91      	ldr	r3, [pc, #580]	@ (80015c0 <HAL_GPIO_EXTI_Falling_Callback+0x348>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_F = 0;
 8001380:	4b90      	ldr	r3, [pc, #576]	@ (80015c4 <HAL_GPIO_EXTI_Falling_Callback+0x34c>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
		bitCounter_F = 0;
 8001386:	4b90      	ldr	r3, [pc, #576]	@ (80015c8 <HAL_GPIO_EXTI_Falling_Callback+0x350>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 800138c:	4b7f      	ldr	r3, [pc, #508]	@ (800158c <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == A_SGPIO_SClock_Pin && isReceiving_A && currentChannel == CHANNEL_A)
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d14a      	bne.n	8001430 <HAL_GPIO_EXTI_Falling_Callback+0x1b8>
 800139a:	4b79      	ldr	r3, [pc, #484]	@ (8001580 <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d046      	beq.n	8001430 <HAL_GPIO_EXTI_Falling_Callback+0x1b8>
 80013a2:	4b76      	ldr	r3, [pc, #472]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d141      	bne.n	8001430 <HAL_GPIO_EXTI_Falling_Callback+0x1b8>
	{
		// Прием данных для канала A
		uint8_t dataBit = HAL_GPIO_ReadPin(A_SGPIO_SData_GPIO_Port, A_SGPIO_SData_Pin);
 80013ac:	250f      	movs	r5, #15
 80013ae:	197c      	adds	r4, r7, r5
 80013b0:	4b86      	ldr	r3, [pc, #536]	@ (80015cc <HAL_GPIO_EXTI_Falling_Callback+0x354>)
 80013b2:	2104      	movs	r1, #4
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 f8bb 	bl	8002530 <HAL_GPIO_ReadPin>
 80013ba:	0003      	movs	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_A |= (dataBit << bitCounter_A);
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4a71      	ldr	r2, [pc, #452]	@ (8001588 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	4093      	lsls	r3, r2
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001584 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001584 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 80013d8:	801a      	strh	r2, [r3, #0]
		bitCounter_A++;
 80013da:	4b6b      	ldr	r3, [pc, #428]	@ (8001588 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b69      	ldr	r3, [pc, #420]	@ (8001588 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 80013e4:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_A >= 12) {
 80013e6:	4b68      	ldr	r3, [pc, #416]	@ (8001588 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b0b      	cmp	r3, #11
 80013ec:	d800      	bhi.n	80013f0 <HAL_GPIO_EXTI_Falling_Callback+0x178>
 80013ee:	e1e5      	b.n	80017bc <HAL_GPIO_EXTI_Falling_Callback+0x544>
			isReceiving_A = 0;
 80013f0:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_A, 0); // Обработка данных для дисков 0-3
 80013f6:	4b63      	ldr	r3, [pc, #396]	@ (8001584 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7fe ff59 	bl	80002b4 <ProcessSGPIOData>

			if(sgpioBuffer_A !=0)
 8001402:	4b60      	ldr	r3, [pc, #384]	@ (8001584 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_GPIO_EXTI_Falling_Callback+0x1a0>
			{
				sgpio_detected = 1;
 800140a:	4b71      	ldr	r3, [pc, #452]	@ (80015d0 <HAL_GPIO_EXTI_Falling_Callback+0x358>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001410:	4b70      	ldr	r3, [pc, #448]	@ (80015d4 <HAL_GPIO_EXTI_Falling_Callback+0x35c>)
 8001412:	0018      	movs	r0, r3
 8001414:	f002 fe02 	bl	800401c <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_A = 0; // Сброс буфера
 8001418:	4b5a      	ldr	r3, [pc, #360]	@ (8001584 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал B только если прием данных завершен
			if (!isReceiving_B) {
 800141e:	4b5c      	ldr	r3, [pc, #368]	@ (8001590 <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d000      	beq.n	8001428 <HAL_GPIO_EXTI_Falling_Callback+0x1b0>
 8001426:	e1c9      	b.n	80017bc <HAL_GPIO_EXTI_Falling_Callback+0x544>
				currentChannel = CHANNEL_B;
 8001428:	4b54      	ldr	r3, [pc, #336]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
	{
 800142e:	e1c5      	b.n	80017bc <HAL_GPIO_EXTI_Falling_Callback+0x544>
			}

		}
	}
	else if (GPIO_Pin == B_SGPIO_SClock_Pin && isReceiving_B && currentChannel == CHANNEL_B)
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	429a      	cmp	r2, r3
 800143a:	d14c      	bne.n	80014d6 <HAL_GPIO_EXTI_Falling_Callback+0x25e>
 800143c:	4b54      	ldr	r3, [pc, #336]	@ (8001590 <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d048      	beq.n	80014d6 <HAL_GPIO_EXTI_Falling_Callback+0x25e>
 8001444:	4b4d      	ldr	r3, [pc, #308]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d143      	bne.n	80014d6 <HAL_GPIO_EXTI_Falling_Callback+0x25e>
	{
		// Прием данных для канала B
		uint8_t dataBit = HAL_GPIO_ReadPin(B_SGPIO_SData_GPIO_Port, B_SGPIO_SData_Pin);
 800144e:	250e      	movs	r5, #14
 8001450:	197c      	adds	r4, r7, r5
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	4a5d      	ldr	r2, [pc, #372]	@ (80015cc <HAL_GPIO_EXTI_Falling_Callback+0x354>)
 8001458:	0019      	movs	r1, r3
 800145a:	0010      	movs	r0, r2
 800145c:	f001 f868 	bl	8002530 <HAL_GPIO_ReadPin>
 8001460:	0003      	movs	r3, r0
 8001462:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_B |= (dataBit << bitCounter_B);
 8001464:	197b      	adds	r3, r7, r5
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4a4b      	ldr	r2, [pc, #300]	@ (8001598 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	4093      	lsls	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	b29a      	uxth	r2, r3
 800147c:	4b45      	ldr	r3, [pc, #276]	@ (8001594 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 800147e:	801a      	strh	r2, [r3, #0]
		bitCounter_B++;
 8001480:	4b45      	ldr	r3, [pc, #276]	@ (8001598 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 800148a:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_B >= 12) {
 800148c:	4b42      	ldr	r3, [pc, #264]	@ (8001598 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b0b      	cmp	r3, #11
 8001492:	d800      	bhi.n	8001496 <HAL_GPIO_EXTI_Falling_Callback+0x21e>
 8001494:	e194      	b.n	80017c0 <HAL_GPIO_EXTI_Falling_Callback+0x548>
			isReceiving_B = 0;
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_B, 4); // Обработка данных для дисков 4-7
 800149c:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	2104      	movs	r1, #4
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7fe ff06 	bl	80002b4 <ProcessSGPIOData>
			if(sgpioBuffer_B != 0)
 80014a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_EXTI_Falling_Callback+0x246>
			{
				sgpio_detected = 1;
 80014b0:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <HAL_GPIO_EXTI_Falling_Callback+0x358>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <HAL_GPIO_EXTI_Falling_Callback+0x35c>)
 80014b8:	0018      	movs	r0, r3
 80014ba:	f002 fdaf 	bl	800401c <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_B = 0; // Сброс буфера
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал A
			if (!isReceiving_A) {
 80014c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d000      	beq.n	80014ce <HAL_GPIO_EXTI_Falling_Callback+0x256>
 80014cc:	e178      	b.n	80017c0 <HAL_GPIO_EXTI_Falling_Callback+0x548>
				currentChannel = CHANNEL_C;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	701a      	strb	r2, [r3, #0]
	{
 80014d4:	e174      	b.n	80017c0 <HAL_GPIO_EXTI_Falling_Callback+0x548>
			}
		}
	}else if (GPIO_Pin == C_SGPIO_SClock_Pin && isReceiving_C && currentChannel == CHANNEL_C)
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d000      	beq.n	80014e0 <HAL_GPIO_EXTI_Falling_Callback+0x268>
 80014de:	e07d      	b.n	80015dc <HAL_GPIO_EXTI_Falling_Callback+0x364>
 80014e0:	4b2e      	ldr	r3, [pc, #184]	@ (800159c <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d100      	bne.n	80014ea <HAL_GPIO_EXTI_Falling_Callback+0x272>
 80014e8:	e078      	b.n	80015dc <HAL_GPIO_EXTI_Falling_Callback+0x364>
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d173      	bne.n	80015dc <HAL_GPIO_EXTI_Falling_Callback+0x364>
	{
		// Прием данных для канала A
		uint8_t dataBit = HAL_GPIO_ReadPin(C_SGPIO_SData_GPIO_Port, C_SGPIO_SData_Pin);
 80014f4:	250d      	movs	r5, #13
 80014f6:	197c      	adds	r4, r7, r5
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4a36      	ldr	r2, [pc, #216]	@ (80015d8 <HAL_GPIO_EXTI_Falling_Callback+0x360>)
 80014fe:	0019      	movs	r1, r3
 8001500:	0010      	movs	r0, r2
 8001502:	f001 f815 	bl	8002530 <HAL_GPIO_ReadPin>
 8001506:	0003      	movs	r3, r0
 8001508:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_C |= (dataBit << bitCounter_C);
 800150a:	197b      	adds	r3, r7, r5
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4a25      	ldr	r2, [pc, #148]	@ (80015a4 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	4093      	lsls	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001524:	801a      	strh	r2, [r3, #0]
		bitCounter_C++;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001530:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_C >= 12) {
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b0b      	cmp	r3, #11
 8001538:	d800      	bhi.n	800153c <HAL_GPIO_EXTI_Falling_Callback+0x2c4>
 800153a:	e143      	b.n	80017c4 <HAL_GPIO_EXTI_Falling_Callback+0x54c>
			isReceiving_C = 0;
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_C, 0); // Обработка данных для дисков 0-3
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2100      	movs	r1, #0
 8001548:	0018      	movs	r0, r3
 800154a:	f7fe feb3 	bl	80002b4 <ProcessSGPIOData>

			if(sgpioBuffer_C !=0)
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_EXTI_Falling_Callback+0x2ec>
			{
				sgpio_detected = 1;
 8001556:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <HAL_GPIO_EXTI_Falling_Callback+0x358>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_GPIO_EXTI_Falling_Callback+0x35c>)
 800155e:	0018      	movs	r0, r3
 8001560:	f002 fd5c 	bl	800401c <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_C = 0; // Сброс буфера
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал B только если прием данных завершен
			if (!isReceiving_C) {
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d000      	beq.n	8001574 <HAL_GPIO_EXTI_Falling_Callback+0x2fc>
 8001572:	e127      	b.n	80017c4 <HAL_GPIO_EXTI_Falling_Callback+0x54c>
				currentChannel = CHANNEL_D;
 8001574:	4b01      	ldr	r3, [pc, #4]	@ (800157c <HAL_GPIO_EXTI_Falling_Callback+0x304>)
 8001576:	2203      	movs	r2, #3
 8001578:	701a      	strb	r2, [r3, #0]
	{
 800157a:	e123      	b.n	80017c4 <HAL_GPIO_EXTI_Falling_Callback+0x54c>
 800157c:	20000034 	.word	0x20000034
 8001580:	2000023a 	.word	0x2000023a
 8001584:	2000023c 	.word	0x2000023c
 8001588:	2000023e 	.word	0x2000023e
 800158c:	20000253 	.word	0x20000253
 8001590:	2000023f 	.word	0x2000023f
 8001594:	20000240 	.word	0x20000240
 8001598:	20000242 	.word	0x20000242
 800159c:	20000243 	.word	0x20000243
 80015a0:	20000244 	.word	0x20000244
 80015a4:	20000246 	.word	0x20000246
 80015a8:	20000247 	.word	0x20000247
 80015ac:	20000248 	.word	0x20000248
 80015b0:	2000024a 	.word	0x2000024a
 80015b4:	2000024b 	.word	0x2000024b
 80015b8:	2000024c 	.word	0x2000024c
 80015bc:	2000024e 	.word	0x2000024e
 80015c0:	2000024f 	.word	0x2000024f
 80015c4:	20000250 	.word	0x20000250
 80015c8:	20000252 	.word	0x20000252
 80015cc:	50000400 	.word	0x50000400
 80015d0:	20000254 	.word	0x20000254
 80015d4:	20000198 	.word	0x20000198
 80015d8:	50000c00 	.word	0x50000c00
			}

		}
	}
	else if (GPIO_Pin == D_SGPIO_SClock_Pin && isReceiving_D && currentChannel == CHANNEL_D)
 80015dc:	1dbb      	adds	r3, r7, #6
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d14a      	bne.n	800167a <HAL_GPIO_EXTI_Falling_Callback+0x402>
 80015e4:	4b7c      	ldr	r3, [pc, #496]	@ (80017d8 <HAL_GPIO_EXTI_Falling_Callback+0x560>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d046      	beq.n	800167a <HAL_GPIO_EXTI_Falling_Callback+0x402>
 80015ec:	4b7b      	ldr	r3, [pc, #492]	@ (80017dc <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d141      	bne.n	800167a <HAL_GPIO_EXTI_Falling_Callback+0x402>
	{
		// Прием данных для канала B
		uint8_t dataBit = HAL_GPIO_ReadPin(D_SGPIO_SData_GPIO_Port, D_SGPIO_SData_Pin);
 80015f6:	250c      	movs	r5, #12
 80015f8:	197c      	adds	r4, r7, r5
 80015fa:	4b79      	ldr	r3, [pc, #484]	@ (80017e0 <HAL_GPIO_EXTI_Falling_Callback+0x568>)
 80015fc:	2140      	movs	r1, #64	@ 0x40
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 ff96 	bl	8002530 <HAL_GPIO_ReadPin>
 8001604:	0003      	movs	r3, r0
 8001606:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_D |= (dataBit << bitCounter_D);
 8001608:	197b      	adds	r3, r7, r5
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4a75      	ldr	r2, [pc, #468]	@ (80017e4 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	4093      	lsls	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b71      	ldr	r3, [pc, #452]	@ (80017e8 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 8001622:	801a      	strh	r2, [r3, #0]
		bitCounter_D++;
 8001624:	4b6f      	ldr	r3, [pc, #444]	@ (80017e4 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b6d      	ldr	r3, [pc, #436]	@ (80017e4 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 800162e:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_D >= 12) {
 8001630:	4b6c      	ldr	r3, [pc, #432]	@ (80017e4 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b0b      	cmp	r3, #11
 8001636:	d800      	bhi.n	800163a <HAL_GPIO_EXTI_Falling_Callback+0x3c2>
 8001638:	e0c6      	b.n	80017c8 <HAL_GPIO_EXTI_Falling_Callback+0x550>
			isReceiving_D = 0;
 800163a:	4b67      	ldr	r3, [pc, #412]	@ (80017d8 <HAL_GPIO_EXTI_Falling_Callback+0x560>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_D, 4); // Обработка данных для дисков 4-7
 8001640:	4b69      	ldr	r3, [pc, #420]	@ (80017e8 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2104      	movs	r1, #4
 8001646:	0018      	movs	r0, r3
 8001648:	f7fe fe34 	bl	80002b4 <ProcessSGPIOData>
			if(sgpioBuffer_D != 0)
 800164c:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_EXTI_Falling_Callback+0x3ea>
			{
				sgpio_detected = 1;
 8001654:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <HAL_GPIO_EXTI_Falling_Callback+0x574>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 800165a:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_GPIO_EXTI_Falling_Callback+0x578>)
 800165c:	0018      	movs	r0, r3
 800165e:	f002 fcdd 	bl	800401c <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_D = 0; // Сброс буфера
 8001662:	4b61      	ldr	r3, [pc, #388]	@ (80017e8 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 8001664:	2200      	movs	r2, #0
 8001666:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал A
			if (!isReceiving_D) {
 8001668:	4b5b      	ldr	r3, [pc, #364]	@ (80017d8 <HAL_GPIO_EXTI_Falling_Callback+0x560>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d000      	beq.n	8001672 <HAL_GPIO_EXTI_Falling_Callback+0x3fa>
 8001670:	e0aa      	b.n	80017c8 <HAL_GPIO_EXTI_Falling_Callback+0x550>
				currentChannel = CHANNEL_E;
 8001672:	4b5a      	ldr	r3, [pc, #360]	@ (80017dc <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 8001674:	2204      	movs	r2, #4
 8001676:	701a      	strb	r2, [r3, #0]
	{
 8001678:	e0a6      	b.n	80017c8 <HAL_GPIO_EXTI_Falling_Callback+0x550>
			}
		}
	}else if (GPIO_Pin == E_SGPIO_SClock_Pin && isReceiving_E && currentChannel == CHANNEL_E)
 800167a:	1dbb      	adds	r3, r7, #6
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	429a      	cmp	r2, r3
 8001684:	d149      	bne.n	800171a <HAL_GPIO_EXTI_Falling_Callback+0x4a2>
 8001686:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <HAL_GPIO_EXTI_Falling_Callback+0x57c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d045      	beq.n	800171a <HAL_GPIO_EXTI_Falling_Callback+0x4a2>
 800168e:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b04      	cmp	r3, #4
 8001696:	d140      	bne.n	800171a <HAL_GPIO_EXTI_Falling_Callback+0x4a2>
	{
		// Прием данных для канала A
		uint8_t dataBit = HAL_GPIO_ReadPin(E_SGPIO_SData_GPIO_Port, E_SGPIO_SData_Pin);
 8001698:	250b      	movs	r5, #11
 800169a:	197c      	adds	r4, r7, r5
 800169c:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <HAL_GPIO_EXTI_Falling_Callback+0x568>)
 800169e:	2104      	movs	r1, #4
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 ff45 	bl	8002530 <HAL_GPIO_ReadPin>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_E |= (dataBit << bitCounter_E);
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4a52      	ldr	r2, [pc, #328]	@ (80017f8 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	4093      	lsls	r3, r2
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b4e      	ldr	r3, [pc, #312]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 80016c4:	801a      	strh	r2, [r3, #0]
		bitCounter_E++;
 80016c6:	4b4c      	ldr	r3, [pc, #304]	@ (80017f8 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 80016d0:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_E >= 12) {
 80016d2:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b0b      	cmp	r3, #11
 80016d8:	d800      	bhi.n	80016dc <HAL_GPIO_EXTI_Falling_Callback+0x464>
 80016da:	e077      	b.n	80017cc <HAL_GPIO_EXTI_Falling_Callback+0x554>
			isReceiving_E = 0;
 80016dc:	4b45      	ldr	r3, [pc, #276]	@ (80017f4 <HAL_GPIO_EXTI_Falling_Callback+0x57c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_E, 0); // Обработка данных для дисков 0-3
 80016e2:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2100      	movs	r1, #0
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7fe fde3 	bl	80002b4 <ProcessSGPIOData>

			if(sgpioBuffer_E !=0)
 80016ee:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d006      	beq.n	8001704 <HAL_GPIO_EXTI_Falling_Callback+0x48c>
			{
				sgpio_detected = 1;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <HAL_GPIO_EXTI_Falling_Callback+0x574>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80016fc:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <HAL_GPIO_EXTI_Falling_Callback+0x578>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f002 fc8c 	bl	800401c <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_E = 0; // Сброс буфера
 8001704:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 8001706:	2200      	movs	r2, #0
 8001708:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал B только если прием данных завершен
			if (!isReceiving_E) {
 800170a:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <HAL_GPIO_EXTI_Falling_Callback+0x57c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d15c      	bne.n	80017cc <HAL_GPIO_EXTI_Falling_Callback+0x554>
				currentChannel = CHANNEL_F;
 8001712:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 8001714:	2205      	movs	r2, #5
 8001716:	701a      	strb	r2, [r3, #0]
	{
 8001718:	e058      	b.n	80017cc <HAL_GPIO_EXTI_Falling_Callback+0x554>
			}

		}
	}
	else if (GPIO_Pin == F_SGPIO_SClock_Pin && isReceiving_F && currentChannel == CHANNEL_F)
 800171a:	1dbb      	adds	r3, r7, #6
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	@ 0x80
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	429a      	cmp	r2, r3
 8001724:	d153      	bne.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
 8001726:	4b36      	ldr	r3, [pc, #216]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x588>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d04f      	beq.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
 800172e:	4b2b      	ldr	r3, [pc, #172]	@ (80017dc <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b05      	cmp	r3, #5
 8001736:	d14a      	bne.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
		// Прием данных для канала B
		uint8_t dataBit = HAL_GPIO_ReadPin(F_SGPIO_SData_GPIO_Port, F_SGPIO_SData_Pin);
 8001738:	250a      	movs	r5, #10
 800173a:	197c      	adds	r4, r7, r5
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4a30      	ldr	r2, [pc, #192]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x58c>)
 8001742:	0019      	movs	r1, r3
 8001744:	0010      	movs	r0, r2
 8001746:	f000 fef3 	bl	8002530 <HAL_GPIO_ReadPin>
 800174a:	0003      	movs	r3, r0
 800174c:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_F |= (dataBit << bitCounter_F);
 800174e:	197b      	adds	r3, r7, r5
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4a2d      	ldr	r2, [pc, #180]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4093      	lsls	r3, r2
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b2c      	ldr	r3, [pc, #176]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b21b      	sxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b21b      	sxth	r3, r3
 8001764:	b29a      	uxth	r2, r3
 8001766:	4b29      	ldr	r3, [pc, #164]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 8001768:	801a      	strh	r2, [r3, #0]
		bitCounter_F++;
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 8001774:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_F >= 12) {
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b0b      	cmp	r3, #11
 800177c:	d927      	bls.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
			isReceiving_F = 0;
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x588>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_F, 4); // Обработка данных для дисков 4-7
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	2104      	movs	r1, #4
 800178a:	0018      	movs	r0, r3
 800178c:	f7fe fd92 	bl	80002b4 <ProcessSGPIOData>
			if(sgpioBuffer_F != 0)
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_EXTI_Falling_Callback+0x52e>
			{
				sgpio_detected = 1;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <HAL_GPIO_EXTI_Falling_Callback+0x574>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <HAL_GPIO_EXTI_Falling_Callback+0x578>)
 80017a0:	0018      	movs	r0, r3
 80017a2:	f002 fc3b 	bl	800401c <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_F = 0; // Сброс буфера
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал A
			if (!isReceiving_F) {
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x588>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
				currentChannel = CHANNEL_A;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80017ba:	e008      	b.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	e006      	b.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	e004      	b.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 80017c8:	46c0      	nop			@ (mov r8, r8)
 80017ca:	e000      	b.n	80017ce <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 80017cc:	46c0      	nop			@ (mov r8, r8)
}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000247 	.word	0x20000247
 80017dc:	20000034 	.word	0x20000034
 80017e0:	50000c00 	.word	0x50000c00
 80017e4:	2000024a 	.word	0x2000024a
 80017e8:	20000248 	.word	0x20000248
 80017ec:	20000254 	.word	0x20000254
 80017f0:	20000198 	.word	0x20000198
 80017f4:	2000024b 	.word	0x2000024b
 80017f8:	2000024e 	.word	0x2000024e
 80017fc:	2000024c 	.word	0x2000024c
 8001800:	2000024f 	.word	0x2000024f
 8001804:	50000800 	.word	0x50000800
 8001808:	20000252 	.word	0x20000252
 800180c:	20000250 	.word	0x20000250

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_MspInit+0x44>)
 8001824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_MspInit+0x44>)
 8001828:	2101      	movs	r1, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_MspInit+0x44>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_MspInit+0x44>)
 800183c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_MspInit+0x44>)
 8001840:	2180      	movs	r1, #128	@ 0x80
 8001842:	0549      	lsls	r1, r1, #21
 8001844:	430a      	orrs	r2, r1
 8001846:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_MspInit+0x44>)
 800184a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	055b      	lsls	r3, r3, #21
 8001850:	4013      	ands	r3, r2
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b099      	sub	sp, #100	@ 0x64
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	234c      	movs	r3, #76	@ 0x4c
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	0018      	movs	r0, r3
 8001872:	2314      	movs	r3, #20
 8001874:	001a      	movs	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	f002 ffb4 	bl	80047e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	2418      	movs	r4, #24
 800187e:	193b      	adds	r3, r7, r4
 8001880:	0018      	movs	r0, r3
 8001882:	2334      	movs	r3, #52	@ 0x34
 8001884:	001a      	movs	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	f002 ffac 	bl	80047e4 <memset>
  if(hi2c->Instance==I2C1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a67      	ldr	r2, [pc, #412]	@ (8001a30 <HAL_I2C_MspInit+0x1cc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d000      	beq.n	8001898 <HAL_I2C_MspInit+0x34>
 8001896:	e090      	b.n	80019ba <HAL_I2C_MspInit+0x156>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001898:	193b      	adds	r3, r7, r4
 800189a:	2220      	movs	r2, #32
 800189c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	0018      	movs	r0, r3
 80018a8:	f002 f9a8 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80018b0:	f7ff ffae 	bl	8001810 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80018b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80018ba:	2102      	movs	r1, #2
 80018bc:	430a      	orrs	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80018c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C_SDA_Pin;
 80018cc:	214c      	movs	r1, #76	@ 0x4c
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	22c0      	movs	r2, #192	@ 0xc0
 80018d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2212      	movs	r2, #18
 80018d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2206      	movs	r2, #6
 80018ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_I2C_MspInit+0x1d4>)
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	f000 fcb8 	bl	8002268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80018fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80018fe:	2180      	movs	r1, #128	@ 0x80
 8001900:	0389      	lsls	r1, r1, #14
 8001902:	430a      	orrs	r2, r1
 8001904:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001906:	4b4b      	ldr	r3, [pc, #300]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 8001908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	039b      	lsls	r3, r3, #14
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8001914:	4b49      	ldr	r3, [pc, #292]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001916:	4a4a      	ldr	r2, [pc, #296]	@ (8001a40 <HAL_I2C_MspInit+0x1dc>)
 8001918:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800191a:	4b48      	ldr	r3, [pc, #288]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 800191c:	220a      	movs	r2, #10
 800191e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001920:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	4b45      	ldr	r3, [pc, #276]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800192c:	4b43      	ldr	r3, [pc, #268]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001932:	4b42      	ldr	r3, [pc, #264]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001938:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800193e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001944:	4b3d      	ldr	r3, [pc, #244]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001946:	2200      	movs	r2, #0
 8001948:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800194a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 800194c:	0018      	movs	r0, r3
 800194e:	f000 faff 	bl	8001f50 <HAL_DMA_Init>
 8001952:	1e03      	subs	r3, r0, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8001956:	f7ff ff5b 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a37      	ldr	r2, [pc, #220]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 800195e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001960:	4b36      	ldr	r3, [pc, #216]	@ (8001a3c <HAL_I2C_MspInit+0x1d8>)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 8001968:	4a37      	ldr	r2, [pc, #220]	@ (8001a48 <HAL_I2C_MspInit+0x1e4>)
 800196a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 800196e:	220b      	movs	r2, #11
 8001970:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 8001974:	2210      	movs	r2, #16
 8001976:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001978:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001984:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800198a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001990:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 fad6 	bl	8001f50 <HAL_DMA_Init>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_MspInit+0x148>
    {
      Error_Handler();
 80019a8:	f7ff ff32 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a25      	ldr	r2, [pc, #148]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 80019b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80019b2:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <HAL_I2C_MspInit+0x1e0>)
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019b8:	e036      	b.n	8001a28 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a23      	ldr	r2, [pc, #140]	@ (8001a4c <HAL_I2C_MspInit+0x1e8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d131      	bne.n	8001a28 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 80019d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d4:	2201      	movs	r2, #1
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RED_I2C2_SCL_Pin|RED_I2C2_SDA_Pin;
 80019dc:	214c      	movs	r1, #76	@ 0x4c
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	22c0      	movs	r2, #192	@ 0xc0
 80019e2:	0152      	lsls	r2, r2, #5
 80019e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2212      	movs	r2, #18
 80019ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2206      	movs	r2, #6
 80019fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	187a      	adds	r2, r7, r1
 8001a00:	23a0      	movs	r3, #160	@ 0xa0
 8001a02:	05db      	lsls	r3, r3, #23
 8001a04:	0011      	movs	r1, r2
 8001a06:	0018      	movs	r0, r3
 8001a08:	f000 fc2e 	bl	8002268 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 8001a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 8001a12:	2180      	movs	r1, #128	@ 0x80
 8001a14:	03c9      	lsls	r1, r1, #15
 8001a16:	430a      	orrs	r2, r1
 8001a18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_I2C_MspInit+0x1d0>)
 8001a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	03db      	lsls	r3, r3, #15
 8001a22:	4013      	ands	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b019      	add	sp, #100	@ 0x64
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40021000 	.word	0x40021000
 8001a38:	50000400 	.word	0x50000400
 8001a3c:	200000e0 	.word	0x200000e0
 8001a40:	40020008 	.word	0x40020008
 8001a44:	2000013c 	.word	0x2000013c
 8001a48:	4002001c 	.word	0x4002001c
 8001a4c:	40005800 	.word	0x40005800

08001a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	05db      	lsls	r3, r3, #23
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d114      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2101      	movs	r1, #1
 8001a80:	200f      	movs	r0, #15
 8001a82:	f000 fa33 	bl	8001eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f000 fa45 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a8c:	e018      	b.n	8001ac0 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_TIM_Base_MspInit+0x7c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d113      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x78>)
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2010      	movs	r0, #16
 8001ab6:	f000 fa19 	bl	8001eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aba:	2010      	movs	r0, #16
 8001abc:	f000 fa2b 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b004      	add	sp, #16
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40000400 	.word	0x40000400

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ad4:	f002 f868 	bl	8003ba8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	e7fd      	b.n	8001ad8 <NMI_Handler+0x8>

08001adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	e7fd      	b.n	8001ae0 <HardFault_Handler+0x4>

08001ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 f90a 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SGPIO_SClock_Pin);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fd2e 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(A_SGPIO_SLoad_Pin);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f000 fd2b 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SGPIO_SClock_Pin);
 8001b20:	2004      	movs	r0, #4
 8001b22:	f000 fd23 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(D_SGPIO_SClock_Pin);
 8001b26:	2008      	movs	r0, #8
 8001b28:	f000 fd20 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D_SGPIO_SLoad_Pin);
 8001b36:	2020      	movs	r0, #32
 8001b38:	f000 fd18 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_SGPIO_SLoad_Pin);
 8001b3c:	2040      	movs	r0, #64	@ 0x40
 8001b3e:	f000 fd15 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C_SGPIO_SLoad_Pin);
 8001b42:	2080      	movs	r0, #128	@ 0x80
 8001b44:	f000 fd12 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_SGPIO_SClock_Pin);
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 fd0d 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(F_SGPIO_SClock_Pin);
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fd08 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B_SGPIO_SClock_Pin);
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 fd03 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B_SGPIO_SLoad_Pin);
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fcfe 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(F_SGPIO_SLoad_Pin);
 8001b70:	2380      	movs	r3, #128	@ 0x80
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fcf9 	bl	800256c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <DMA1_Channel1_IRQHandler+0x14>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 fa6c 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b8c:	46c0      	nop			@ (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	200000e0 	.word	0x200000e0

08001b98 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <DMA1_Channel2_3_IRQHandler+0x14>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 fa60 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	2000013c 	.word	0x2000013c

08001bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <TIM2_IRQHandler+0x14>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f002 fa5e 	bl	8004078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	20000198 	.word	0x20000198

08001bc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <TIM3_IRQHandler+0x14>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f002 fa52 	bl	8004078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	200001e4 	.word	0x200001e4

08001be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf0:	f7ff fff6 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c1a:	f002 fdeb 	bl	80047f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c1e:	f7ff f869 	bl	8000cf4 <main>

08001c22 <LoopForever>:

LoopForever:
  b LoopForever
 8001c22:	e7fe      	b.n	8001c22 <LoopForever>
  ldr   r0, =_estack
 8001c24:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001c30:	0800489c 	.word	0x0800489c
  ldr r2, =_sbss
 8001c34:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001c38:	2000025c 	.word	0x2000025c

08001c3c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_COMP_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_Init+0x3c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_Init+0x3c>)
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0049      	lsls	r1, r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f810 	bl	8001c80 <HAL_InitTick>
 8001c60:	1e03      	subs	r3, r0, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e001      	b.n	8001c70 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fdd6 	bl	800181c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_InitTick+0x88>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d02b      	beq.n	8001cf0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <HAL_InitTick+0x8c>)
 8001c9a:	681c      	ldr	r4, [r3, #0]
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_InitTick+0x88>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	23fa      	movs	r3, #250	@ 0xfa
 8001ca4:	0098      	lsls	r0, r3, #2
 8001ca6:	f7fe fa2d 	bl	8000104 <__udivsi3>
 8001caa:	0003      	movs	r3, r0
 8001cac:	0019      	movs	r1, r3
 8001cae:	0020      	movs	r0, r4
 8001cb0:	f7fe fa28 	bl	8000104 <__udivsi3>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f000 f93d 	bl	8001f36 <HAL_SYSTICK_Config>
 8001cbc:	1e03      	subs	r3, r0, #0
 8001cbe:	d112      	bne.n	8001ce6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d80a      	bhi.n	8001cdc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	425b      	negs	r3, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f90c 	bl	8001eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_InitTick+0x90>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00d      	b.n	8001cf8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001cdc:	230f      	movs	r3, #15
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e008      	b.n	8001cf8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e003      	b.n	8001cf8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b005      	add	sp, #20
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	20000014 	.word	0x20000014
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	20000010 	.word	0x20000010

08001d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_IncTick+0x1c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_IncTick+0x20>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	18d2      	adds	r2, r2, r3
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <HAL_IncTick+0x20>)
 8001d26:	601a      	str	r2, [r3, #0]
}
 8001d28:	46c0      	nop			@ (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	20000014 	.word	0x20000014
 8001d34:	20000258 	.word	0x20000258

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b02      	ldr	r3, [pc, #8]	@ (8001d48 <HAL_GetTick+0x10>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	20000258 	.word	0x20000258

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <HAL_Delay+0x44>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	f7ff ffe0 	bl	8001d38 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f7      	bhi.n	8001d74 <HAL_Delay+0x28>
  {
  }
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	20000014 	.word	0x20000014

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001da6:	d809      	bhi.n	8001dbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	231f      	movs	r3, #31
 8001db0:	401a      	ands	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <__NVIC_EnableIRQ+0x30>)
 8001db4:	2101      	movs	r1, #1
 8001db6:	4091      	lsls	r1, r2
 8001db8:	000a      	movs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dbc:	46c0      	nop			@ (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	0002      	movs	r2, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ddc:	d828      	bhi.n	8001e30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dde:	4a2f      	ldr	r2, [pc, #188]	@ (8001e9c <__NVIC_SetPriority+0xd4>)
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	33c0      	adds	r3, #192	@ 0xc0
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	589b      	ldr	r3, [r3, r2]
 8001dee:	1dfa      	adds	r2, r7, #7
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	0011      	movs	r1, r2
 8001df4:	2203      	movs	r2, #3
 8001df6:	400a      	ands	r2, r1
 8001df8:	00d2      	lsls	r2, r2, #3
 8001dfa:	21ff      	movs	r1, #255	@ 0xff
 8001dfc:	4091      	lsls	r1, r2
 8001dfe:	000a      	movs	r2, r1
 8001e00:	43d2      	mvns	r2, r2
 8001e02:	401a      	ands	r2, r3
 8001e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	22ff      	movs	r2, #255	@ 0xff
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	1dfb      	adds	r3, r7, #7
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	0018      	movs	r0, r3
 8001e14:	2303      	movs	r3, #3
 8001e16:	4003      	ands	r3, r0
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1c:	481f      	ldr	r0, [pc, #124]	@ (8001e9c <__NVIC_SetPriority+0xd4>)
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	430a      	orrs	r2, r1
 8001e28:	33c0      	adds	r3, #192	@ 0xc0
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e2e:	e031      	b.n	8001e94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <__NVIC_SetPriority+0xd8>)
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	0019      	movs	r1, r3
 8001e38:	230f      	movs	r3, #15
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	3b08      	subs	r3, #8
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3306      	adds	r3, #6
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	18d3      	adds	r3, r2, r3
 8001e46:	3304      	adds	r3, #4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1dfa      	adds	r2, r7, #7
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	0011      	movs	r1, r2
 8001e50:	2203      	movs	r2, #3
 8001e52:	400a      	ands	r2, r1
 8001e54:	00d2      	lsls	r2, r2, #3
 8001e56:	21ff      	movs	r1, #255	@ 0xff
 8001e58:	4091      	lsls	r1, r2
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	43d2      	mvns	r2, r2
 8001e5e:	401a      	ands	r2, r3
 8001e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	22ff      	movs	r2, #255	@ 0xff
 8001e68:	401a      	ands	r2, r3
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	2303      	movs	r3, #3
 8001e72:	4003      	ands	r3, r0
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e78:	4809      	ldr	r0, [pc, #36]	@ (8001ea0 <__NVIC_SetPriority+0xd8>)
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	001c      	movs	r4, r3
 8001e80:	230f      	movs	r3, #15
 8001e82:	4023      	ands	r3, r4
 8001e84:	3b08      	subs	r3, #8
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	3306      	adds	r3, #6
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	18c3      	adds	r3, r0, r3
 8001e90:	3304      	adds	r3, #4
 8001e92:	601a      	str	r2, [r3, #0]
}
 8001e94:	46c0      	nop			@ (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b003      	add	sp, #12
 8001e9a:	bd90      	pop	{r4, r7, pc}
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	045b      	lsls	r3, r3, #17
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d301      	bcc.n	8001ebc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e010      	b.n	8001ede <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <SysTick_Config+0x44>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	3a01      	subs	r2, #1
 8001ec2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	2103      	movs	r1, #3
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff ff7c 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <SysTick_Config+0x44>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <SysTick_Config+0x44>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	1c02      	adds	r2, r0, #0
 8001efc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff ff33 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b002      	add	sp, #8
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff ffaf 	bl	8001ea4 <SysTick_Config>
 8001f46:	0003      	movs	r3, r0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e077      	b.n	8002052 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a3d      	ldr	r2, [pc, #244]	@ (800205c <HAL_DMA_Init+0x10c>)
 8001f68:	4694      	mov	ip, r2
 8001f6a:	4463      	add	r3, ip
 8001f6c:	2114      	movs	r1, #20
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7fe f8c8 	bl	8000104 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2225      	movs	r2, #37	@ 0x25
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4934      	ldr	r1, [pc, #208]	@ (8002060 <HAL_DMA_Init+0x110>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f8fb 	bl	80021c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	01db      	lsls	r3, r3, #7
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d102      	bne.n	8001fe4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fec:	213f      	movs	r1, #63	@ 0x3f
 8001fee:	400a      	ands	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ffa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d011      	beq.n	8002028 <HAL_DMA_Init+0xd8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d80d      	bhi.n	8002028 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f906 	bl	8002220 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	e008      	b.n	800203a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2225      	movs	r2, #37	@ 0x25
 8002044:	2101      	movs	r1, #1
 8002046:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	@ 0x24
 800204c:	2100      	movs	r1, #0
 800204e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	bffdfff8 	.word	0xbffdfff8
 8002060:	ffff800f 	.word	0xffff800f

08002064 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800206c:	4b55      	ldr	r3, [pc, #340]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	221c      	movs	r2, #28
 8002080:	4013      	ands	r3, r2
 8002082:	2204      	movs	r2, #4
 8002084:	409a      	lsls	r2, r3
 8002086:	0013      	movs	r3, r2
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	d027      	beq.n	80020de <HAL_DMA_IRQHandler+0x7a>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2204      	movs	r2, #4
 8002092:	4013      	ands	r3, r2
 8002094:	d023      	beq.n	80020de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2220      	movs	r2, #32
 800209e:	4013      	ands	r3, r2
 80020a0:	d107      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2104      	movs	r1, #4
 80020ae:	438a      	bics	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	221c      	movs	r2, #28
 80020bc:	4013      	ands	r3, r2
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	4b40      	ldr	r3, [pc, #256]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d100      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x6e>
 80020d0:	e073      	b.n	80021ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	0010      	movs	r0, r2
 80020da:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80020dc:	e06d      	b.n	80021ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	221c      	movs	r2, #28
 80020e4:	4013      	ands	r3, r2
 80020e6:	2202      	movs	r2, #2
 80020e8:	409a      	lsls	r2, r3
 80020ea:	0013      	movs	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	d02e      	beq.n	8002150 <HAL_DMA_IRQHandler+0xec>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d02a      	beq.n	8002150 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2220      	movs	r2, #32
 8002102:	4013      	ands	r3, r2
 8002104:	d10b      	bne.n	800211e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	210a      	movs	r1, #10
 8002112:	438a      	bics	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2225      	movs	r2, #37	@ 0x25
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800211e:	4b29      	ldr	r3, [pc, #164]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	221c      	movs	r2, #28
 8002128:	4013      	ands	r3, r2
 800212a:	2202      	movs	r2, #2
 800212c:	409a      	lsls	r2, r3
 800212e:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	@ 0x24
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03a      	beq.n	80021ba <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	0010      	movs	r0, r2
 800214c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800214e:	e034      	b.n	80021ba <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	221c      	movs	r2, #28
 8002156:	4013      	ands	r3, r2
 8002158:	2208      	movs	r2, #8
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	d02b      	beq.n	80021bc <HAL_DMA_IRQHandler+0x158>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2208      	movs	r2, #8
 8002168:	4013      	ands	r3, r2
 800216a:	d027      	beq.n	80021bc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	210e      	movs	r1, #14
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	221c      	movs	r2, #28
 8002186:	4013      	ands	r3, r2
 8002188:	2201      	movs	r2, #1
 800218a:	409a      	lsls	r2, r3
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_DMA_IRQHandler+0x160>)
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2225      	movs	r2, #37	@ 0x25
 800219c:	2101      	movs	r1, #1
 800219e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	@ 0x24
 80021a4:	2100      	movs	r1, #0
 80021a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	0010      	movs	r0, r2
 80021b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	46c0      	nop			@ (mov r8, r8)
}
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40020000 	.word	0x40020000

080021c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80021d8:	4694      	mov	ip, r2
 80021da:	4463      	add	r3, ip
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	001a      	movs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	001a      	movs	r2, r3
 80021ea:	23ff      	movs	r3, #255	@ 0xff
 80021ec:	4013      	ands	r3, r2
 80021ee:	3b08      	subs	r3, #8
 80021f0:	2114      	movs	r1, #20
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7fd ff86 	bl	8000104 <__udivsi3>
 80021f8:	0003      	movs	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a07      	ldr	r2, [pc, #28]	@ (800221c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002200:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	221f      	movs	r2, #31
 8002206:	4013      	ands	r3, r2
 8002208:	2201      	movs	r2, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b004      	add	sp, #16
 8002216:	bd80      	pop	{r7, pc}
 8002218:	10008200 	.word	0x10008200
 800221c:	40020880 	.word	0x40020880

08002220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	223f      	movs	r2, #63	@ 0x3f
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002236:	4694      	mov	ip, r2
 8002238:	4463      	add	r3, ip
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	001a      	movs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3b01      	subs	r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	4013      	ands	r3, r2
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	1000823f 	.word	0x1000823f
 8002264:	40020940 	.word	0x40020940

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	e147      	b.n	8002508 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4091      	lsls	r1, r2
 8002282:	000a      	movs	r2, r1
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d100      	bne.n	8002290 <HAL_GPIO_Init+0x28>
 800228e:	e138      	b.n	8002502 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	4013      	ands	r3, r2
 8002298:	2b01      	cmp	r3, #1
 800229a:	d005      	beq.n	80022a8 <HAL_GPIO_Init+0x40>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2203      	movs	r2, #3
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	409a      	lsls	r2, r3
 80022b6:	0013      	movs	r3, r2
 80022b8:	43da      	mvns	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	0013      	movs	r3, r2
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	43da      	mvns	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	2201      	movs	r2, #1
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
 80022fc:	0013      	movs	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	4013      	ands	r3, r2
 8002312:	2b03      	cmp	r3, #3
 8002314:	d017      	beq.n	8002346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	43da      	mvns	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	4013      	ands	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	58d3      	ldr	r3, [r2, r3]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	43da      	mvns	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2107      	movs	r1, #7
 800237e:	400b      	ands	r3, r1
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	401a      	ands	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	23c0      	movs	r3, #192	@ 0xc0
 80023d4:	029b      	lsls	r3, r3, #10
 80023d6:	4013      	ands	r3, r2
 80023d8:	d100      	bne.n	80023dc <HAL_GPIO_Init+0x174>
 80023da:	e092      	b.n	8002502 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023dc:	4a50      	ldr	r2, [pc, #320]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3318      	adds	r3, #24
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	589b      	ldr	r3, [r3, r2]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2203      	movs	r2, #3
 80023ee:	4013      	ands	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	220f      	movs	r2, #15
 80023f4:	409a      	lsls	r2, r3
 80023f6:	0013      	movs	r3, r2
 80023f8:	43da      	mvns	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	23a0      	movs	r3, #160	@ 0xa0
 8002404:	05db      	lsls	r3, r3, #23
 8002406:	429a      	cmp	r2, r3
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x1ca>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a45      	ldr	r2, [pc, #276]	@ (8002524 <HAL_GPIO_Init+0x2bc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x1c6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a44      	ldr	r2, [pc, #272]	@ (8002528 <HAL_GPIO_Init+0x2c0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x1c2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a43      	ldr	r2, [pc, #268]	@ (800252c <HAL_GPIO_Init+0x2c4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x1be>
 8002422:	2303      	movs	r3, #3
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x1cc>
 8002426:	2305      	movs	r3, #5
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x1cc>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x1cc>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x1cc>
 8002432:	2300      	movs	r3, #0
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	2103      	movs	r1, #3
 8002438:	400a      	ands	r2, r1
 800243a:	00d2      	lsls	r2, r2, #3
 800243c:	4093      	lsls	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002444:	4936      	ldr	r1, [pc, #216]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3318      	adds	r3, #24
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002452:	4b33      	ldr	r3, [pc, #204]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	035b      	lsls	r3, r3, #13
 800246a:	4013      	ands	r3, r2
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800247c:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43da      	mvns	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	039b      	lsls	r3, r3, #14
 8002494:	4013      	ands	r3, r2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 80024a8:	2384      	movs	r3, #132	@ 0x84
 80024aa:	58d3      	ldr	r3, [r2, r3]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43da      	mvns	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	029b      	lsls	r3, r3, #10
 80024c0:	4013      	ands	r3, r2
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024cc:	4914      	ldr	r1, [pc, #80]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 80024ce:	2284      	movs	r2, #132	@ 0x84
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024d4:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	58d3      	ldr	r3, [r2, r3]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	4013      	ands	r3, r2
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024fa:	4909      	ldr	r1, [pc, #36]	@ (8002520 <HAL_GPIO_Init+0x2b8>)
 80024fc:	2280      	movs	r2, #128	@ 0x80
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	40da      	lsrs	r2, r3
 8002510:	1e13      	subs	r3, r2, #0
 8002512:	d000      	beq.n	8002516 <HAL_GPIO_Init+0x2ae>
 8002514:	e6b0      	b.n	8002278 <HAL_GPIO_Init+0x10>
  }
}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b006      	add	sp, #24
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021800 	.word	0x40021800
 8002524:	50000400 	.word	0x50000400
 8002528:	50000800 	.word	0x50000800
 800252c:	50000c00 	.word	0x50000c00

08002530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	000a      	movs	r2, r1
 800253a:	1cbb      	adds	r3, r7, #2
 800253c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	1cba      	adds	r2, r7, #2
 8002544:	8812      	ldrh	r2, [r2, #0]
 8002546:	4013      	ands	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800254a:	230f      	movs	r3, #15
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e003      	b.n	800255c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002554:	230f      	movs	r3, #15
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800255c:	230f      	movs	r3, #15
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002578:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	1dba      	adds	r2, r7, #6
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	4013      	ands	r3, r2
 8002582:	d008      	beq.n	8002596 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002584:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002586:	1dba      	adds	r2, r7, #6
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800258c:	1dbb      	adds	r3, r7, #6
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f815 	bl	80025c0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	1dba      	adds	r2, r7, #6
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	4013      	ands	r3, r2
 80025a0:	d008      	beq.n	80025b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025a4:	1dba      	adds	r2, r7, #6
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80025aa:	1dbb      	adds	r3, r7, #6
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f7fe fe62 	bl	8001278 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021800 	.word	0x40021800

080025c0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	0002      	movs	r2, r0
 80025c8:	1dbb      	adds	r3, r7, #6
 80025ca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e08f      	b.n	8002706 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2241      	movs	r2, #65	@ 0x41
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2240      	movs	r2, #64	@ 0x40
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff f931 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	@ 0x41
 8002606:	2124      	movs	r1, #36	@ 0x24
 8002608:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	438a      	bics	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	493b      	ldr	r1, [pc, #236]	@ (8002710 <HAL_I2C_Init+0x13c>)
 8002624:	400a      	ands	r2, r1
 8002626:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4938      	ldr	r1, [pc, #224]	@ (8002714 <HAL_I2C_Init+0x140>)
 8002634:	400a      	ands	r2, r1
 8002636:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	0209      	lsls	r1, r1, #8
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	e007      	b.n	8002662 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2184      	movs	r1, #132	@ 0x84
 800265c:	0209      	lsls	r1, r1, #8
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d109      	bne.n	800267e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2180      	movs	r1, #128	@ 0x80
 8002676:	0109      	lsls	r1, r1, #4
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	e007      	b.n	800268e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4923      	ldr	r1, [pc, #140]	@ (8002718 <HAL_I2C_Init+0x144>)
 800268a:	400a      	ands	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4920      	ldr	r1, [pc, #128]	@ (800271c <HAL_I2C_Init+0x148>)
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	491a      	ldr	r1, [pc, #104]	@ (8002714 <HAL_I2C_Init+0x140>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69d9      	ldr	r1, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2241      	movs	r2, #65	@ 0x41
 80026f2:	2120      	movs	r1, #32
 80026f4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2242      	movs	r2, #66	@ 0x42
 8002700:	2100      	movs	r1, #0
 8002702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	f0ffffff 	.word	0xf0ffffff
 8002714:	ffff7fff 	.word	0xffff7fff
 8002718:	fffff7ff 	.word	0xfffff7ff
 800271c:	02008000 	.word	0x02008000

08002720 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b089      	sub	sp, #36	@ 0x24
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	0008      	movs	r0, r1
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	0019      	movs	r1, r3
 800272e:	230a      	movs	r3, #10
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	1c02      	adds	r2, r0, #0
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	2308      	movs	r3, #8
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	1c0a      	adds	r2, r1, #0
 800273c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2241      	movs	r2, #65	@ 0x41
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d000      	beq.n	800274c <HAL_I2C_Master_Transmit+0x2c>
 800274a:	e10a      	b.n	8002962 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	@ 0x40
 8002750:	5c9b      	ldrb	r3, [r3, r2]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2C_Master_Transmit+0x3a>
 8002756:	2302      	movs	r3, #2
 8002758:	e104      	b.n	8002964 <HAL_I2C_Master_Transmit+0x244>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2240      	movs	r2, #64	@ 0x40
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002762:	f7ff fae9 	bl	8001d38 <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	0219      	lsls	r1, r3, #8
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2319      	movs	r3, #25
 8002776:	2201      	movs	r2, #1
 8002778:	f000 fa78 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0ef      	b.n	8002964 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2241      	movs	r2, #65	@ 0x41
 8002788:	2121      	movs	r1, #33	@ 0x21
 800278a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2242      	movs	r2, #66	@ 0x42
 8002790:	2110      	movs	r1, #16
 8002792:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2208      	movs	r2, #8
 80027a4:	18ba      	adds	r2, r7, r2
 80027a6:	8812      	ldrh	r2, [r2, #0]
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2bff      	cmp	r3, #255	@ 0xff
 80027b8:	d906      	bls.n	80027c8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	22ff      	movs	r2, #255	@ 0xff
 80027be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	045b      	lsls	r3, r3, #17
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e007      	b.n	80027d8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	049b      	lsls	r3, r3, #18
 80027d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d027      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697c      	ldr	r4, [r7, #20]
 800281c:	230a      	movs	r3, #10
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	8819      	ldrh	r1, [r3, #0]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	4b51      	ldr	r3, [pc, #324]	@ (800296c <HAL_I2C_Master_Transmit+0x24c>)
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	0023      	movs	r3, r4
 800282a:	f000 fbf9 	bl	8003020 <I2C_TransferConfig>
 800282e:	e06f      	b.n	8002910 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	b2da      	uxtb	r2, r3
 8002836:	697c      	ldr	r4, [r7, #20]
 8002838:	230a      	movs	r3, #10
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	8819      	ldrh	r1, [r3, #0]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <HAL_I2C_Master_Transmit+0x24c>)
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	0023      	movs	r3, r4
 8002846:	f000 fbeb 	bl	8003020 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800284a:	e061      	b.n	8002910 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fa62 	bl	8002d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e081      	b.n	8002964 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03a      	beq.n	8002910 <HAL_I2C_Master_Transmit+0x1f0>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d136      	bne.n	8002910 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	0013      	movs	r3, r2
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	f000 f9dc 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e053      	b.n	8002964 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2bff      	cmp	r3, #255	@ 0xff
 80028c4:	d911      	bls.n	80028ea <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	@ 0xff
 80028ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	045c      	lsls	r4, r3, #17
 80028d6:	230a      	movs	r3, #10
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	8819      	ldrh	r1, [r3, #0]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	0023      	movs	r3, r4
 80028e4:	f000 fb9c 	bl	8003020 <I2C_TransferConfig>
 80028e8:	e012      	b.n	8002910 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	049c      	lsls	r4, r3, #18
 80028fe:	230a      	movs	r3, #10
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	8819      	ldrh	r1, [r3, #0]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	0023      	movs	r3, r4
 800290c:	f000 fb88 	bl	8003020 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d198      	bne.n	800284c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 fa41 	bl	8002da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e01a      	b.n	8002964 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2220      	movs	r2, #32
 8002934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	490b      	ldr	r1, [pc, #44]	@ (8002970 <HAL_I2C_Master_Transmit+0x250>)
 8002942:	400a      	ands	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2241      	movs	r2, #65	@ 0x41
 800294a:	2120      	movs	r1, #32
 800294c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2242      	movs	r2, #66	@ 0x42
 8002952:	2100      	movs	r1, #0
 8002954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2240      	movs	r2, #64	@ 0x40
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002962:	2302      	movs	r3, #2
  }
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b007      	add	sp, #28
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	80002000 	.word	0x80002000
 8002970:	fe00e800 	.word	0xfe00e800

08002974 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002974:	b5b0      	push	{r4, r5, r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2241      	movs	r2, #65	@ 0x41
 8002988:	5c9b      	ldrb	r3, [r3, r2]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	d000      	beq.n	8002992 <HAL_I2C_Slave_Transmit+0x1e>
 8002990:	e143      	b.n	8002c1a <HAL_I2C_Slave_Transmit+0x2a6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_I2C_Slave_Transmit+0x2c>
 8002998:	1dbb      	adds	r3, r7, #6
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e137      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	5c9b      	ldrb	r3, [r3, r2]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_Slave_Transmit+0x46>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e130      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2240      	movs	r2, #64	@ 0x40
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029c2:	f7ff f9b9 	bl	8001d38 <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2241      	movs	r2, #65	@ 0x41
 80029ce:	2121      	movs	r1, #33	@ 0x21
 80029d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2242      	movs	r2, #66	@ 0x42
 80029d6:	2120      	movs	r1, #32
 80029d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1dba      	adds	r2, r7, #6
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4989      	ldr	r1, [pc, #548]	@ (8002c24 <HAL_I2C_Slave_Transmit+0x2b0>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2108      	movs	r1, #8
 8002a12:	f000 f92b 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2180      	movs	r1, #128	@ 0x80
 8002a26:	0209      	lsls	r1, r1, #8
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0f5      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
    }

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	029b      	lsls	r3, r3, #10
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d111      	bne.n	8002a60 <HAL_I2C_Slave_Transmit+0xec>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2208      	movs	r2, #8
 8002a66:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d119      	bne.n	8002aa4 <HAL_I2C_Slave_Transmit+0x130>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	0013      	movs	r3, r2
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2108      	movs	r1, #8
 8002a7e:	f000 f8f5 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_I2C_Slave_Transmit+0x128>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2180      	movs	r1, #128	@ 0x80
 8002a92:	0209      	lsls	r1, r1, #8
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0bf      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	0259      	lsls	r1, r3, #9
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f000 f8da 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d02f      	beq.n	8002b1c <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	0209      	lsls	r1, r1, #8
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0a4      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f91f 	bl	8002d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_I2C_Slave_Transmit+0x184>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	0209      	lsls	r1, r1, #8
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e091      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1d5      	bne.n	8002ad2 <HAL_I2C_Slave_Transmit+0x15e>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 8002b26:	2513      	movs	r5, #19
 8002b28:	197c      	adds	r4, r7, r5
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	0013      	movs	r3, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	2110      	movs	r1, #16
 8002b38:	f000 f898 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	7023      	strb	r3, [r4, #0]

    if (error != HAL_OK)
 8002b40:	197b      	adds	r3, r7, r5
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_I2C_Slave_Transmit+0x20c>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 8002b48:	2110      	movs	r1, #16
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8002b50:	801a      	strh	r2, [r3, #0]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d107      	bne.n	8002b6a <HAL_I2C_Slave_Transmit+0x1f6>
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <HAL_I2C_Slave_Transmit+0x1f6>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b68:	e029      	b.n	8002bbe <HAL_I2C_Slave_Transmit+0x24a>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2180      	movs	r1, #128	@ 0x80
 8002b76:	0209      	lsls	r1, r1, #8
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e04d      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 f850 	bl	8002c28 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	6839      	ldr	r1, [r7, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 f906 	bl	8002da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_I2C_Slave_Transmit+0x242>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	0209      	lsls	r1, r1, #8
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e032      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	0219      	lsls	r1, r3, #8
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	0013      	movs	r3, r2
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f000 f84d 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Slave_Transmit+0x278>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	0209      	lsls	r1, r1, #8
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e017      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2180      	movs	r1, #128	@ 0x80
 8002bf8:	0209      	lsls	r1, r1, #8
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2241      	movs	r2, #65	@ 0x41
 8002c02:	2120      	movs	r1, #32
 8002c04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2242      	movs	r2, #66	@ 0x42
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2240      	movs	r2, #64	@ 0x40
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_I2C_Slave_Transmit+0x2a8>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b006      	add	sp, #24
 8002c22:	bdb0      	pop	{r4, r5, r7, pc}
 8002c24:	ffff7fff 	.word	0xffff7fff

08002c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d007      	beq.n	8002c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
  }
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e03a      	b.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	6839      	ldr	r1, [r7, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 f8d3 	bl	8002e30 <I2C_IsErrorOccurred>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e040      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	d02d      	beq.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7ff f84e 	bl	8001d38 <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d302      	bcc.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x42>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d122      	bne.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	425a      	negs	r2, r3
 8002cbe:	4153      	adcs	r3, r2
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	1dfb      	adds	r3, r7, #7
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d113      	bne.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2241      	movs	r2, #65	@ 0x41
 8002cdc:	2120      	movs	r1, #32
 8002cde:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2242      	movs	r2, #66	@ 0x42
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2240      	movs	r2, #64	@ 0x40
 8002cec:	2100      	movs	r1, #0
 8002cee:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e00f      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	425a      	negs	r2, r3
 8002d04:	4153      	adcs	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	001a      	movs	r2, r3
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d0b5      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d28:	e032      	b.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f87d 	bl	8002e30 <I2C_IsErrorOccurred>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e030      	b.n	8002da0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	d025      	beq.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d44:	f7fe fff8 	bl	8001d38 <HAL_GetTick>
 8002d48:	0002      	movs	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d302      	bcc.n	8002d5a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11a      	bne.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d013      	beq.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2241      	movs	r2, #65	@ 0x41
 8002d78:	2120      	movs	r1, #32
 8002d7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2242      	movs	r2, #66	@ 0x42
 8002d80:	2100      	movs	r1, #0
 8002d82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2240      	movs	r2, #64	@ 0x40
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e007      	b.n	8002da0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d1c5      	bne.n	8002d2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db4:	e02f      	b.n	8002e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f837 	bl	8002e30 <I2C_IsErrorOccurred>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e02d      	b.n	8002e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fe ffb5 	bl	8001d38 <HAL_GetTick>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d11a      	bne.n	8002e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2220      	movs	r2, #32
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d013      	beq.n	8002e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	2220      	movs	r2, #32
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2241      	movs	r2, #65	@ 0x41
 8002dfe:	2120      	movs	r1, #32
 8002e00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2242      	movs	r2, #66	@ 0x42
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e007      	b.n	8002e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d1c8      	bne.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2327      	movs	r3, #39	@ 0x27
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2210      	movs	r2, #16
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <I2C_IsErrorOccurred+0x2e>
 8002e5c:	e079      	b.n	8002f52 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2210      	movs	r2, #16
 8002e64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e66:	e057      	b.n	8002f18 <I2C_IsErrorOccurred+0xe8>
 8002e68:	2227      	movs	r2, #39	@ 0x27
 8002e6a:	18bb      	adds	r3, r7, r2
 8002e6c:	18ba      	adds	r2, r7, r2
 8002e6e:	7812      	ldrb	r2, [r2, #0]
 8002e70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	d04f      	beq.n	8002f18 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e78:	f7fe ff5e 	bl	8001d38 <HAL_GetTick>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d302      	bcc.n	8002e8e <I2C_IsErrorOccurred+0x5e>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d144      	bne.n	8002f18 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	01db      	lsls	r3, r3, #7
 8002e98:	4013      	ands	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e9c:	2013      	movs	r0, #19
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	2142      	movs	r1, #66	@ 0x42
 8002ea4:	5c52      	ldrb	r2, [r2, r1]
 8002ea6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d126      	bne.n	8002f0a <I2C_IsErrorOccurred+0xda>
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	01db      	lsls	r3, r3, #7
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d021      	beq.n	8002f0a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d01d      	beq.n	8002f0a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	01c9      	lsls	r1, r1, #7
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ee0:	f7fe ff2a 	bl	8001d38 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee8:	e00f      	b.n	8002f0a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eea:	f7fe ff25 	bl	8001d38 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b19      	cmp	r3, #25
 8002ef6:	d908      	bls.n	8002f0a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2220      	movs	r2, #32
 8002efc:	4313      	orrs	r3, r2
 8002efe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f00:	2327      	movs	r3, #39	@ 0x27
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]

              break;
 8002f08:	e006      	b.n	8002f18 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2220      	movs	r2, #32
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d1e8      	bne.n	8002eea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d004      	beq.n	8002f30 <I2C_IsErrorOccurred+0x100>
 8002f26:	2327      	movs	r3, #39	@ 0x27
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d09b      	beq.n	8002e68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f30:	2327      	movs	r3, #39	@ 0x27
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	2204      	movs	r2, #4
 8002f46:	4313      	orrs	r3, r2
 8002f48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f4a:	2327      	movs	r3, #39	@ 0x27
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	2380      	movs	r3, #128	@ 0x80
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4013      	ands	r3, r2
 8002f62:	d00c      	beq.n	8002f7e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	0052      	lsls	r2, r2, #1
 8002f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f76:	2327      	movs	r3, #39	@ 0x27
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4013      	ands	r3, r2
 8002f86:	d00c      	beq.n	8002fa2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	00d2      	lsls	r2, r2, #3
 8002f98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f9a:	2327      	movs	r3, #39	@ 0x27
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d00c      	beq.n	8002fc6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2280      	movs	r2, #128	@ 0x80
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fbe:	2327      	movs	r3, #39	@ 0x27
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002fc6:	2327      	movs	r3, #39	@ 0x27
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01d      	beq.n	800300c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7ff fe28 	bl	8002c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	490e      	ldr	r1, [pc, #56]	@ (800301c <I2C_IsErrorOccurred+0x1ec>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2241      	movs	r2, #65	@ 0x41
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2242      	movs	r2, #66	@ 0x42
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2240      	movs	r2, #64	@ 0x40
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800300c:	2327      	movs	r3, #39	@ 0x27
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b00a      	add	sp, #40	@ 0x28
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	fe00e800 	.word	0xfe00e800

08003020 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	0008      	movs	r0, r1
 800302a:	0011      	movs	r1, r2
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	240a      	movs	r4, #10
 8003030:	193b      	adds	r3, r7, r4
 8003032:	1c02      	adds	r2, r0, #0
 8003034:	801a      	strh	r2, [r3, #0]
 8003036:	2009      	movs	r0, #9
 8003038:	183b      	adds	r3, r7, r0
 800303a:	1c0a      	adds	r2, r1, #0
 800303c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800303e:	193b      	adds	r3, r7, r4
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	059b      	lsls	r3, r3, #22
 8003044:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003046:	183b      	adds	r3, r7, r0
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	0419      	lsls	r1, r3, #16
 800304c:	23ff      	movs	r3, #255	@ 0xff
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003052:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	4313      	orrs	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800306a:	0d51      	lsrs	r1, r2, #21
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	00d2      	lsls	r2, r2, #3
 8003070:	400a      	ands	r2, r1
 8003072:	4907      	ldr	r1, [pc, #28]	@ (8003090 <I2C_TransferConfig+0x70>)
 8003074:	430a      	orrs	r2, r1
 8003076:	43d2      	mvns	r2, r2
 8003078:	401a      	ands	r2, r3
 800307a:	0011      	movs	r1, r2
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b007      	add	sp, #28
 800308c:	bd90      	pop	{r4, r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	03ff63ff 	.word	0x03ff63ff

08003094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2241      	movs	r2, #65	@ 0x41
 80030a2:	5c9b      	ldrb	r3, [r3, r2]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d138      	bne.n	800311c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2240      	movs	r2, #64	@ 0x40
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e032      	b.n	800311e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2240      	movs	r2, #64	@ 0x40
 80030bc:	2101      	movs	r1, #1
 80030be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2241      	movs	r2, #65	@ 0x41
 80030c4:	2124      	movs	r1, #36	@ 0x24
 80030c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2101      	movs	r1, #1
 80030d4:	438a      	bics	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4911      	ldr	r1, [pc, #68]	@ (8003128 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2241      	movs	r2, #65	@ 0x41
 800310c:	2120      	movs	r1, #32
 800310e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	ffffefff 	.word	0xffffefff

0800312c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2241      	movs	r2, #65	@ 0x41
 800313a:	5c9b      	ldrb	r3, [r3, r2]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	d139      	bne.n	80031b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2240      	movs	r2, #64	@ 0x40
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800314c:	2302      	movs	r3, #2
 800314e:	e033      	b.n	80031b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2240      	movs	r2, #64	@ 0x40
 8003154:	2101      	movs	r1, #1
 8003156:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2241      	movs	r2, #65	@ 0x41
 800315c:	2124      	movs	r1, #36	@ 0x24
 800315e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2101      	movs	r1, #1
 800316c:	438a      	bics	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a11      	ldr	r2, [pc, #68]	@ (80031c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	430a      	orrs	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2241      	movs	r2, #65	@ 0x41
 80031a6:	2120      	movs	r1, #32
 80031a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2240      	movs	r2, #64	@ 0x40
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	fffff0ff 	.word	0xfffff0ff

080031c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	4b17      	ldr	r3, [pc, #92]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d11f      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80031e8:	4b14      	ldr	r3, [pc, #80]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	0013      	movs	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	189b      	adds	r3, r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4912      	ldr	r1, [pc, #72]	@ (8003240 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7fc ff84 	bl	8000104 <__udivsi3>
 80031fc:	0003      	movs	r3, r0
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003202:	e008      	b.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3b01      	subs	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e001      	b.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e009      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003216:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	401a      	ands	r2, r3
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	429a      	cmp	r2, r3
 8003226:	d0ed      	beq.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b004      	add	sp, #16
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	40007000 	.word	0x40007000
 8003238:	fffff9ff 	.word	0xfffff9ff
 800323c:	2000000c 	.word	0x2000000c
 8003240:	000f4240 	.word	0x000f4240

08003244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e2fe      	b.n	8003854 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d100      	bne.n	8003262 <HAL_RCC_OscConfig+0x1e>
 8003260:	e07c      	b.n	800335c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	4bc3      	ldr	r3, [pc, #780]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2238      	movs	r2, #56	@ 0x38
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	4bc0      	ldr	r3, [pc, #768]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2203      	movs	r2, #3
 8003272:	4013      	ands	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b10      	cmp	r3, #16
 800327a:	d102      	bne.n	8003282 <HAL_RCC_OscConfig+0x3e>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d002      	beq.n	8003288 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d10b      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	4bb9      	ldr	r3, [pc, #740]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	029b      	lsls	r3, r3, #10
 8003290:	4013      	ands	r3, r2
 8003292:	d062      	beq.n	800335a <HAL_RCC_OscConfig+0x116>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d15e      	bne.n	800335a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e2d9      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	2380      	movs	r3, #128	@ 0x80
 80032a6:	025b      	lsls	r3, r3, #9
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x78>
 80032ac:	4bb0      	ldr	r3, [pc, #704]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4baf      	ldr	r3, [pc, #700]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032b2:	2180      	movs	r1, #128	@ 0x80
 80032b4:	0249      	lsls	r1, r1, #9
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e020      	b.n	80032fe <HAL_RCC_OscConfig+0xba>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	23a0      	movs	r3, #160	@ 0xa0
 80032c2:	02db      	lsls	r3, r3, #11
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d10e      	bne.n	80032e6 <HAL_RCC_OscConfig+0xa2>
 80032c8:	4ba9      	ldr	r3, [pc, #676]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4ba8      	ldr	r3, [pc, #672]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032ce:	2180      	movs	r1, #128	@ 0x80
 80032d0:	02c9      	lsls	r1, r1, #11
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4ba5      	ldr	r3, [pc, #660]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	2180      	movs	r1, #128	@ 0x80
 80032de:	0249      	lsls	r1, r1, #9
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e00b      	b.n	80032fe <HAL_RCC_OscConfig+0xba>
 80032e6:	4ba2      	ldr	r3, [pc, #648]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4ba1      	ldr	r3, [pc, #644]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032ec:	49a1      	ldr	r1, [pc, #644]	@ (8003574 <HAL_RCC_OscConfig+0x330>)
 80032ee:	400a      	ands	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	4b9f      	ldr	r3, [pc, #636]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80032f8:	499f      	ldr	r1, [pc, #636]	@ (8003578 <HAL_RCC_OscConfig+0x334>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d014      	beq.n	8003330 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003306:	f7fe fd17 	bl	8001d38 <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe fd12 	bl	8001d38 <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e298      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003322:	4b93      	ldr	r3, [pc, #588]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	@ 0x80
 8003328:	029b      	lsls	r3, r3, #10
 800332a:	4013      	ands	r3, r2
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0xcc>
 800332e:	e015      	b.n	800335c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fd02 	bl	8001d38 <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333a:	f7fe fcfd 	bl	8001d38 <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b64      	cmp	r3, #100	@ 0x64
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e283      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334c:	4b88      	ldr	r3, [pc, #544]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	4013      	ands	r3, r2
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0xf6>
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2202      	movs	r2, #2
 8003362:	4013      	ands	r3, r2
 8003364:	d100      	bne.n	8003368 <HAL_RCC_OscConfig+0x124>
 8003366:	e099      	b.n	800349c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003368:	4b81      	ldr	r3, [pc, #516]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2238      	movs	r2, #56	@ 0x38
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003372:	4b7f      	ldr	r3, [pc, #508]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2203      	movs	r2, #3
 8003378:	4013      	ands	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b10      	cmp	r3, #16
 8003380:	d102      	bne.n	8003388 <HAL_RCC_OscConfig+0x144>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d002      	beq.n	800338e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d135      	bne.n	80033fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338e:	4b78      	ldr	r3, [pc, #480]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4013      	ands	r3, r2
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x162>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e256      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b72      	ldr	r3, [pc, #456]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a74      	ldr	r2, [pc, #464]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	021a      	lsls	r2, r3, #8
 80033b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003580 <HAL_RCC_OscConfig+0x33c>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	4b67      	ldr	r3, [pc, #412]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80033d6:	4b66      	ldr	r3, [pc, #408]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	0adb      	lsrs	r3, r3, #11
 80033dc:	2207      	movs	r2, #7
 80033de:	4013      	ands	r3, r2
 80033e0:	4a68      	ldr	r2, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x340>)
 80033e2:	40da      	lsrs	r2, r3
 80033e4:	4b68      	ldr	r3, [pc, #416]	@ (8003588 <HAL_RCC_OscConfig+0x344>)
 80033e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e8:	4b68      	ldr	r3, [pc, #416]	@ (800358c <HAL_RCC_OscConfig+0x348>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fe fc47 	bl	8001c80 <HAL_InitTick>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d051      	beq.n	800349a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e22c      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d030      	beq.n	8003464 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003402:	4b5b      	ldr	r3, [pc, #364]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a5e      	ldr	r2, [pc, #376]	@ (8003580 <HAL_RCC_OscConfig+0x33c>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	4b57      	ldr	r3, [pc, #348]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003416:	4b56      	ldr	r3, [pc, #344]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b55      	ldr	r3, [pc, #340]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	0049      	lsls	r1, r1, #1
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe fc88 	bl	8001d38 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342e:	f7fe fc83 	bl	8001d38 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e209      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003440:	4b4b      	ldr	r3, [pc, #300]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4013      	ands	r3, r2
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	4b48      	ldr	r3, [pc, #288]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a4a      	ldr	r2, [pc, #296]	@ (800357c <HAL_RCC_OscConfig+0x338>)
 8003452:	4013      	ands	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	021a      	lsls	r2, r3, #8
 800345c:	4b44      	ldr	r3, [pc, #272]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e01b      	b.n	800349c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003464:	4b42      	ldr	r3, [pc, #264]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800346a:	4949      	ldr	r1, [pc, #292]	@ (8003590 <HAL_RCC_OscConfig+0x34c>)
 800346c:	400a      	ands	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fc62 	bl	8001d38 <HAL_GetTick>
 8003474:	0003      	movs	r3, r0
 8003476:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe fc5d 	bl	8001d38 <HAL_GetTick>
 800347e:	0002      	movs	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1e3      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348c:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	@ 0x80
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4013      	ands	r3, r2
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x236>
 8003498:	e000      	b.n	800349c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	4013      	ands	r3, r2
 80034a4:	d047      	beq.n	8003536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034a6:	4b32      	ldr	r3, [pc, #200]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2238      	movs	r2, #56	@ 0x38
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b18      	cmp	r3, #24
 80034b0:	d10a      	bne.n	80034c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80034b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	2202      	movs	r2, #2
 80034b8:	4013      	ands	r3, r2
 80034ba:	d03c      	beq.n	8003536 <HAL_RCC_OscConfig+0x2f2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d138      	bne.n	8003536 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e1c5      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d019      	beq.n	8003504 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80034d0:	4b27      	ldr	r3, [pc, #156]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80034d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034d4:	4b26      	ldr	r3, [pc, #152]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fc2c 	bl	8001d38 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fc27 	bl	8001d38 <HAL_GetTick>
 80034ea:	0002      	movs	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1ad      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	2202      	movs	r2, #2
 80034fe:	4013      	ands	r3, r2
 8003500:	d0f1      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2a2>
 8003502:	e018      	b.n	8003536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003506:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800350a:	2101      	movs	r1, #1
 800350c:	438a      	bics	r2, r1
 800350e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fc12 	bl	8001d38 <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351a:	f7fe fc0d 	bl	8001d38 <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e193      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800352c:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800352e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003530:	2202      	movs	r2, #2
 8003532:	4013      	ands	r3, r2
 8003534:	d1f1      	bne.n	800351a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	4013      	ands	r3, r2
 800353e:	d100      	bne.n	8003542 <HAL_RCC_OscConfig+0x2fe>
 8003540:	e0c6      	b.n	80036d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	231f      	movs	r3, #31
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800354a:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2238      	movs	r2, #56	@ 0x38
 8003550:	4013      	ands	r3, r2
 8003552:	2b20      	cmp	r3, #32
 8003554:	d11e      	bne.n	8003594 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_OscConfig+0x32c>)
 8003558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	d100      	bne.n	8003562 <HAL_RCC_OscConfig+0x31e>
 8003560:	e0b6      	b.n	80036d0 <HAL_RCC_OscConfig+0x48c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d000      	beq.n	800356c <HAL_RCC_OscConfig+0x328>
 800356a:	e0b1      	b.n	80036d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e171      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
 8003570:	40021000 	.word	0x40021000
 8003574:	fffeffff 	.word	0xfffeffff
 8003578:	fffbffff 	.word	0xfffbffff
 800357c:	ffff80ff 	.word	0xffff80ff
 8003580:	ffffc7ff 	.word	0xffffc7ff
 8003584:	00f42400 	.word	0x00f42400
 8003588:	2000000c 	.word	0x2000000c
 800358c:	20000010 	.word	0x20000010
 8003590:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003594:	4bb1      	ldr	r3, [pc, #708]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003598:	2380      	movs	r3, #128	@ 0x80
 800359a:	055b      	lsls	r3, r3, #21
 800359c:	4013      	ands	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x360>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x362>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d011      	beq.n	80035ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	4bac      	ldr	r3, [pc, #688]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80035ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ae:	4bab      	ldr	r3, [pc, #684]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80035b0:	2180      	movs	r1, #128	@ 0x80
 80035b2:	0549      	lsls	r1, r1, #21
 80035b4:	430a      	orrs	r2, r1
 80035b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035b8:	4ba8      	ldr	r3, [pc, #672]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	2380      	movs	r3, #128	@ 0x80
 80035be:	055b      	lsls	r3, r3, #21
 80035c0:	4013      	ands	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80035c6:	231f      	movs	r3, #31
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	4ba4      	ldr	r3, [pc, #656]	@ (8003860 <HAL_RCC_OscConfig+0x61c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	2380      	movs	r3, #128	@ 0x80
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035da:	4ba1      	ldr	r3, [pc, #644]	@ (8003860 <HAL_RCC_OscConfig+0x61c>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4ba0      	ldr	r3, [pc, #640]	@ (8003860 <HAL_RCC_OscConfig+0x61c>)
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	0049      	lsls	r1, r1, #1
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fba6 	bl	8001d38 <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fe fba1 	bl	8001d38 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e127      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003604:	4b96      	ldr	r3, [pc, #600]	@ (8003860 <HAL_RCC_OscConfig+0x61c>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	@ 0x80
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4013      	ands	r3, r2
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x3e2>
 8003618:	4b90      	ldr	r3, [pc, #576]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800361a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800361c:	4b8f      	ldr	r3, [pc, #572]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800361e:	2101      	movs	r1, #1
 8003620:	430a      	orrs	r2, r1
 8003622:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003624:	e01c      	b.n	8003660 <HAL_RCC_OscConfig+0x41c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x404>
 800362e:	4b8b      	ldr	r3, [pc, #556]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003632:	4b8a      	ldr	r3, [pc, #552]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003634:	2104      	movs	r1, #4
 8003636:	430a      	orrs	r2, r1
 8003638:	65da      	str	r2, [r3, #92]	@ 0x5c
 800363a:	4b88      	ldr	r3, [pc, #544]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800363c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800363e:	4b87      	ldr	r3, [pc, #540]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003640:	2101      	movs	r1, #1
 8003642:	430a      	orrs	r2, r1
 8003644:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0x41c>
 8003648:	4b84      	ldr	r3, [pc, #528]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800364a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800364c:	4b83      	ldr	r3, [pc, #524]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800364e:	2101      	movs	r1, #1
 8003650:	438a      	bics	r2, r1
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003654:	4b81      	ldr	r3, [pc, #516]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003656:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003658:	4b80      	ldr	r3, [pc, #512]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800365a:	2104      	movs	r1, #4
 800365c:	438a      	bics	r2, r1
 800365e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d014      	beq.n	8003692 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fb66 	bl	8001d38 <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003670:	e009      	b.n	8003686 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fb61 	bl	8001d38 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	4a79      	ldr	r2, [pc, #484]	@ (8003864 <HAL_RCC_OscConfig+0x620>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0e6      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003686:	4b75      	ldr	r3, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2202      	movs	r2, #2
 800368c:	4013      	ands	r3, r2
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x42e>
 8003690:	e013      	b.n	80036ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe fb51 	bl	8001d38 <HAL_GetTick>
 8003696:	0003      	movs	r3, r0
 8003698:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800369a:	e009      	b.n	80036b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fe fb4c 	bl	8001d38 <HAL_GetTick>
 80036a0:	0002      	movs	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003864 <HAL_RCC_OscConfig+0x620>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0d1      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b0:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036ba:	231f      	movs	r3, #31
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b65      	ldr	r3, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80036c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036c8:	4b64      	ldr	r3, [pc, #400]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80036ca:	4967      	ldr	r1, [pc, #412]	@ (8003868 <HAL_RCC_OscConfig+0x624>)
 80036cc:	400a      	ands	r2, r1
 80036ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d100      	bne.n	80036da <HAL_RCC_OscConfig+0x496>
 80036d8:	e0bb      	b.n	8003852 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036da:	4b60      	ldr	r3, [pc, #384]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2238      	movs	r2, #56	@ 0x38
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d100      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4a4>
 80036e6:	e07b      	b.n	80037e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d156      	bne.n	800379e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f0:	4b5a      	ldr	r3, [pc, #360]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b59      	ldr	r3, [pc, #356]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80036f6:	495d      	ldr	r1, [pc, #372]	@ (800386c <HAL_RCC_OscConfig+0x628>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fb1c 	bl	8001d38 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fb17 	bl	8001d38 <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e09d      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	4b50      	ldr	r3, [pc, #320]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	@ 0x80
 800371e:	049b      	lsls	r3, r3, #18
 8003720:	4013      	ands	r3, r2
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003724:	4b4d      	ldr	r3, [pc, #308]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a51      	ldr	r2, [pc, #324]	@ (8003870 <HAL_RCC_OscConfig+0x62c>)
 800372a:	4013      	ands	r3, r2
 800372c:	0019      	movs	r1, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	431a      	orrs	r2, r3
 8003752:	4b42      	ldr	r3, [pc, #264]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003754:	430a      	orrs	r2, r1
 8003756:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b40      	ldr	r3, [pc, #256]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800375e:	2180      	movs	r1, #128	@ 0x80
 8003760:	0449      	lsls	r1, r1, #17
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003766:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	4b3c      	ldr	r3, [pc, #240]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0549      	lsls	r1, r1, #21
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe fae0 	bl	8001d38 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fadb 	bl	8001d38 <HAL_GetTick>
 8003782:	0002      	movs	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e061      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003790:	4b32      	ldr	r3, [pc, #200]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	049b      	lsls	r3, r3, #18
 8003798:	4013      	ands	r3, r2
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x53a>
 800379c:	e059      	b.n	8003852 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b2f      	ldr	r3, [pc, #188]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b2e      	ldr	r3, [pc, #184]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80037a4:	4931      	ldr	r1, [pc, #196]	@ (800386c <HAL_RCC_OscConfig+0x628>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe fac5 	bl	8001d38 <HAL_GetTick>
 80037ae:	0003      	movs	r3, r0
 80037b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fac0 	bl	8001d38 <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e046      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c6:	4b25      	ldr	r3, [pc, #148]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	049b      	lsls	r3, r3, #18
 80037ce:	4013      	ands	r3, r2
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80037d2:	4b22      	ldr	r3, [pc, #136]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	4b21      	ldr	r3, [pc, #132]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80037d8:	4926      	ldr	r1, [pc, #152]	@ (8003874 <HAL_RCC_OscConfig+0x630>)
 80037da:	400a      	ands	r2, r1
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	e038      	b.n	8003852 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e033      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x618>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2203      	movs	r2, #3
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d126      	bne.n	800384e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2270      	movs	r2, #112	@ 0x70
 8003804:	401a      	ands	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11f      	bne.n	800384e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	23fe      	movs	r3, #254	@ 0xfe
 8003812:	01db      	lsls	r3, r3, #7
 8003814:	401a      	ands	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d116      	bne.n	800384e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	23f8      	movs	r3, #248	@ 0xf8
 8003824:	039b      	lsls	r3, r3, #14
 8003826:	401a      	ands	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d10e      	bne.n	800384e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	23e0      	movs	r3, #224	@ 0xe0
 8003834:	051b      	lsls	r3, r3, #20
 8003836:	401a      	ands	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0f5b      	lsrs	r3, r3, #29
 8003844:	075a      	lsls	r2, r3, #29
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b008      	add	sp, #32
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	00001388 	.word	0x00001388
 8003868:	efffffff 	.word	0xefffffff
 800386c:	feffffff 	.word	0xfeffffff
 8003870:	11c1808c 	.word	0x11c1808c
 8003874:	eefefffc 	.word	0xeefefffc

08003878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0e9      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2207      	movs	r2, #7
 8003892:	4013      	ands	r3, r2
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d91e      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b73      	ldr	r3, [pc, #460]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2207      	movs	r2, #7
 80038a0:	4393      	bics	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	4b70      	ldr	r3, [pc, #448]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038ac:	f7fe fa44 	bl	8001d38 <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038b4:	e009      	b.n	80038ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b6:	f7fe fa3f 	bl	8001d38 <HAL_GetTick>
 80038ba:	0002      	movs	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a6c <HAL_RCC_ClockConfig+0x1f4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0ca      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038ca:	4b67      	ldr	r3, [pc, #412]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2207      	movs	r2, #7
 80038d0:	4013      	ands	r3, r2
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1ee      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2202      	movs	r2, #2
 80038de:	4013      	ands	r3, r2
 80038e0:	d015      	beq.n	800390e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2204      	movs	r2, #4
 80038e8:	4013      	ands	r3, r2
 80038ea:	d006      	beq.n	80038fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038ec:	4b60      	ldr	r3, [pc, #384]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 80038f2:	21e0      	movs	r1, #224	@ 0xe0
 80038f4:	01c9      	lsls	r1, r1, #7
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003a74 <HAL_RCC_ClockConfig+0x1fc>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 800390a:	430a      	orrs	r2, r1
 800390c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	4013      	ands	r3, r2
 8003916:	d057      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003920:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	4013      	ands	r3, r2
 800392a:	d12b      	bne.n	8003984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e097      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003938:	4b4d      	ldr	r3, [pc, #308]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	049b      	lsls	r3, r3, #18
 8003940:	4013      	ands	r3, r2
 8003942:	d11f      	bne.n	8003984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e08b      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003950:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4013      	ands	r3, r2
 800395a:	d113      	bne.n	8003984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e07f      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d106      	bne.n	8003976 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003968:	4b41      	ldr	r3, [pc, #260]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 800396a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396c:	2202      	movs	r2, #2
 800396e:	4013      	ands	r3, r2
 8003970:	d108      	bne.n	8003984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e074      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b3e      	ldr	r3, [pc, #248]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	2202      	movs	r2, #2
 800397c:	4013      	ands	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e06d      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003984:	4b3a      	ldr	r3, [pc, #232]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2207      	movs	r2, #7
 800398a:	4393      	bics	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fe f9ce 	bl	8001d38 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a0:	e009      	b.n	80039b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a2:	f7fe f9c9 	bl	8001d38 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	4a2f      	ldr	r2, [pc, #188]	@ (8003a6c <HAL_RCC_ClockConfig+0x1f4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e054      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2238      	movs	r2, #56	@ 0x38
 80039bc:	401a      	ands	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1ec      	bne.n	80039a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2207      	movs	r2, #7
 80039ce:	4013      	ands	r3, r2
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d21e      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2207      	movs	r2, #7
 80039dc:	4393      	bics	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039e8:	f7fe f9a6 	bl	8001d38 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039f0:	e009      	b.n	8003a06 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f2:	f7fe f9a1 	bl	8001d38 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <HAL_RCC_ClockConfig+0x1f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e02c      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a06:	4b18      	ldr	r3, [pc, #96]	@ (8003a68 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2207      	movs	r2, #7
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1ee      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <HAL_RCC_ClockConfig+0x200>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	0019      	movs	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003a32:	f000 f829 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a36:	0001      	movs	r1, r0
 8003a38:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <HAL_RCC_ClockConfig+0x1f8>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	220f      	movs	r2, #15
 8003a40:	401a      	ands	r2, r3
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <HAL_RCC_ClockConfig+0x204>)
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	58d3      	ldr	r3, [r2, r3]
 8003a48:	221f      	movs	r2, #31
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	40da      	lsrs	r2, r3
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_ClockConfig+0x208>)
 8003a52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_ClockConfig+0x20c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fe f911 	bl	8001c80 <HAL_InitTick>
 8003a5e:	0003      	movs	r3, r0
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	00001388 	.word	0x00001388
 8003a70:	40021000 	.word	0x40021000
 8003a74:	fffff0ff 	.word	0xfffff0ff
 8003a78:	ffff8fff 	.word	0xffff8fff
 8003a7c:	08004854 	.word	0x08004854
 8003a80:	2000000c 	.word	0x2000000c
 8003a84:	20000010 	.word	0x20000010

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2238      	movs	r2, #56	@ 0x38
 8003a94:	4013      	ands	r3, r2
 8003a96:	d10f      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a98:	4b39      	ldr	r3, [pc, #228]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0adb      	lsrs	r3, r3, #11
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	0013      	movs	r3, r2
 8003aa8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	4835      	ldr	r0, [pc, #212]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003aae:	f7fc fb29 	bl	8000104 <__udivsi3>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e05d      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ab8:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2238      	movs	r2, #56	@ 0x38
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac4:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e054      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aca:	4b2d      	ldr	r3, [pc, #180]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2238      	movs	r2, #56	@ 0x38
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d138      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2203      	movs	r2, #3
 8003adc:	4013      	ands	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae0:	4b27      	ldr	r3, [pc, #156]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	4013      	ands	r3, r2
 8003aea:	3301      	adds	r3, #1
 8003aec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	4824      	ldr	r0, [pc, #144]	@ (8003b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8003af8:	f7fc fb04 	bl	8000104 <__udivsi3>
 8003afc:	0003      	movs	r3, r0
 8003afe:	0019      	movs	r1, r3
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	227f      	movs	r2, #127	@ 0x7f
 8003b08:	4013      	ands	r3, r2
 8003b0a:	434b      	muls	r3, r1
 8003b0c:	617b      	str	r3, [r7, #20]
        break;
 8003b0e:	e00d      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	481c      	ldr	r0, [pc, #112]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b14:	f7fc faf6 	bl	8000104 <__udivsi3>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	227f      	movs	r2, #127	@ 0x7f
 8003b24:	4013      	ands	r3, r2
 8003b26:	434b      	muls	r3, r1
 8003b28:	617b      	str	r3, [r7, #20]
        break;
 8003b2a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003b2c:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0f5b      	lsrs	r3, r3, #29
 8003b32:	2207      	movs	r2, #7
 8003b34:	4013      	ands	r3, r2
 8003b36:	3301      	adds	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f7fc fae1 	bl	8000104 <__udivsi3>
 8003b42:	0003      	movs	r3, r0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e015      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b48:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2238      	movs	r2, #56	@ 0x38
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d103      	bne.n	8003b5c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b54:	2380      	movs	r3, #128	@ 0x80
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b5c:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2238      	movs	r2, #56	@ 0x38
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b18      	cmp	r3, #24
 8003b66:	d103      	bne.n	8003b70 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003b68:	23fa      	movs	r3, #250	@ 0xfa
 8003b6a:	01db      	lsls	r3, r3, #7
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	e001      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b74:	693b      	ldr	r3, [r7, #16]
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b006      	add	sp, #24
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	40021000 	.word	0x40021000
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	007a1200 	.word	0x007a1200

08003b8c <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003b90:	4b04      	ldr	r3, [pc, #16]	@ (8003ba4 <HAL_RCC_EnableCSS+0x18>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <HAL_RCC_EnableCSS+0x18>)
 8003b96:	2180      	movs	r1, #128	@ 0x80
 8003b98:	0309      	lsls	r1, r1, #12
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	22c0      	movs	r2, #192	@ 0xc0
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	2380      	movs	r3, #128	@ 0x80
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003bca:	f000 f80d 	bl	8003be8 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 8003bd8:	f000 f80b 	bl	8003bf2 <HAL_RCC_LSECSSCallback>
  }
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c04:	2313      	movs	r3, #19
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c0c:	2312      	movs	r3, #18
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003c20:	e0a3      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2011      	movs	r0, #17
 8003c24:	183b      	adds	r3, r7, r0
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4bc3      	ldr	r3, [pc, #780]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	055b      	lsls	r3, r3, #21
 8003c32:	4013      	ands	r3, r2
 8003c34:	d110      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	4bc0      	ldr	r3, [pc, #768]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c3a:	4bbf      	ldr	r3, [pc, #764]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c3c:	2180      	movs	r1, #128	@ 0x80
 8003c3e:	0549      	lsls	r1, r1, #21
 8003c40:	430a      	orrs	r2, r1
 8003c42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c44:	4bbc      	ldr	r3, [pc, #752]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	055b      	lsls	r3, r3, #21
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c52:	183b      	adds	r3, r7, r0
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4bb8      	ldr	r3, [pc, #736]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4bb7      	ldr	r3, [pc, #732]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	0049      	lsls	r1, r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c66:	f7fe f867 	bl	8001d38 <HAL_GetTick>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c70:	f7fe f862 	bl	8001d38 <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d904      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003c7e:	2313      	movs	r3, #19
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2203      	movs	r2, #3
 8003c84:	701a      	strb	r2, [r3, #0]
        break;
 8003c86:	e005      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c88:	4bac      	ldr	r3, [pc, #688]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4013      	ands	r3, r2
 8003c92:	d0ed      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003c94:	2313      	movs	r3, #19
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d154      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c9e:	4ba6      	ldr	r3, [pc, #664]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ca2:	23c0      	movs	r3, #192	@ 0xc0
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d019      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d014      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cba:	4b9f      	ldr	r3, [pc, #636]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbe:	4aa0      	ldr	r2, [pc, #640]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cc8:	4b9b      	ldr	r3, [pc, #620]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cca:	2180      	movs	r1, #128	@ 0x80
 8003ccc:	0249      	lsls	r1, r1, #9
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd2:	4b99      	ldr	r3, [pc, #612]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003cd6:	4b98      	ldr	r3, [pc, #608]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd8:	499a      	ldr	r1, [pc, #616]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cde:	4b96      	ldr	r3, [pc, #600]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d016      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f824 	bl	8001d38 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf4:	e00c      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe f81f 	bl	8001d38 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4a91      	ldr	r2, [pc, #580]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d904      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003d06:	2313      	movs	r3, #19
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	701a      	strb	r2, [r3, #0]
            break;
 8003d0e:	e004      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d10:	4b89      	ldr	r3, [pc, #548]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d14:	2202      	movs	r2, #2
 8003d16:	4013      	ands	r3, r2
 8003d18:	d0ed      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003d1a:	2313      	movs	r3, #19
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d24:	4b84      	ldr	r3, [pc, #528]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	4a85      	ldr	r2, [pc, #532]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d32:	4b81      	ldr	r3, [pc, #516]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d34:	430a      	orrs	r2, r1
 8003d36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d38:	e00c      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d3a:	2312      	movs	r3, #18
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	2213      	movs	r2, #19
 8003d40:	18ba      	adds	r2, r7, r2
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e005      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	2312      	movs	r3, #18
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2213      	movs	r2, #19
 8003d4e:	18ba      	adds	r2, r7, r2
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d54:	2311      	movs	r3, #17
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5e:	4b76      	ldr	r3, [pc, #472]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d62:	4b75      	ldr	r3, [pc, #468]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d64:	4979      	ldr	r1, [pc, #484]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003d66:	400a      	ands	r2, r1
 8003d68:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d74:	4b70      	ldr	r3, [pc, #448]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	2203      	movs	r2, #3
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4b6d      	ldr	r3, [pc, #436]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d84:	430a      	orrs	r2, r1
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d92:	4b69      	ldr	r3, [pc, #420]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	220c      	movs	r2, #12
 8003d98:	4393      	bics	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b65      	ldr	r3, [pc, #404]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2210      	movs	r2, #16
 8003dac:	4013      	ands	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db0:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	4a66      	ldr	r2, [pc, #408]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b5e      	ldr	r3, [pc, #376]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd0:	4b59      	ldr	r3, [pc, #356]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	4a5f      	ldr	r2, [pc, #380]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	4b56      	ldr	r3, [pc, #344]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003de0:	430a      	orrs	r2, r1
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	@ 0x80
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4013      	ands	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003df0:	4b51      	ldr	r3, [pc, #324]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	4a58      	ldr	r2, [pc, #352]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e00:	430a      	orrs	r2, r1
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e12:	4a52      	ldr	r2, [pc, #328]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	4b46      	ldr	r3, [pc, #280]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	01db      	lsls	r3, r3, #7
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d015      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e2e:	4b42      	ldr	r3, [pc, #264]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	0899      	lsrs	r1, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	2380      	movs	r3, #128	@ 0x80
 8003e46:	05db      	lsls	r3, r3, #23
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e52:	2180      	movs	r1, #128	@ 0x80
 8003e54:	0249      	lsls	r1, r1, #9
 8003e56:	430a      	orrs	r2, r1
 8003e58:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	031b      	lsls	r3, r3, #12
 8003e62:	4013      	ands	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e66:	4b34      	ldr	r3, [pc, #208]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	2240      	movs	r2, #64	@ 0x40
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e74:	4b30      	ldr	r3, [pc, #192]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	@ 0x80
 8003e80:	039b      	lsls	r3, r3, #14
 8003e82:	4013      	ands	r3, r2
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e86:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e94:	4b28      	ldr	r3, [pc, #160]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e96:	430a      	orrs	r2, r1
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e9e:	2380      	movs	r3, #128	@ 0x80
 8003ea0:	03db      	lsls	r3, r3, #15
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ea6:	4b24      	ldr	r3, [pc, #144]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	4b23      	ldr	r3, [pc, #140]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eac:	2180      	movs	r1, #128	@ 0x80
 8003eae:	0449      	lsls	r1, r1, #17
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	2380      	movs	r3, #128	@ 0x80
 8003eba:	03db      	lsls	r3, r3, #15
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d016      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	4a27      	ldr	r2, [pc, #156]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ece:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	045b      	lsls	r3, r3, #17
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d106      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ee0:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	0449      	lsls	r1, r1, #17
 8003eea:	430a      	orrs	r2, r1
 8003eec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003efa:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	4a1a      	ldr	r2, [pc, #104]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	01db      	lsls	r3, r3, #7
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d106      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f1a:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f20:	2180      	movs	r1, #128	@ 0x80
 8003f22:	0249      	lsls	r1, r1, #9
 8003f24:	430a      	orrs	r2, r1
 8003f26:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003f28:	2312      	movs	r3, #18
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	781b      	ldrb	r3, [r3, #0]
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b006      	add	sp, #24
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	fffffcff 	.word	0xfffffcff
 8003f44:	fffeffff 	.word	0xfffeffff
 8003f48:	00001388 	.word	0x00001388
 8003f4c:	efffffff 	.word	0xefffffff
 8003f50:	fffff3ff 	.word	0xfffff3ff
 8003f54:	fff3ffff 	.word	0xfff3ffff
 8003f58:	ffcfffff 	.word	0xffcfffff
 8003f5c:	ffffcfff 	.word	0xffffcfff
 8003f60:	ffbfffff 	.word	0xffbfffff
 8003f64:	feffffff 	.word	0xfeffffff
 8003f68:	ffff3fff 	.word	0xffff3fff

08003f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e04a      	b.n	8004014 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223d      	movs	r2, #61	@ 0x3d
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	223c      	movs	r2, #60	@ 0x3c
 8003f8e:	2100      	movs	r1, #0
 8003f90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7fd fd5b 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	223d      	movs	r2, #61	@ 0x3d
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	0019      	movs	r1, r3
 8003fac:	0010      	movs	r0, r2
 8003fae:	f000 fa69 	bl	8004484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2248      	movs	r2, #72	@ 0x48
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	223e      	movs	r2, #62	@ 0x3e
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	223f      	movs	r2, #63	@ 0x3f
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2240      	movs	r2, #64	@ 0x40
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2241      	movs	r2, #65	@ 0x41
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2242      	movs	r2, #66	@ 0x42
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2243      	movs	r2, #67	@ 0x43
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2244      	movs	r2, #68	@ 0x44
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2245      	movs	r2, #69	@ 0x45
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	5499      	strb	r1, [r3, r2]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2246      	movs	r2, #70	@ 0x46
 8003ffe:	2101      	movs	r1, #1
 8004000:	5499      	strb	r1, [r3, r2]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2247      	movs	r2, #71	@ 0x47
 8004006:	2101      	movs	r1, #1
 8004008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	223d      	movs	r2, #61	@ 0x3d
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	438a      	bics	r2, r1
 8004032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a0d      	ldr	r2, [pc, #52]	@ (8004070 <HAL_TIM_Base_Stop_IT+0x54>)
 800403c:	4013      	ands	r3, r2
 800403e:	d10d      	bne.n	800405c <HAL_TIM_Base_Stop_IT+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4a0b      	ldr	r2, [pc, #44]	@ (8004074 <HAL_TIM_Base_Stop_IT+0x58>)
 8004048:	4013      	ands	r3, r2
 800404a:	d107      	bne.n	800405c <HAL_TIM_Base_Stop_IT+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2101      	movs	r1, #1
 8004058:	438a      	bics	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	223d      	movs	r2, #61	@ 0x3d
 8004060:	2101      	movs	r1, #1
 8004062:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b002      	add	sp, #8
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			@ (mov r8, r8)
 8004070:	00001111 	.word	0x00001111
 8004074:	00000444 	.word	0x00000444

08004078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2202      	movs	r2, #2
 8004094:	4013      	ands	r3, r2
 8004096:	d021      	beq.n	80040dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2202      	movs	r2, #2
 800409c:	4013      	ands	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2203      	movs	r2, #3
 80040a6:	4252      	negs	r2, r2
 80040a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2203      	movs	r2, #3
 80040b8:	4013      	ands	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 f9c8 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e007      	b.n	80040d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 f9bb 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 f9c7 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2204      	movs	r2, #4
 80040e0:	4013      	ands	r3, r2
 80040e2:	d022      	beq.n	800412a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2204      	movs	r2, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	d01e      	beq.n	800412a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2205      	movs	r2, #5
 80040f2:	4252      	negs	r2, r2
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	23c0      	movs	r3, #192	@ 0xc0
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 f9a1 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 8004112:	e007      	b.n	8004124 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0018      	movs	r0, r3
 8004118:	f000 f994 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	0018      	movs	r0, r3
 8004120:	f000 f9a0 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2208      	movs	r2, #8
 800412e:	4013      	ands	r3, r2
 8004130:	d021      	beq.n	8004176 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2208      	movs	r2, #8
 8004136:	4013      	ands	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2209      	movs	r2, #9
 8004140:	4252      	negs	r2, r2
 8004142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	2203      	movs	r2, #3
 8004152:	4013      	ands	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 f97b 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 800415e:	e007      	b.n	8004170 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	0018      	movs	r0, r3
 8004164:	f000 f96e 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	0018      	movs	r0, r3
 800416c:	f000 f97a 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2210      	movs	r2, #16
 800417a:	4013      	ands	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2210      	movs	r2, #16
 8004182:	4013      	ands	r3, r2
 8004184:	d01e      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2211      	movs	r2, #17
 800418c:	4252      	negs	r2, r2
 800418e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2208      	movs	r2, #8
 8004194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	23c0      	movs	r3, #192	@ 0xc0
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f954 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e007      	b.n	80041be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 f947 	bl	8004444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f953 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00c      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	d008      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2202      	movs	r2, #2
 80041da:	4252      	negs	r2, r2
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0018      	movs	r0, r3
 80041e2:	f000 f927 	bl	8004434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2280      	movs	r2, #128	@ 0x80
 80041ea:	4013      	ands	r3, r2
 80041ec:	d104      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	2380      	movs	r3, #128	@ 0x80
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f6:	d00b      	beq.n	8004210 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2280      	movs	r2, #128	@ 0x80
 80041fc:	4013      	ands	r3, r2
 80041fe:	d007      	beq.n	8004210 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1e      	ldr	r2, [pc, #120]	@ (8004280 <HAL_TIM_IRQHandler+0x208>)
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	0018      	movs	r0, r3
 800420c:	f000 fada 	bl	80047c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	2380      	movs	r3, #128	@ 0x80
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	4013      	ands	r3, r2
 8004218:	d00b      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2280      	movs	r2, #128	@ 0x80
 800421e:	4013      	ands	r3, r2
 8004220:	d007      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <HAL_TIM_IRQHandler+0x20c>)
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f000 fad1 	bl	80047d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2240      	movs	r2, #64	@ 0x40
 8004236:	4013      	ands	r3, r2
 8004238:	d00c      	beq.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2240      	movs	r2, #64	@ 0x40
 800423e:	4013      	ands	r3, r2
 8004240:	d008      	beq.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2241      	movs	r2, #65	@ 0x41
 8004248:	4252      	negs	r2, r2
 800424a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	f000 f910 	bl	8004474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2220      	movs	r2, #32
 8004258:	4013      	ands	r3, r2
 800425a:	d00c      	beq.n	8004276 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	4013      	ands	r3, r2
 8004262:	d008      	beq.n	8004276 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2221      	movs	r2, #33	@ 0x21
 800426a:	4252      	negs	r2, r2
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 fa9f 	bl	80047b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	b004      	add	sp, #16
 800427c:	bd80      	pop	{r7, pc}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	ffffdf7f 	.word	0xffffdf7f
 8004284:	fffffeff 	.word	0xfffffeff

08004288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	230f      	movs	r3, #15
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	223c      	movs	r2, #60	@ 0x3c
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIM_ConfigClockSource+0x20>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0bc      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x19a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223c      	movs	r2, #60	@ 0x3c
 80042ac:	2101      	movs	r1, #1
 80042ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	223d      	movs	r2, #61	@ 0x3d
 80042b4:	2102      	movs	r1, #2
 80042b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4a5a      	ldr	r2, [pc, #360]	@ (800442c <HAL_TIM_ConfigClockSource+0x1a4>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4a59      	ldr	r2, [pc, #356]	@ (8004430 <HAL_TIM_ConfigClockSource+0x1a8>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2280      	movs	r2, #128	@ 0x80
 80042de:	0192      	lsls	r2, r2, #6
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d040      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xde>
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	0192      	lsls	r2, r2, #6
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d900      	bls.n	80042ee <HAL_TIM_ConfigClockSource+0x66>
 80042ec:	e088      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 80042ee:	2280      	movs	r2, #128	@ 0x80
 80042f0:	0152      	lsls	r2, r2, #5
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d100      	bne.n	80042f8 <HAL_TIM_ConfigClockSource+0x70>
 80042f6:	e088      	b.n	800440a <HAL_TIM_ConfigClockSource+0x182>
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	0152      	lsls	r2, r2, #5
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d900      	bls.n	8004302 <HAL_TIM_ConfigClockSource+0x7a>
 8004300:	e07e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 8004302:	2b70      	cmp	r3, #112	@ 0x70
 8004304:	d018      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0xb0>
 8004306:	d900      	bls.n	800430a <HAL_TIM_ConfigClockSource+0x82>
 8004308:	e07a      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 800430a:	2b60      	cmp	r3, #96	@ 0x60
 800430c:	d04f      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x126>
 800430e:	d900      	bls.n	8004312 <HAL_TIM_ConfigClockSource+0x8a>
 8004310:	e076      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 8004312:	2b50      	cmp	r3, #80	@ 0x50
 8004314:	d03b      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x106>
 8004316:	d900      	bls.n	800431a <HAL_TIM_ConfigClockSource+0x92>
 8004318:	e072      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d057      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x146>
 800431e:	d900      	bls.n	8004322 <HAL_TIM_ConfigClockSource+0x9a>
 8004320:	e06e      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 8004322:	2b30      	cmp	r3, #48	@ 0x30
 8004324:	d063      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x166>
 8004326:	d86b      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d060      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x166>
 800432c:	d868      	bhi.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d05d      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x166>
 8004332:	2b10      	cmp	r3, #16
 8004334:	d05b      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x166>
 8004336:	e063      	b.n	8004400 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	f000 f9a6 	bl	8004698 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2277      	movs	r2, #119	@ 0x77
 8004358:	4313      	orrs	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]
      break;
 8004364:	e052      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	f000 f98f 	bl	8004698 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2180      	movs	r1, #128	@ 0x80
 8004386:	01c9      	lsls	r1, r1, #7
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
      break;
 800438c:	e03e      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	001a      	movs	r2, r3
 800439c:	f000 f900 	bl	80045a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2150      	movs	r1, #80	@ 0x50
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 f95a 	bl	8004660 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e02e      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ba:	001a      	movs	r2, r3
 80043bc:	f000 f91e 	bl	80045fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2160      	movs	r1, #96	@ 0x60
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 f94a 	bl	8004660 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e01e      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	001a      	movs	r2, r3
 80043dc:	f000 f8e0 	bl	80045a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2140      	movs	r1, #64	@ 0x40
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 f93a 	bl	8004660 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e00e      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	0019      	movs	r1, r3
 80043f8:	0010      	movs	r0, r2
 80043fa:	f000 f931 	bl	8004660 <TIM_ITRx_SetConfig>
      break;
 80043fe:	e005      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004400:	230f      	movs	r3, #15
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
      break;
 8004408:	e000      	b.n	800440c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800440a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223d      	movs	r2, #61	@ 0x3d
 8004410:	2101      	movs	r1, #1
 8004412:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	223c      	movs	r2, #60	@ 0x3c
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

  return status;
 800441c:	230f      	movs	r3, #15
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	781b      	ldrb	r3, [r3, #0]
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	ffceff88 	.word	0xffceff88
 8004430:	ffff00ff 	.word	0xffff00ff

08004434 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3b      	ldr	r2, [pc, #236]	@ (8004584 <TIM_Base_SetConfig+0x100>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d008      	beq.n	80044ae <TIM_Base_SetConfig+0x2a>
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	05db      	lsls	r3, r3, #23
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d003      	beq.n	80044ae <TIM_Base_SetConfig+0x2a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a37      	ldr	r2, [pc, #220]	@ (8004588 <TIM_Base_SetConfig+0x104>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d108      	bne.n	80044c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2270      	movs	r2, #112	@ 0x70
 80044b2:	4393      	bics	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a30      	ldr	r2, [pc, #192]	@ (8004584 <TIM_Base_SetConfig+0x100>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d018      	beq.n	80044fa <TIM_Base_SetConfig+0x76>
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	05db      	lsls	r3, r3, #23
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d013      	beq.n	80044fa <TIM_Base_SetConfig+0x76>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004588 <TIM_Base_SetConfig+0x104>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00f      	beq.n	80044fa <TIM_Base_SetConfig+0x76>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	@ (800458c <TIM_Base_SetConfig+0x108>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <TIM_Base_SetConfig+0x76>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004590 <TIM_Base_SetConfig+0x10c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <TIM_Base_SetConfig+0x76>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a29      	ldr	r2, [pc, #164]	@ (8004594 <TIM_Base_SetConfig+0x110>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_Base_SetConfig+0x76>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a28      	ldr	r2, [pc, #160]	@ (8004598 <TIM_Base_SetConfig+0x114>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d108      	bne.n	800450c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a27      	ldr	r2, [pc, #156]	@ (800459c <TIM_Base_SetConfig+0x118>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2280      	movs	r2, #128	@ 0x80
 8004510:	4393      	bics	r3, r2
 8004512:	001a      	movs	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <TIM_Base_SetConfig+0x100>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_Base_SetConfig+0xce>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a14      	ldr	r2, [pc, #80]	@ (8004590 <TIM_Base_SetConfig+0x10c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_Base_SetConfig+0xce>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a13      	ldr	r2, [pc, #76]	@ (8004594 <TIM_Base_SetConfig+0x110>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_Base_SetConfig+0xce>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <TIM_Base_SetConfig+0x114>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d103      	bne.n	800455a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2201      	movs	r2, #1
 8004566:	4013      	ands	r3, r2
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2201      	movs	r2, #1
 8004572:	4393      	bics	r3, r2
 8004574:	001a      	movs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	611a      	str	r2, [r3, #16]
  }
}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b004      	add	sp, #16
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40000400 	.word	0x40000400
 800458c:	40002000 	.word	0x40002000
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800
 800459c:	fffffcff 	.word	0xfffffcff

080045a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	2201      	movs	r2, #1
 80045b8:	4393      	bics	r3, r2
 80045ba:	001a      	movs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	22f0      	movs	r2, #240	@ 0xf0
 80045ca:	4393      	bics	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	220a      	movs	r2, #10
 80045dc:	4393      	bics	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b006      	add	sp, #24
 80045fa:	bd80      	pop	{r7, pc}

080045fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	2210      	movs	r2, #16
 8004614:	4393      	bics	r3, r2
 8004616:	001a      	movs	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4a0d      	ldr	r2, [pc, #52]	@ (800465c <TIM_TI2_ConfigInputStage+0x60>)
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	22a0      	movs	r2, #160	@ 0xa0
 8004638:	4393      	bics	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b006      	add	sp, #24
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	ffff0fff 	.word	0xffff0fff

08004660 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a08      	ldr	r2, [pc, #32]	@ (8004694 <TIM_ITRx_SetConfig+0x34>)
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	2207      	movs	r2, #7
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	609a      	str	r2, [r3, #8]
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	ffcfff8f 	.word	0xffcfff8f

08004698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4a09      	ldr	r2, [pc, #36]	@ (80046d4 <TIM_ETR_SetConfig+0x3c>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4313      	orrs	r3, r2
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	46c0      	nop			@ (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	ffff00ff 	.word	0xffff00ff

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	223c      	movs	r2, #60	@ 0x3c
 80046e6:	5c9b      	ldrb	r3, [r3, r2]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e055      	b.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	223c      	movs	r2, #60	@ 0x3c
 80046f4:	2101      	movs	r1, #1
 80046f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	223d      	movs	r2, #61	@ 0x3d
 80046fc:	2102      	movs	r1, #2
 80046fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a22      	ldr	r2, [pc, #136]	@ (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800471e:	4013      	ands	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2270      	movs	r2, #112	@ 0x70
 8004730:	4393      	bics	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00f      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	05db      	lsls	r3, r3, #23
 8004758:	429a      	cmp	r2, r3
 800475a:	d009      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a11      	ldr	r2, [pc, #68]	@ (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10c      	bne.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2280      	movs	r2, #128	@ 0x80
 8004774:	4393      	bics	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	223d      	movs	r2, #61	@ 0x3d
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	223c      	movs	r2, #60	@ 0x3c
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b004      	add	sp, #16
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	ff0fffff 	.word	0xff0fffff
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40014000 	.word	0x40014000

080047b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047bc:	46c0      	nop			@ (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047dc:	46c0      	nop			@ (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <memset>:
 80047e4:	0003      	movs	r3, r0
 80047e6:	1882      	adds	r2, r0, r2
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d100      	bne.n	80047ee <memset+0xa>
 80047ec:	4770      	bx	lr
 80047ee:	7019      	strb	r1, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	e7f9      	b.n	80047e8 <memset+0x4>

080047f4 <__libc_init_array>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	2600      	movs	r6, #0
 80047f8:	4c0c      	ldr	r4, [pc, #48]	@ (800482c <__libc_init_array+0x38>)
 80047fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004830 <__libc_init_array+0x3c>)
 80047fc:	1b64      	subs	r4, r4, r5
 80047fe:	10a4      	asrs	r4, r4, #2
 8004800:	42a6      	cmp	r6, r4
 8004802:	d109      	bne.n	8004818 <__libc_init_array+0x24>
 8004804:	2600      	movs	r6, #0
 8004806:	f000 f819 	bl	800483c <_init>
 800480a:	4c0a      	ldr	r4, [pc, #40]	@ (8004834 <__libc_init_array+0x40>)
 800480c:	4d0a      	ldr	r5, [pc, #40]	@ (8004838 <__libc_init_array+0x44>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	42a6      	cmp	r6, r4
 8004814:	d105      	bne.n	8004822 <__libc_init_array+0x2e>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	00b3      	lsls	r3, r6, #2
 800481a:	58eb      	ldr	r3, [r5, r3]
 800481c:	4798      	blx	r3
 800481e:	3601      	adds	r6, #1
 8004820:	e7ee      	b.n	8004800 <__libc_init_array+0xc>
 8004822:	00b3      	lsls	r3, r6, #2
 8004824:	58eb      	ldr	r3, [r5, r3]
 8004826:	4798      	blx	r3
 8004828:	3601      	adds	r6, #1
 800482a:	e7f2      	b.n	8004812 <__libc_init_array+0x1e>
 800482c:	08004894 	.word	0x08004894
 8004830:	08004894 	.word	0x08004894
 8004834:	08004898 	.word	0x08004898
 8004838:	08004894 	.word	0x08004894

0800483c <_init>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr

08004848 <_fini>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr
