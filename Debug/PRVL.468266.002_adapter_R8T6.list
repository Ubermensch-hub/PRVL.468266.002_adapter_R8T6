
PRVL.468266.002_adapter_R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a14  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b10  08004b10  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b10  08004b10  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000000c  08004b24  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004b24  00006250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea8a  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232e  00000000  00000000  00014abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00016df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4f  00000000  00000000  00017da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017edc  00000000  00000000  000189f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121a2  00000000  00000000  000308d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4cd  00000000  00000000  00042a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddf42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  000ddf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e18d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004ab8 	.word	0x08004ab8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004ab8 	.word	0x08004ab8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <Update_Disk_Status>:
static void MX_TIM3_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */


void Update_Disk_Status(uint8_t disk_id, uint8_t status) {
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	1c0a      	adds	r2, r1, #0
 800022c:	701a      	strb	r2, [r3, #0]
	if (disk_id >= 24) return; // Проверка на корректность disk_id
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b17      	cmp	r3, #23
 8000234:	d838      	bhi.n	80002a8 <Update_Disk_Status+0x8c>

	// Вычисляем позицию в массиве disk_status
	uint8_t byte_index = disk_id / 4; // Каждый байт содержит 4 диска
 8000236:	200f      	movs	r0, #15
 8000238:	183b      	adds	r3, r7, r0
 800023a:	1dfa      	adds	r2, r7, #7
 800023c:	7812      	ldrb	r2, [r2, #0]
 800023e:	0892      	lsrs	r2, r2, #2
 8000240:	701a      	strb	r2, [r3, #0]
	uint8_t bit_offset = (disk_id % 4) * 2; // Смещение в байте (0, 2, 4, 6)
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2203      	movs	r2, #3
 8000248:	4013      	ands	r3, r2
 800024a:	b2db      	uxtb	r3, r3
 800024c:	240e      	movs	r4, #14
 800024e:	193a      	adds	r2, r7, r4
 8000250:	18db      	adds	r3, r3, r3
 8000252:	7013      	strb	r3, [r2, #0]

	// Очищаем старые биты и записываем новые
	disk_status[byte_index] &= ~(0x03 << bit_offset); // Очистка битов
 8000254:	183b      	adds	r3, r7, r0
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4a15      	ldr	r2, [pc, #84]	@ (80002b0 <Update_Disk_Status+0x94>)
 800025a:	5cd3      	ldrb	r3, [r2, r3]
 800025c:	b25b      	sxtb	r3, r3
 800025e:	193a      	adds	r2, r7, r4
 8000260:	7812      	ldrb	r2, [r2, #0]
 8000262:	2103      	movs	r1, #3
 8000264:	4091      	lsls	r1, r2
 8000266:	000a      	movs	r2, r1
 8000268:	b252      	sxtb	r2, r2
 800026a:	43d2      	mvns	r2, r2
 800026c:	b252      	sxtb	r2, r2
 800026e:	4013      	ands	r3, r2
 8000270:	b25a      	sxtb	r2, r3
 8000272:	183b      	adds	r3, r7, r0
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2d1      	uxtb	r1, r2
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <Update_Disk_Status+0x94>)
 800027a:	54d1      	strb	r1, [r2, r3]
	disk_status[byte_index] |= (status & 0x03) << bit_offset; // Запись новых битов
 800027c:	183b      	adds	r3, r7, r0
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4a0b      	ldr	r2, [pc, #44]	@ (80002b0 <Update_Disk_Status+0x94>)
 8000282:	5cd3      	ldrb	r3, [r2, r3]
 8000284:	b25a      	sxtb	r2, r3
 8000286:	1dbb      	adds	r3, r7, #6
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2103      	movs	r1, #3
 800028c:	4019      	ands	r1, r3
 800028e:	193b      	adds	r3, r7, r4
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4099      	lsls	r1, r3
 8000294:	000b      	movs	r3, r1
 8000296:	b25b      	sxtb	r3, r3
 8000298:	4313      	orrs	r3, r2
 800029a:	b25a      	sxtb	r2, r3
 800029c:	183b      	adds	r3, r7, r0
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2d1      	uxtb	r1, r2
 80002a2:	4a03      	ldr	r2, [pc, #12]	@ (80002b0 <Update_Disk_Status+0x94>)
 80002a4:	54d1      	strb	r1, [r2, r3]
 80002a6:	e000      	b.n	80002aa <Update_Disk_Status+0x8e>
	if (disk_id >= 24) return; // Проверка на корректность disk_id
 80002a8:	46c0      	nop			@ (mov r8, r8)
}
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b005      	add	sp, #20
 80002ae:	bd90      	pop	{r4, r7, pc}
 80002b0:	20000224 	.word	0x20000224

080002b4 <ProcessSGPIOData>:

void ProcessSGPIOData(uint16_t sgpioData, uint8_t startIndex)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	801a      	strh	r2, [r3, #0]
 80002c0:	1d7b      	adds	r3, r7, #5
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; ++i) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e04d      	b.n	8000368 <ProcessSGPIOData+0xb4>
		uint8_t diskIndex = startIndex + i; // ндекс диска (0-3 для A, 4- 7 для B)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	b2d9      	uxtb	r1, r3
 80002d0:	200b      	movs	r0, #11
 80002d2:	183b      	adds	r3, r7, r0
 80002d4:	1d7a      	adds	r2, r7, #5
 80002d6:	7812      	ldrb	r2, [r2, #0]
 80002d8:	188a      	adds	r2, r1, r2
 80002da:	701a      	strb	r2, [r3, #0]
		uint8_t diskStatus = (sgpioData >> (3 * i)) & 0x07; // �?звлечение 3 бит для диска
 80002dc:	1dbb      	adds	r3, r7, #6
 80002de:	8819      	ldrh	r1, [r3, #0]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	0013      	movs	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	189b      	adds	r3, r3, r2
 80002e8:	4119      	asrs	r1, r3
 80002ea:	000b      	movs	r3, r1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	240a      	movs	r4, #10
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2107      	movs	r1, #7
 80002f4:	400a      	ands	r2, r1
 80002f6:	701a      	strb	r2, [r3, #0]

		if (((diskStatus >> 0) & 0x01) == 1)
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2201      	movs	r2, #1
 80002fe:	4013      	ands	r3, r2
 8000300:	d006      	beq.n	8000310 <ProcessSGPIOData+0x5c>
			{
			Update_Disk_Status(diskIndex, 0x01) ;// 1-й бит - активность
 8000302:	183b      	adds	r3, r7, r0
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2101      	movs	r1, #1
 8000308:	0018      	movs	r0, r3
 800030a:	f7ff ff87 	bl	800021c <Update_Disk_Status>
 800030e:	e028      	b.n	8000362 <ProcessSGPIOData+0xae>
			} else
		if (((diskStatus >> 1) & 0x01) == 1)
 8000310:	230a      	movs	r3, #10
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	085b      	lsrs	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	001a      	movs	r2, r3
 800031c:	2301      	movs	r3, #1
 800031e:	4013      	ands	r3, r2
 8000320:	d007      	beq.n	8000332 <ProcessSGPIOData+0x7e>
			{
			Update_Disk_Status(diskIndex, 0x02);   // 2-й бит - локация
 8000322:	230b      	movs	r3, #11
 8000324:	18fb      	adds	r3, r7, r3
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2102      	movs	r1, #2
 800032a:	0018      	movs	r0, r3
 800032c:	f7ff ff76 	bl	800021c <Update_Disk_Status>
 8000330:	e017      	b.n	8000362 <ProcessSGPIOData+0xae>
			}else
		if (((diskStatus >> 2) & 0x01) == 1)
 8000332:	230a      	movs	r3, #10
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	b2db      	uxtb	r3, r3
 800033c:	001a      	movs	r2, r3
 800033e:	2301      	movs	r3, #1
 8000340:	4013      	ands	r3, r2
 8000342:	d007      	beq.n	8000354 <ProcessSGPIOData+0xa0>
			{
			Update_Disk_Status(diskIndex, 0x03);    // 3-й бит - ошибка
 8000344:	230b      	movs	r3, #11
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2103      	movs	r1, #3
 800034c:	0018      	movs	r0, r3
 800034e:	f7ff ff65 	bl	800021c <Update_Disk_Status>
 8000352:	e006      	b.n	8000362 <ProcessSGPIOData+0xae>
			}else 	Update_Disk_Status(diskIndex, 0x00);    // 3-й бит - ошибка
 8000354:	230b      	movs	r3, #11
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2100      	movs	r1, #0
 800035c:	0018      	movs	r0, r3
 800035e:	f7ff ff5d 	bl	800021c <Update_Disk_Status>
	for (int i = 0; i < 4; ++i) {
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	2b03      	cmp	r3, #3
 800036c:	ddae      	ble.n	80002cc <ProcessSGPIOData+0x18>

		// Обновление статуса диска

	}
}
 800036e:	46c0      	nop			@ (mov r8, r8)
 8000370:	46c0      	nop			@ (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b005      	add	sp, #20
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <sendI2c.2>:

void configred(){


void sendI2c(int reg, int value, uint16_t adr_rep)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af02      	add	r7, sp, #8
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	1dbb      	adds	r3, r7, #6
 8000384:	801a      	strh	r2, [r3, #0]
 8000386:	4663      	mov	r3, ip
 8000388:	603b      	str	r3, [r7, #0]
	I2CTransmit[0] = reg;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <sendI2c.2+0x48>)
 8000390:	701a      	strb	r2, [r3, #0]
	I2CTransmit[1] = value;
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <sendI2c.2+0x48>)
 8000398:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c2, (adr_rep << 1), I2CTransmit, 2, HAL_MAX_DELAY);
 800039a:	1dbb      	adds	r3, r7, #6
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	18db      	adds	r3, r3, r3
 80003a0:	b299      	uxth	r1, r3
 80003a2:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <sendI2c.2+0x48>)
 80003a4:	4807      	ldr	r0, [pc, #28]	@ (80003c4 <sendI2c.2+0x4c>)
 80003a6:	2301      	movs	r3, #1
 80003a8:	425b      	negs	r3, r3
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2302      	movs	r3, #2
 80003ae:	f002 faf5 	bl	800299c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80003b2:	200a      	movs	r0, #10
 80003b4:	f001 fe08 	bl	8001fc8 <HAL_Delay>
}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b004      	add	sp, #16
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000022c 	.word	0x2000022c
 80003c4:	20000080 	.word	0x20000080

080003c8 <configred>:
void configred(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	2310      	movs	r3, #16
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);

    redriver_init_other3 (Repeater3_TX); //3
}

Redriver_Init();
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	469c      	mov	ip, r3
 80003d8:	f000 fd92 	bl	8000f00 <Redriver_Init.0>
}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <A4_setting.3>:
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6178      	str	r0, [r7, #20]
 80003ec:	6139      	str	r1, [r7, #16]
 80003ee:	60fa      	str	r2, [r7, #12]
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	4664      	mov	r4, ip
 80003f4:	4663      	mov	r3, ip
 80003f6:	607b      	str	r3, [r7, #4]
	sendI2c(0x0F, dB, adr);
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	46a4      	mov	ip, r4
 8000400:	0019      	movs	r1, r3
 8000402:	200f      	movs	r0, #15
 8000404:	f7ff ffb8 	bl	8000378 <sendI2c.2>
	sendI2c(0x10, VOD, adr);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	b29a      	uxth	r2, r3
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	46a4      	mov	ip, r4
 8000410:	0019      	movs	r1, r3
 8000412:	2010      	movs	r0, #16
 8000414:	f7ff ffb0 	bl	8000378 <sendI2c.2>
	sendI2c(0x11, dB_cont, adr);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	b29a      	uxth	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	46a4      	mov	ip, r4
 8000420:	0019      	movs	r1, r3
 8000422:	2011      	movs	r0, #17
 8000424:	f7ff ffa8 	bl	8000378 <sendI2c.2>
}
 8000428:	46c0      	nop			@ (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b007      	add	sp, #28
 800042e:	bd90      	pop	{r4, r7, pc}

08000430 <B4_setting.4>:
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b087      	sub	sp, #28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6178      	str	r0, [r7, #20]
 8000438:	6139      	str	r1, [r7, #16]
 800043a:	60fa      	str	r2, [r7, #12]
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	4664      	mov	r4, ip
 8000440:	4663      	mov	r3, ip
 8000442:	607b      	str	r3, [r7, #4]
	sendI2c(0x16, dB, adr); //db B_1
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	b29a      	uxth	r2, r3
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	46a4      	mov	ip, r4
 800044c:	0019      	movs	r1, r3
 800044e:	2016      	movs	r0, #22
 8000450:	f7ff ff92 	bl	8000378 <sendI2c.2>
	sendI2c(0x17, VOD, adr); // B4
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	b29a      	uxth	r2, r3
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	46a4      	mov	ip, r4
 800045c:	0019      	movs	r1, r3
 800045e:	2017      	movs	r0, #23
 8000460:	f7ff ff8a 	bl	8000378 <sendI2c.2>
	sendI2c(0x18, dB_cont, adr);
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	b29a      	uxth	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	46a4      	mov	ip, r4
 800046c:	0019      	movs	r1, r3
 800046e:	2018      	movs	r0, #24
 8000470:	f7ff ff82 	bl	8000378 <sendI2c.2>
}
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b007      	add	sp, #28
 800047a:	bd90      	pop	{r4, r7, pc}

0800047c <C4_setting.5>:
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b087      	sub	sp, #28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6178      	str	r0, [r7, #20]
 8000484:	6139      	str	r1, [r7, #16]
 8000486:	60fa      	str	r2, [r7, #12]
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	4664      	mov	r4, ip
 800048c:	4663      	mov	r3, ip
 800048e:	607b      	str	r3, [r7, #4]
	sendI2c(0x1D, dB, adr); //db B_2
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	b29a      	uxth	r2, r3
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	46a4      	mov	ip, r4
 8000498:	0019      	movs	r1, r3
 800049a:	201d      	movs	r0, #29
 800049c:	f7ff ff6c 	bl	8000378 <sendI2c.2>
	sendI2c(0x1E, VOD, adr); // C4
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	46a4      	mov	ip, r4
 80004a8:	0019      	movs	r1, r3
 80004aa:	201e      	movs	r0, #30
 80004ac:	f7ff ff64 	bl	8000378 <sendI2c.2>
	sendI2c(0x1F, dB_cont, adr);
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	46a4      	mov	ip, r4
 80004b8:	0019      	movs	r1, r3
 80004ba:	201f      	movs	r0, #31
 80004bc:	f7ff ff5c 	bl	8000378 <sendI2c.2>
}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b007      	add	sp, #28
 80004c6:	bd90      	pop	{r4, r7, pc}

080004c8 <D4_setting.6>:
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6178      	str	r0, [r7, #20]
 80004d0:	6139      	str	r1, [r7, #16]
 80004d2:	60fa      	str	r2, [r7, #12]
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	4664      	mov	r4, ip
 80004d8:	4663      	mov	r3, ip
 80004da:	607b      	str	r3, [r7, #4]
	sendI2c(0x24, dB, adr); //db B_3
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	46a4      	mov	ip, r4
 80004e4:	0019      	movs	r1, r3
 80004e6:	2024      	movs	r0, #36	@ 0x24
 80004e8:	f7ff ff46 	bl	8000378 <sendI2c.2>
	sendI2c(0x25, VOD, adr); // D4
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	46a4      	mov	ip, r4
 80004f4:	0019      	movs	r1, r3
 80004f6:	2025      	movs	r0, #37	@ 0x25
 80004f8:	f7ff ff3e 	bl	8000378 <sendI2c.2>
	sendI2c(0x26, dB_cont, adr);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	46a4      	mov	ip, r4
 8000504:	0019      	movs	r1, r3
 8000506:	2026      	movs	r0, #38	@ 0x26
 8000508:	f7ff ff36 	bl	8000378 <sendI2c.2>
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b007      	add	sp, #28
 8000512:	bd90      	pop	{r4, r7, pc}

08000514 <E4_setting.7>:
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6178      	str	r0, [r7, #20]
 800051c:	6139      	str	r1, [r7, #16]
 800051e:	60fa      	str	r2, [r7, #12]
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4664      	mov	r4, ip
 8000524:	4663      	mov	r3, ip
 8000526:	607b      	str	r3, [r7, #4]
	sendI2c(0x2C, dB, adr); //db A_0
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	b29a      	uxth	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	46a4      	mov	ip, r4
 8000530:	0019      	movs	r1, r3
 8000532:	202c      	movs	r0, #44	@ 0x2c
 8000534:	f7ff ff20 	bl	8000378 <sendI2c.2>
	sendI2c(0x2D, VOD, adr); // E4
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	b29a      	uxth	r2, r3
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	46a4      	mov	ip, r4
 8000540:	0019      	movs	r1, r3
 8000542:	202d      	movs	r0, #45	@ 0x2d
 8000544:	f7ff ff18 	bl	8000378 <sendI2c.2>
	sendI2c(0x2E, dB_cont, adr);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	b29a      	uxth	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	46a4      	mov	ip, r4
 8000550:	0019      	movs	r1, r3
 8000552:	202e      	movs	r0, #46	@ 0x2e
 8000554:	f7ff ff10 	bl	8000378 <sendI2c.2>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b007      	add	sp, #28
 800055e:	bd90      	pop	{r4, r7, pc}

08000560 <F4_setting.8>:
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6178      	str	r0, [r7, #20]
 8000568:	6139      	str	r1, [r7, #16]
 800056a:	60fa      	str	r2, [r7, #12]
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4664      	mov	r4, ip
 8000570:	4663      	mov	r3, ip
 8000572:	607b      	str	r3, [r7, #4]
	sendI2c(0x33, dB, adr); //db A_0
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	b29a      	uxth	r2, r3
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	46a4      	mov	ip, r4
 800057c:	0019      	movs	r1, r3
 800057e:	2033      	movs	r0, #51	@ 0x33
 8000580:	f7ff fefa 	bl	8000378 <sendI2c.2>
	sendI2c(0x34, VOD, adr); // E4
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	b29a      	uxth	r2, r3
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	46a4      	mov	ip, r4
 800058c:	0019      	movs	r1, r3
 800058e:	2034      	movs	r0, #52	@ 0x34
 8000590:	f7ff fef2 	bl	8000378 <sendI2c.2>
	sendI2c(0x35, dB_cont, adr);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	b29a      	uxth	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	46a4      	mov	ip, r4
 800059c:	0019      	movs	r1, r3
 800059e:	2035      	movs	r0, #53	@ 0x35
 80005a0:	f7ff feea 	bl	8000378 <sendI2c.2>
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b007      	add	sp, #28
 80005aa:	bd90      	pop	{r4, r7, pc}

080005ac <A3_setting.9>:
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6178      	str	r0, [r7, #20]
 80005b4:	6139      	str	r1, [r7, #16]
 80005b6:	60fa      	str	r2, [r7, #12]
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4664      	mov	r4, ip
 80005bc:	4663      	mov	r3, ip
 80005be:	607b      	str	r3, [r7, #4]
	sendI2c(0x3A, dB, adr); //db A_0
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	46a4      	mov	ip, r4
 80005c8:	0019      	movs	r1, r3
 80005ca:	203a      	movs	r0, #58	@ 0x3a
 80005cc:	f7ff fed4 	bl	8000378 <sendI2c.2>
	sendI2c(0x3B, VOD, adr); // E4
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	46a4      	mov	ip, r4
 80005d8:	0019      	movs	r1, r3
 80005da:	203b      	movs	r0, #59	@ 0x3b
 80005dc:	f7ff fecc 	bl	8000378 <sendI2c.2>
	sendI2c(0x3C, dB_cont, adr);
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	46a4      	mov	ip, r4
 80005e8:	0019      	movs	r1, r3
 80005ea:	203c      	movs	r0, #60	@ 0x3c
 80005ec:	f7ff fec4 	bl	8000378 <sendI2c.2>
}
 80005f0:	46c0      	nop			@ (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b007      	add	sp, #28
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <B3_setting.10>:
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6178      	str	r0, [r7, #20]
 8000600:	6139      	str	r1, [r7, #16]
 8000602:	60fa      	str	r2, [r7, #12]
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4664      	mov	r4, ip
 8000608:	4663      	mov	r3, ip
 800060a:	607b      	str	r3, [r7, #4]
	sendI2c(0x41, dB, adr); //db A_0
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29a      	uxth	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	46a4      	mov	ip, r4
 8000614:	0019      	movs	r1, r3
 8000616:	2041      	movs	r0, #65	@ 0x41
 8000618:	f7ff feae 	bl	8000378 <sendI2c.2>
	sendI2c(0x42, VOD, adr); // E4
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	b29a      	uxth	r2, r3
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	46a4      	mov	ip, r4
 8000624:	0019      	movs	r1, r3
 8000626:	2042      	movs	r0, #66	@ 0x42
 8000628:	f7ff fea6 	bl	8000378 <sendI2c.2>
	sendI2c(0x43, dB_cont, adr);
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	b29a      	uxth	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	46a4      	mov	ip, r4
 8000634:	0019      	movs	r1, r3
 8000636:	2043      	movs	r0, #67	@ 0x43
 8000638:	f7ff fe9e 	bl	8000378 <sendI2c.2>
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b007      	add	sp, #28
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <C3_setting.12>:
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6178      	str	r0, [r7, #20]
 800064c:	6139      	str	r1, [r7, #16]
 800064e:	60fa      	str	r2, [r7, #12]
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4664      	mov	r4, ip
 8000654:	4663      	mov	r3, ip
 8000656:	607b      	str	r3, [r7, #4]
	sendI2c(0x0F, dB, adr); //db A_0
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	b29a      	uxth	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	46a4      	mov	ip, r4
 8000660:	0019      	movs	r1, r3
 8000662:	200f      	movs	r0, #15
 8000664:	f7ff fe88 	bl	8000378 <sendI2c.2>
	sendI2c(0x10, VOD, adr); // E4
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	b29a      	uxth	r2, r3
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	46a4      	mov	ip, r4
 8000670:	0019      	movs	r1, r3
 8000672:	2010      	movs	r0, #16
 8000674:	f7ff fe80 	bl	8000378 <sendI2c.2>
	sendI2c(0x11, dB_cont, adr);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	b29a      	uxth	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	46a4      	mov	ip, r4
 8000680:	0019      	movs	r1, r3
 8000682:	2011      	movs	r0, #17
 8000684:	f7ff fe78 	bl	8000378 <sendI2c.2>
}
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b007      	add	sp, #28
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <D3_setting.13>:
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6178      	str	r0, [r7, #20]
 8000698:	6139      	str	r1, [r7, #16]
 800069a:	60fa      	str	r2, [r7, #12]
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4664      	mov	r4, ip
 80006a0:	4663      	mov	r3, ip
 80006a2:	607b      	str	r3, [r7, #4]
	sendI2c(0x16, dB, adr); //db A_0
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	46a4      	mov	ip, r4
 80006ac:	0019      	movs	r1, r3
 80006ae:	2016      	movs	r0, #22
 80006b0:	f7ff fe62 	bl	8000378 <sendI2c.2>
	sendI2c(0x17, VOD, adr); // E4
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	46a4      	mov	ip, r4
 80006bc:	0019      	movs	r1, r3
 80006be:	2017      	movs	r0, #23
 80006c0:	f7ff fe5a 	bl	8000378 <sendI2c.2>
	sendI2c(0x18, dB_cont, adr);
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	46a4      	mov	ip, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	2018      	movs	r0, #24
 80006d0:	f7ff fe52 	bl	8000378 <sendI2c.2>
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b007      	add	sp, #28
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <E3_setting.14>:
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6178      	str	r0, [r7, #20]
 80006e4:	6139      	str	r1, [r7, #16]
 80006e6:	60fa      	str	r2, [r7, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4664      	mov	r4, ip
 80006ec:	4663      	mov	r3, ip
 80006ee:	607b      	str	r3, [r7, #4]
	sendI2c(0x1D, dB, adr); //db A_0
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	46a4      	mov	ip, r4
 80006f8:	0019      	movs	r1, r3
 80006fa:	201d      	movs	r0, #29
 80006fc:	f7ff fe3c 	bl	8000378 <sendI2c.2>
	sendI2c(0x1E, VOD, adr); // E4
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	b29a      	uxth	r2, r3
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	46a4      	mov	ip, r4
 8000708:	0019      	movs	r1, r3
 800070a:	201e      	movs	r0, #30
 800070c:	f7ff fe34 	bl	8000378 <sendI2c.2>
	sendI2c(0x1F, dB_cont, adr);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	b29a      	uxth	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	46a4      	mov	ip, r4
 8000718:	0019      	movs	r1, r3
 800071a:	201f      	movs	r0, #31
 800071c:	f7ff fe2c 	bl	8000378 <sendI2c.2>
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b007      	add	sp, #28
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <F3_setting.15>:
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6178      	str	r0, [r7, #20]
 8000730:	6139      	str	r1, [r7, #16]
 8000732:	60fa      	str	r2, [r7, #12]
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4664      	mov	r4, ip
 8000738:	4663      	mov	r3, ip
 800073a:	607b      	str	r3, [r7, #4]
	sendI2c(0x24, dB, adr); //db A_0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	b29a      	uxth	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	46a4      	mov	ip, r4
 8000744:	0019      	movs	r1, r3
 8000746:	2024      	movs	r0, #36	@ 0x24
 8000748:	f7ff fe16 	bl	8000378 <sendI2c.2>
	sendI2c(0x25, VOD, adr); // E4
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	b29a      	uxth	r2, r3
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	46a4      	mov	ip, r4
 8000754:	0019      	movs	r1, r3
 8000756:	2025      	movs	r0, #37	@ 0x25
 8000758:	f7ff fe0e 	bl	8000378 <sendI2c.2>
	sendI2c(0x26, dB_cont, adr);
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	b29a      	uxth	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	46a4      	mov	ip, r4
 8000764:	0019      	movs	r1, r3
 8000766:	2026      	movs	r0, #38	@ 0x26
 8000768:	f7ff fe06 	bl	8000378 <sendI2c.2>
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b007      	add	sp, #28
 8000772:	bd90      	pop	{r4, r7, pc}

08000774 <F2_setting.16>:
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6178      	str	r0, [r7, #20]
 800077c:	6139      	str	r1, [r7, #16]
 800077e:	60fa      	str	r2, [r7, #12]
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4664      	mov	r4, ip
 8000784:	4663      	mov	r3, ip
 8000786:	607b      	str	r3, [r7, #4]
	sendI2c(0x2C, dB, adr); //db A_0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	b29a      	uxth	r2, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	46a4      	mov	ip, r4
 8000790:	0019      	movs	r1, r3
 8000792:	202c      	movs	r0, #44	@ 0x2c
 8000794:	f7ff fdf0 	bl	8000378 <sendI2c.2>
	sendI2c(0x2D, VOD, adr); // E4
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	b29a      	uxth	r2, r3
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	46a4      	mov	ip, r4
 80007a0:	0019      	movs	r1, r3
 80007a2:	202d      	movs	r0, #45	@ 0x2d
 80007a4:	f7ff fde8 	bl	8000378 <sendI2c.2>
	sendI2c(0x2E, dB_cont, adr);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	46a4      	mov	ip, r4
 80007b0:	0019      	movs	r1, r3
 80007b2:	202e      	movs	r0, #46	@ 0x2e
 80007b4:	f7ff fde0 	bl	8000378 <sendI2c.2>
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b007      	add	sp, #28
 80007be:	bd90      	pop	{r4, r7, pc}

080007c0 <E2_setting.17>:
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6178      	str	r0, [r7, #20]
 80007c8:	6139      	str	r1, [r7, #16]
 80007ca:	60fa      	str	r2, [r7, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4664      	mov	r4, ip
 80007d0:	4663      	mov	r3, ip
 80007d2:	607b      	str	r3, [r7, #4]
	sendI2c(0x33, dB, adr); //db A_0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	46a4      	mov	ip, r4
 80007dc:	0019      	movs	r1, r3
 80007de:	2033      	movs	r0, #51	@ 0x33
 80007e0:	f7ff fdca 	bl	8000378 <sendI2c.2>
	sendI2c(0x34, VOD, adr); // E4
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	46a4      	mov	ip, r4
 80007ec:	0019      	movs	r1, r3
 80007ee:	2034      	movs	r0, #52	@ 0x34
 80007f0:	f7ff fdc2 	bl	8000378 <sendI2c.2>
	sendI2c(0x35, dB_cont, adr);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	46a4      	mov	ip, r4
 80007fc:	0019      	movs	r1, r3
 80007fe:	2035      	movs	r0, #53	@ 0x35
 8000800:	f7ff fdba 	bl	8000378 <sendI2c.2>
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b007      	add	sp, #28
 800080a:	bd90      	pop	{r4, r7, pc}

0800080c <D2_setting.18>:
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6178      	str	r0, [r7, #20]
 8000814:	6139      	str	r1, [r7, #16]
 8000816:	60fa      	str	r2, [r7, #12]
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4664      	mov	r4, ip
 800081c:	4663      	mov	r3, ip
 800081e:	607b      	str	r3, [r7, #4]
	sendI2c(0x3A, dB, adr); //db A_0
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	b29a      	uxth	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	46a4      	mov	ip, r4
 8000828:	0019      	movs	r1, r3
 800082a:	203a      	movs	r0, #58	@ 0x3a
 800082c:	f7ff fda4 	bl	8000378 <sendI2c.2>
	sendI2c(0x3B, VOD, adr); // E4
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	b29a      	uxth	r2, r3
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	46a4      	mov	ip, r4
 8000838:	0019      	movs	r1, r3
 800083a:	203b      	movs	r0, #59	@ 0x3b
 800083c:	f7ff fd9c 	bl	8000378 <sendI2c.2>
	sendI2c(0x3C, dB_cont, adr);
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	b29a      	uxth	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	46a4      	mov	ip, r4
 8000848:	0019      	movs	r1, r3
 800084a:	203c      	movs	r0, #60	@ 0x3c
 800084c:	f7ff fd94 	bl	8000378 <sendI2c.2>
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b007      	add	sp, #28
 8000856:	bd90      	pop	{r4, r7, pc}

08000858 <C2_setting.19>:
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6178      	str	r0, [r7, #20]
 8000860:	6139      	str	r1, [r7, #16]
 8000862:	60fa      	str	r2, [r7, #12]
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4664      	mov	r4, ip
 8000868:	4663      	mov	r3, ip
 800086a:	607b      	str	r3, [r7, #4]
	sendI2c(0x41, dB, adr); //db A_0
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	b29a      	uxth	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	46a4      	mov	ip, r4
 8000874:	0019      	movs	r1, r3
 8000876:	2041      	movs	r0, #65	@ 0x41
 8000878:	f7ff fd7e 	bl	8000378 <sendI2c.2>
	sendI2c(0x42, VOD, adr); // E4
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	b29a      	uxth	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	46a4      	mov	ip, r4
 8000884:	0019      	movs	r1, r3
 8000886:	2042      	movs	r0, #66	@ 0x42
 8000888:	f7ff fd76 	bl	8000378 <sendI2c.2>
	sendI2c(0x43, dB_cont, adr);
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	b29a      	uxth	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	46a4      	mov	ip, r4
 8000894:	0019      	movs	r1, r3
 8000896:	2043      	movs	r0, #67	@ 0x43
 8000898:	f7ff fd6e 	bl	8000378 <sendI2c.2>
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b007      	add	sp, #28
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <B2_setting.21>:
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6178      	str	r0, [r7, #20]
 80008ac:	6139      	str	r1, [r7, #16]
 80008ae:	60fa      	str	r2, [r7, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4664      	mov	r4, ip
 80008b4:	4663      	mov	r3, ip
 80008b6:	607b      	str	r3, [r7, #4]
	sendI2c(0x0F, dB, adr); //db A_0
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	46a4      	mov	ip, r4
 80008c0:	0019      	movs	r1, r3
 80008c2:	200f      	movs	r0, #15
 80008c4:	f7ff fd58 	bl	8000378 <sendI2c.2>
	sendI2c(0x10, VOD, adr); // E4
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	46a4      	mov	ip, r4
 80008d0:	0019      	movs	r1, r3
 80008d2:	2010      	movs	r0, #16
 80008d4:	f7ff fd50 	bl	8000378 <sendI2c.2>
	sendI2c(0x11, dB_cont, adr);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	46a4      	mov	ip, r4
 80008e0:	0019      	movs	r1, r3
 80008e2:	2011      	movs	r0, #17
 80008e4:	f7ff fd48 	bl	8000378 <sendI2c.2>
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b007      	add	sp, #28
 80008ee:	bd90      	pop	{r4, r7, pc}

080008f0 <A2_setting.22>:
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6178      	str	r0, [r7, #20]
 80008f8:	6139      	str	r1, [r7, #16]
 80008fa:	60fa      	str	r2, [r7, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4664      	mov	r4, ip
 8000900:	4663      	mov	r3, ip
 8000902:	607b      	str	r3, [r7, #4]
	sendI2c(0x16, dB, adr); //db A_0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	b29a      	uxth	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	46a4      	mov	ip, r4
 800090c:	0019      	movs	r1, r3
 800090e:	2016      	movs	r0, #22
 8000910:	f7ff fd32 	bl	8000378 <sendI2c.2>
	sendI2c(0x17, VOD, adr); // E4
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	b29a      	uxth	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	46a4      	mov	ip, r4
 800091c:	0019      	movs	r1, r3
 800091e:	2017      	movs	r0, #23
 8000920:	f7ff fd2a 	bl	8000378 <sendI2c.2>
	sendI2c(0x18, dB_cont, adr);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	b29a      	uxth	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	46a4      	mov	ip, r4
 800092c:	0019      	movs	r1, r3
 800092e:	2018      	movs	r0, #24
 8000930:	f7ff fd22 	bl	8000378 <sendI2c.2>
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b007      	add	sp, #28
 800093a:	bd90      	pop	{r4, r7, pc}

0800093c <F1_setting.23>:
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6178      	str	r0, [r7, #20]
 8000944:	6139      	str	r1, [r7, #16]
 8000946:	60fa      	str	r2, [r7, #12]
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4664      	mov	r4, ip
 800094c:	4663      	mov	r3, ip
 800094e:	607b      	str	r3, [r7, #4]
	sendI2c(0x1D, dB, adr); //db A_0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	b29a      	uxth	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	46a4      	mov	ip, r4
 8000958:	0019      	movs	r1, r3
 800095a:	201d      	movs	r0, #29
 800095c:	f7ff fd0c 	bl	8000378 <sendI2c.2>
	sendI2c(0x1E, VOD, adr); // E4
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	b29a      	uxth	r2, r3
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	46a4      	mov	ip, r4
 8000968:	0019      	movs	r1, r3
 800096a:	201e      	movs	r0, #30
 800096c:	f7ff fd04 	bl	8000378 <sendI2c.2>
	sendI2c(0x1F, dB_cont, adr);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	b29a      	uxth	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	46a4      	mov	ip, r4
 8000978:	0019      	movs	r1, r3
 800097a:	201f      	movs	r0, #31
 800097c:	f7ff fcfc 	bl	8000378 <sendI2c.2>
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b007      	add	sp, #28
 8000986:	bd90      	pop	{r4, r7, pc}

08000988 <E1_setting.24>:
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6178      	str	r0, [r7, #20]
 8000990:	6139      	str	r1, [r7, #16]
 8000992:	60fa      	str	r2, [r7, #12]
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4664      	mov	r4, ip
 8000998:	4663      	mov	r3, ip
 800099a:	607b      	str	r3, [r7, #4]
	sendI2c(0x24, dB, adr); //db A_0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	46a4      	mov	ip, r4
 80009a4:	0019      	movs	r1, r3
 80009a6:	2024      	movs	r0, #36	@ 0x24
 80009a8:	f7ff fce6 	bl	8000378 <sendI2c.2>
	sendI2c(0x25, VOD, adr); // E4
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	46a4      	mov	ip, r4
 80009b4:	0019      	movs	r1, r3
 80009b6:	2025      	movs	r0, #37	@ 0x25
 80009b8:	f7ff fcde 	bl	8000378 <sendI2c.2>
	sendI2c(0x26, dB_cont, adr);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	b29a      	uxth	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	46a4      	mov	ip, r4
 80009c4:	0019      	movs	r1, r3
 80009c6:	2026      	movs	r0, #38	@ 0x26
 80009c8:	f7ff fcd6 	bl	8000378 <sendI2c.2>
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b007      	add	sp, #28
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <D1_setting.25>:
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6178      	str	r0, [r7, #20]
 80009dc:	6139      	str	r1, [r7, #16]
 80009de:	60fa      	str	r2, [r7, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4664      	mov	r4, ip
 80009e4:	4663      	mov	r3, ip
 80009e6:	607b      	str	r3, [r7, #4]
	sendI2c(0x2C, dB, adr); //db A_0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	46a4      	mov	ip, r4
 80009f0:	0019      	movs	r1, r3
 80009f2:	202c      	movs	r0, #44	@ 0x2c
 80009f4:	f7ff fcc0 	bl	8000378 <sendI2c.2>
	sendI2c(0x2D, VOD, adr); // E4
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	46a4      	mov	ip, r4
 8000a00:	0019      	movs	r1, r3
 8000a02:	202d      	movs	r0, #45	@ 0x2d
 8000a04:	f7ff fcb8 	bl	8000378 <sendI2c.2>
	sendI2c(0x2E, dB_cont, adr);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	46a4      	mov	ip, r4
 8000a10:	0019      	movs	r1, r3
 8000a12:	202e      	movs	r0, #46	@ 0x2e
 8000a14:	f7ff fcb0 	bl	8000378 <sendI2c.2>
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b007      	add	sp, #28
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <C1_setting.26>:
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6178      	str	r0, [r7, #20]
 8000a28:	6139      	str	r1, [r7, #16]
 8000a2a:	60fa      	str	r2, [r7, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4664      	mov	r4, ip
 8000a30:	4663      	mov	r3, ip
 8000a32:	607b      	str	r3, [r7, #4]
	sendI2c(0x33, dB, adr); //db A_0
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	46a4      	mov	ip, r4
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	2033      	movs	r0, #51	@ 0x33
 8000a40:	f7ff fc9a 	bl	8000378 <sendI2c.2>
	sendI2c(0x34, VOD, adr); // E4
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	46a4      	mov	ip, r4
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	2034      	movs	r0, #52	@ 0x34
 8000a50:	f7ff fc92 	bl	8000378 <sendI2c.2>
	sendI2c(0x35, dB_cont, adr);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	46a4      	mov	ip, r4
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	2035      	movs	r0, #53	@ 0x35
 8000a60:	f7ff fc8a 	bl	8000378 <sendI2c.2>
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b007      	add	sp, #28
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <B1_setting.27>:
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6178      	str	r0, [r7, #20]
 8000a74:	6139      	str	r1, [r7, #16]
 8000a76:	60fa      	str	r2, [r7, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4664      	mov	r4, ip
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	607b      	str	r3, [r7, #4]
	sendI2c(0x3A, dB, adr); //db A_0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	46a4      	mov	ip, r4
 8000a88:	0019      	movs	r1, r3
 8000a8a:	203a      	movs	r0, #58	@ 0x3a
 8000a8c:	f7ff fc74 	bl	8000378 <sendI2c.2>
	sendI2c(0x3B, VOD, adr); // E4
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	46a4      	mov	ip, r4
 8000a98:	0019      	movs	r1, r3
 8000a9a:	203b      	movs	r0, #59	@ 0x3b
 8000a9c:	f7ff fc6c 	bl	8000378 <sendI2c.2>
	sendI2c(0x3C, dB_cont, adr);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	46a4      	mov	ip, r4
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	203c      	movs	r0, #60	@ 0x3c
 8000aac:	f7ff fc64 	bl	8000378 <sendI2c.2>
}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b007      	add	sp, #28
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <A1_setting.28>:
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6178      	str	r0, [r7, #20]
 8000ac0:	6139      	str	r1, [r7, #16]
 8000ac2:	60fa      	str	r2, [r7, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4664      	mov	r4, ip
 8000ac8:	4663      	mov	r3, ip
 8000aca:	607b      	str	r3, [r7, #4]
	sendI2c(0x41, dB, adr); //db A_0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	46a4      	mov	ip, r4
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	2041      	movs	r0, #65	@ 0x41
 8000ad8:	f7ff fc4e 	bl	8000378 <sendI2c.2>
	sendI2c(0x42, VOD, adr); // E4
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	46a4      	mov	ip, r4
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	2042      	movs	r0, #66	@ 0x42
 8000ae8:	f7ff fc46 	bl	8000378 <sendI2c.2>
	sendI2c(0x43, dB_cont, adr);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	46a4      	mov	ip, r4
 8000af4:	0019      	movs	r1, r3
 8000af6:	2043      	movs	r0, #67	@ 0x43
 8000af8:	f7ff fc3e 	bl	8000378 <sendI2c.2>
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b007      	add	sp, #28
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <redriver_init_1.1>:
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	801a      	strh	r2, [r3, #0]
 8000b10:	4664      	mov	r4, ip
 8000b12:	4663      	mov	r3, ip
 8000b14:	603b      	str	r3, [r7, #0]
	sendI2c(0x06, 0x18, adr_rep); // Channel initialization
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	46a4      	mov	ip, r4
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2118      	movs	r1, #24
 8000b20:	2006      	movs	r0, #6
 8000b22:	f7ff fc29 	bl	8000378 <sendI2c.2>
	A4_setting(0x02, 0xAF, 0x80, adr_rep); //A4     dB, VOD/VID, Attenuation	//F4
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	46a4      	mov	ip, r4
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	21af      	movs	r1, #175	@ 0xaf
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff fc57 	bl	80003e4 <A4_setting.3>
	B4_setting(0x02, 0xAF, 0x80, adr_rep); //B4     dB, VOD/VID, Attenuation	//F3
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	46a4      	mov	ip, r4
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	21af      	movs	r1, #175	@ 0xaf
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff fc75 	bl	8000430 <B4_setting.4>
	C4_setting(0x02, 0xAF, 0x80, adr_rep); //C4     dB, VOD/VID, Attenuation	//F2
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	46a4      	mov	ip, r4
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	21af      	movs	r1, #175	@ 0xaf
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff fc93 	bl	800047c <C4_setting.5>
	D4_setting(0x03, 0xAF, 0xE0, adr_rep); //D4     dB, VOD/VID, Attenuation	//F1
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	46a4      	mov	ip, r4
 8000b5c:	22e0      	movs	r2, #224	@ 0xe0
 8000b5e:	21af      	movs	r1, #175	@ 0xaf
 8000b60:	2003      	movs	r0, #3
 8000b62:	f7ff fcb1 	bl	80004c8 <D4_setting.6>
	E4_setting(0x03, 0xAF, 0x80, adr_rep); //E4     dB, VOD/VID, Attenuation	//E4
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	46a4      	mov	ip, r4
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	21af      	movs	r1, #175	@ 0xaf
 8000b70:	2003      	movs	r0, #3
 8000b72:	f7ff fccf 	bl	8000514 <E4_setting.7>
	F4_setting(0x03, 0xAF, 0x80, adr_rep); //F4     dB, VOD/VID, Attenuation	//E3
 8000b76:	1dbb      	adds	r3, r7, #6
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	21af      	movs	r1, #175	@ 0xaf
 8000b80:	2003      	movs	r0, #3
 8000b82:	f7ff fced 	bl	8000560 <F4_setting.8>
	A3_setting(0x03, 0xAE, 0x80, adr_rep); //A3     dB, VOD/VID, Attenuation	//E2
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	46a4      	mov	ip, r4
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	21ae      	movs	r1, #174	@ 0xae
 8000b90:	2003      	movs	r0, #3
 8000b92:	f7ff fd0b 	bl	80005ac <A3_setting.9>
	B3_setting(0x02, 0xAF, 0x80, adr_rep); //B3     dB, VOD/VID, Attenuation	//E1
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	46a4      	mov	ip, r4
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	21af      	movs	r1, #175	@ 0xaf
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fd29 	bl	80005f8 <B3_setting.10>
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b003      	add	sp, #12
 8000bac:	bd90      	pop	{r4, r7, pc}

08000bae <redriver_init_2.11>:
{
 8000bae:	b590      	push	{r4, r7, lr}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	801a      	strh	r2, [r3, #0]
 8000bba:	4664      	mov	r4, ip
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	603b      	str	r3, [r7, #0]
	sendI2c(0x06, 0x18, adr_rep); // Channel initialization
 8000bc0:	1dbb      	adds	r3, r7, #6
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	46a4      	mov	ip, r4
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2118      	movs	r1, #24
 8000bca:	2006      	movs	r0, #6
 8000bcc:	f7ff fbd4 	bl	8000378 <sendI2c.2>
	C3_setting(0x02,  0xAF, 0x80, adr_rep); //C3     dB, VOD/VID, Attenuation	//D1
 8000bd0:	1dbb      	adds	r3, r7, #6
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	46a4      	mov	ip, r4
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	21af      	movs	r1, #175	@ 0xaf
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff fd32 	bl	8000644 <C3_setting.12>
	D3_setting(0x03, 0xAF, 0xE0, adr_rep); //D3     dB, VOD/VID, Attenuation	//D2
 8000be0:	1dbb      	adds	r3, r7, #6
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	46a4      	mov	ip, r4
 8000be6:	22e0      	movs	r2, #224	@ 0xe0
 8000be8:	21af      	movs	r1, #175	@ 0xaf
 8000bea:	2003      	movs	r0, #3
 8000bec:	f7ff fd50 	bl	8000690 <D3_setting.13>
	E3_setting(0x03, 0xAF, 0x80, adr_rep); //E3     dB, VOD/VID, Attenuation	//D3
 8000bf0:	1dbb      	adds	r3, r7, #6
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	46a4      	mov	ip, r4
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	21af      	movs	r1, #175	@ 0xaf
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f7ff fd6e 	bl	80006dc <E3_setting.14>
	F3_setting(0x03, 0xAF, 0xE0, adr_rep); //F3     dB, VOD/VID, Attenuation	//D4
 8000c00:	1dbb      	adds	r3, r7, #6
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	46a4      	mov	ip, r4
 8000c06:	22e0      	movs	r2, #224	@ 0xe0
 8000c08:	21af      	movs	r1, #175	@ 0xaf
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f7ff fd8c 	bl	8000728 <F3_setting.15>
	F2_setting(0x03, 0xAF, 0xE0, adr_rep); //F2     dB, VOD/VID, Attenuation	//C4
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	46a4      	mov	ip, r4
 8000c16:	22e0      	movs	r2, #224	@ 0xe0
 8000c18:	21af      	movs	r1, #175	@ 0xaf
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f7ff fdaa 	bl	8000774 <F2_setting.16>
	E2_setting(0x03, 0xAF, 0x80, adr_rep); //E2     dB, VOD/VID, Attenuation	//C3
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	46a4      	mov	ip, r4
 8000c26:	2280      	movs	r2, #128	@ 0x80
 8000c28:	21af      	movs	r1, #175	@ 0xaf
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f7ff fdc8 	bl	80007c0 <E2_setting.17>
	D2_setting(0x02, 0xAF, 0x80, adr_rep); //D2     dB, VOD/VID, Attenuation	//C2
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	46a4      	mov	ip, r4
 8000c36:	2280      	movs	r2, #128	@ 0x80
 8000c38:	21af      	movs	r1, #175	@ 0xaf
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff fde6 	bl	800080c <D2_setting.18>
	C2_setting(0x01, 0xAF, 0x80, adr_rep); //C2     dB, VOD/VID, Attenuation	//C1
 8000c40:	1dbb      	adds	r3, r7, #6
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	46a4      	mov	ip, r4
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	21af      	movs	r1, #175	@ 0xaf
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fe04 	bl	8000858 <C2_setting.19>
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b003      	add	sp, #12
 8000c56:	bd90      	pop	{r4, r7, pc}

08000c58 <redriver_init_3.20>:
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	1dbb      	adds	r3, r7, #6
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	4664      	mov	r4, ip
 8000c66:	4663      	mov	r3, ip
 8000c68:	603b      	str	r3, [r7, #0]
	sendI2c(0x06, 0x18, adr_rep); // Channel initialization
 8000c6a:	1dbb      	adds	r3, r7, #6
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	46a4      	mov	ip, r4
 8000c70:	001a      	movs	r2, r3
 8000c72:	2118      	movs	r1, #24
 8000c74:	2006      	movs	r0, #6
 8000c76:	f7ff fb7f 	bl	8000378 <sendI2c.2>
	B2_setting(0x02, 0xAF, 0x80, adr_rep); //B2     dB, VOD/VID, Attenuation	//B4
 8000c7a:	1dbb      	adds	r3, r7, #6
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	46a4      	mov	ip, r4
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	21af      	movs	r1, #175	@ 0xaf
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fe0d 	bl	80008a4 <B2_setting.21>
	A2_setting(0x00, 0xAF, 0xE0, adr_rep); //A2     dB, VOD/VID, Attenuation	//B3
 8000c8a:	1dbb      	adds	r3, r7, #6
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	46a4      	mov	ip, r4
 8000c90:	22e0      	movs	r2, #224	@ 0xe0
 8000c92:	21af      	movs	r1, #175	@ 0xaf
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fe2b 	bl	80008f0 <A2_setting.22>
	F1_setting(0x03, 0xAF, 0xE0, adr_rep); //F1     dB, VOD/VID, Attenuation	//B2
 8000c9a:	1dbb      	adds	r3, r7, #6
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	46a4      	mov	ip, r4
 8000ca0:	22e0      	movs	r2, #224	@ 0xe0
 8000ca2:	21af      	movs	r1, #175	@ 0xaf
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f7ff fe49 	bl	800093c <F1_setting.23>
	E1_setting(0x03, 0xAF, 0xA0, adr_rep); //E1     dB, VOD/VID, Attenuation	//B1
 8000caa:	1dbb      	adds	r3, r7, #6
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	46a4      	mov	ip, r4
 8000cb0:	22a0      	movs	r2, #160	@ 0xa0
 8000cb2:	21af      	movs	r1, #175	@ 0xaf
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fe67 	bl	8000988 <E1_setting.24>
	D1_setting(0x02, 0xAF, 0xE0, adr_rep); //D1     dB, VOD/VID, Attenuation	//A4
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	46a4      	mov	ip, r4
 8000cc0:	22e0      	movs	r2, #224	@ 0xe0
 8000cc2:	21af      	movs	r1, #175	@ 0xaf
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff fe85 	bl	80009d4 <D1_setting.25>
	C1_setting(0x01, 0xAF, 0x80, adr_rep); //C1     dB, VOD/VID, Attenuation	//A3
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	46a4      	mov	ip, r4
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	21af      	movs	r1, #175	@ 0xaf
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fea3 	bl	8000a20 <C1_setting.26>
	B1_setting(0x01, 0xAF, 0xE0, adr_rep); //B1     dB, VOD/VID, Attenuation	//A2
 8000cda:	1dbb      	adds	r3, r7, #6
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	46a4      	mov	ip, r4
 8000ce0:	22e0      	movs	r2, #224	@ 0xe0
 8000ce2:	21af      	movs	r1, #175	@ 0xaf
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fec1 	bl	8000a6c <B1_setting.27>
	A1_setting(0x00, 0xAE, 0xE0, adr_rep); //A1     dB, VOD/VID, Attenuation	//A1
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	46a4      	mov	ip, r4
 8000cf0:	22e0      	movs	r2, #224	@ 0xe0
 8000cf2:	21ae      	movs	r1, #174	@ 0xae
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fedf 	bl	8000ab8 <A1_setting.28>
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b003      	add	sp, #12
 8000d00:	bd90      	pop	{r4, r7, pc}

08000d02 <redriver_init_other1.29>:
{
 8000d02:	b590      	push	{r4, r7, lr}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	0002      	movs	r2, r0
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	801a      	strh	r2, [r3, #0]
 8000d0e:	4664      	mov	r4, ip
 8000d10:	4663      	mov	r3, ip
 8000d12:	603b      	str	r3, [r7, #0]
	sendI2c(0x06, 0x18, adr_rep); // Channel initialization
 8000d14:	1dbb      	adds	r3, r7, #6
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	46a4      	mov	ip, r4
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	2118      	movs	r1, #24
 8000d1e:	2006      	movs	r0, #6
 8000d20:	f7ff fb2a 	bl	8000378 <sendI2c.2>
	A4_setting(0x01, 0xAF, 0x80, adr_rep); //A4     dB, VOD/VID, Attenuation	//F4
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	46a4      	mov	ip, r4
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	21af      	movs	r1, #175	@ 0xaf
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fb58 	bl	80003e4 <A4_setting.3>
	B4_setting(0x02, 0xAF, 0x80, adr_rep); //B4     dB, VOD/VID, Attenuation	//F3
 8000d34:	1dbb      	adds	r3, r7, #6
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	46a4      	mov	ip, r4
 8000d3a:	2280      	movs	r2, #128	@ 0x80
 8000d3c:	21af      	movs	r1, #175	@ 0xaf
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fb76 	bl	8000430 <B4_setting.4>
	C4_setting(0x02, 0xAF, 0x80, adr_rep); //C4     dB, VOD/VID, Attenuation	//F2
 8000d44:	1dbb      	adds	r3, r7, #6
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	46a4      	mov	ip, r4
 8000d4a:	2280      	movs	r2, #128	@ 0x80
 8000d4c:	21af      	movs	r1, #175	@ 0xaf
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff fb94 	bl	800047c <C4_setting.5>
	D4_setting(0x02, 0xAF, 0xE0, adr_rep); //D4     dB, VOD/VID, Attenuation	//F1
 8000d54:	1dbb      	adds	r3, r7, #6
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	46a4      	mov	ip, r4
 8000d5a:	22e0      	movs	r2, #224	@ 0xe0
 8000d5c:	21af      	movs	r1, #175	@ 0xaf
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f7ff fbb2 	bl	80004c8 <D4_setting.6>
	E4_setting(0x03, 0xAF, 0x84, adr_rep); //E4     dB, VOD/VID, Attenuation	//E4
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	46a4      	mov	ip, r4
 8000d6a:	2284      	movs	r2, #132	@ 0x84
 8000d6c:	21af      	movs	r1, #175	@ 0xaf
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f7ff fbd0 	bl	8000514 <E4_setting.7>
	F4_setting(0x02, 0xAF, 0x84, adr_rep); //F4     dB, VOD/VID, Attenuation	//E3
 8000d74:	1dbb      	adds	r3, r7, #6
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	46a4      	mov	ip, r4
 8000d7a:	2284      	movs	r2, #132	@ 0x84
 8000d7c:	21af      	movs	r1, #175	@ 0xaf
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fbee 	bl	8000560 <F4_setting.8>
	A3_setting(0x00, 0xAE, 0x80, adr_rep); //A3     dB, VOD/VID, Attenuation	//E2
 8000d84:	1dbb      	adds	r3, r7, #6
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	46a4      	mov	ip, r4
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	21ae      	movs	r1, #174	@ 0xae
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fc0c 	bl	80005ac <A3_setting.9>
	B3_setting(0x02, 0xAB, 0x82, adr_rep); //B3     dB, VOD/VID, Attenuation	//E1
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	46a4      	mov	ip, r4
 8000d9a:	2282      	movs	r2, #130	@ 0x82
 8000d9c:	21ab      	movs	r1, #171	@ 0xab
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f7ff fc2a 	bl	80005f8 <B3_setting.10>
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}

08000dac <redriver_init_other2.30>:
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	801a      	strh	r2, [r3, #0]
 8000db8:	4664      	mov	r4, ip
 8000dba:	4663      	mov	r3, ip
 8000dbc:	603b      	str	r3, [r7, #0]
	sendI2c(0x06, 0x18, adr_rep); // Channel initialization
 8000dbe:	1dbb      	adds	r3, r7, #6
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	46a4      	mov	ip, r4
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2118      	movs	r1, #24
 8000dc8:	2006      	movs	r0, #6
 8000dca:	f7ff fad5 	bl	8000378 <sendI2c.2>
	C3_setting(0x02, 0xAD, 0x83, adr_rep); //C3     dB, VOD/VID, Attenuation	//D1
 8000dce:	1dbb      	adds	r3, r7, #6
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	46a4      	mov	ip, r4
 8000dd4:	2283      	movs	r2, #131	@ 0x83
 8000dd6:	21ad      	movs	r1, #173	@ 0xad
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fc33 	bl	8000644 <C3_setting.12>
	D3_setting(0x02, 0xAD, 0x83, adr_rep); //D3     dB, VOD/VID, Attenuation	//D2
 8000dde:	1dbb      	adds	r3, r7, #6
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	46a4      	mov	ip, r4
 8000de4:	2283      	movs	r2, #131	@ 0x83
 8000de6:	21ad      	movs	r1, #173	@ 0xad
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff fc51 	bl	8000690 <D3_setting.13>
	E3_setting(0x02, 0xAE, 0x82, adr_rep); //E3     dB, VOD/VID, Attenuation	//D3
 8000dee:	1dbb      	adds	r3, r7, #6
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	46a4      	mov	ip, r4
 8000df4:	2282      	movs	r2, #130	@ 0x82
 8000df6:	21ae      	movs	r1, #174	@ 0xae
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f7ff fc6f 	bl	80006dc <E3_setting.14>
	F3_setting(0x03, 0xAA, 0xE3,  adr_rep); //F3     dB, VOD/VID, Attenuation	//D4
 8000dfe:	1dbb      	adds	r3, r7, #6
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	46a4      	mov	ip, r4
 8000e04:	22e3      	movs	r2, #227	@ 0xe3
 8000e06:	21aa      	movs	r1, #170	@ 0xaa
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f7ff fc8d 	bl	8000728 <F3_setting.15>
	F2_setting(0x02, 0xAF, 0xE4, adr_rep); //F2     dB, VOD/VID, Attenuation	//C4
 8000e0e:	1dbb      	adds	r3, r7, #6
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	46a4      	mov	ip, r4
 8000e14:	22e4      	movs	r2, #228	@ 0xe4
 8000e16:	21af      	movs	r1, #175	@ 0xaf
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff fcab 	bl	8000774 <F2_setting.16>
	E2_setting(0x02, 0xAE, 0x82, adr_rep); //E2     dB, VOD/VID, Attenuation	//C3
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	46a4      	mov	ip, r4
 8000e24:	2282      	movs	r2, #130	@ 0x82
 8000e26:	21ae      	movs	r1, #174	@ 0xae
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff fcc9 	bl	80007c0 <E2_setting.17>
	D2_setting(0x01, 0xA9, 0x82, adr_rep); //D2     dB, VOD/VID, Attenuation	//C2
 8000e2e:	1dbb      	adds	r3, r7, #6
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	46a4      	mov	ip, r4
 8000e34:	2282      	movs	r2, #130	@ 0x82
 8000e36:	21a9      	movs	r1, #169	@ 0xa9
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fce7 	bl	800080c <D2_setting.18>
	C2_setting(0x02, 0xAE, 0x83, adr_rep); //C2     dB, VOD/VID, Attenuation	//C1
 8000e3e:	1dbb      	adds	r3, r7, #6
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	46a4      	mov	ip, r4
 8000e44:	2283      	movs	r2, #131	@ 0x83
 8000e46:	21ae      	movs	r1, #174	@ 0xae
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fd05 	bl	8000858 <C2_setting.19>
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b003      	add	sp, #12
 8000e54:	bd90      	pop	{r4, r7, pc}

08000e56 <redriver_init_other3.31>:
{
 8000e56:	b590      	push	{r4, r7, lr}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	1dbb      	adds	r3, r7, #6
 8000e60:	801a      	strh	r2, [r3, #0]
 8000e62:	4664      	mov	r4, ip
 8000e64:	4663      	mov	r3, ip
 8000e66:	603b      	str	r3, [r7, #0]
	sendI2c(0x06, 0x18, adr_rep); // Channel initialization
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	46a4      	mov	ip, r4
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2118      	movs	r1, #24
 8000e72:	2006      	movs	r0, #6
 8000e74:	f7ff fa80 	bl	8000378 <sendI2c.2>
	B2_setting(0x01, 0xAD, 0x83, adr_rep); //B2     dB, VOD/VID, Attenuation	//B4
 8000e78:	1dbb      	adds	r3, r7, #6
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	46a4      	mov	ip, r4
 8000e7e:	2283      	movs	r2, #131	@ 0x83
 8000e80:	21ad      	movs	r1, #173	@ 0xad
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff fd0e 	bl	80008a4 <B2_setting.21>
	A2_setting(0x01, 0xA8, 0x80, adr_rep); //A2     dB, VOD/VID, Attenuation	//B3
 8000e88:	1dbb      	adds	r3, r7, #6
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	46a4      	mov	ip, r4
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	21a8      	movs	r1, #168	@ 0xa8
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fd2c 	bl	80008f0 <A2_setting.22>
	F1_setting(0x02, 0xAF, 0xE4, adr_rep); //F1     dB, VOD/VID, Attenuation	//B2
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	46a4      	mov	ip, r4
 8000e9e:	22e4      	movs	r2, #228	@ 0xe4
 8000ea0:	21af      	movs	r1, #175	@ 0xaf
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f7ff fd4a 	bl	800093c <F1_setting.23>
	E1_setting(0x02, 0xAF, 0x84, adr_rep); //E1     dB, VOD/VID, Attenuation	//B1
 8000ea8:	1dbb      	adds	r3, r7, #6
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	46a4      	mov	ip, r4
 8000eae:	2284      	movs	r2, #132	@ 0x84
 8000eb0:	21af      	movs	r1, #175	@ 0xaf
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff fd68 	bl	8000988 <E1_setting.24>
	D1_setting(0x01, 0xAF, 0x80, adr_rep); //D1     dB, VOD/VID, Attenuation	//A4
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	46a4      	mov	ip, r4
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	21af      	movs	r1, #175	@ 0xaf
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff fd86 	bl	80009d4 <D1_setting.25>
	C1_setting(0x00, 0xAF, 0x80, adr_rep); //C1     dB, VOD/VID, Attenuation	//A3
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	46a4      	mov	ip, r4
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	21af      	movs	r1, #175	@ 0xaf
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fda4 	bl	8000a20 <C1_setting.26>
	B1_setting(0x00, 0xAF, 0x82, adr_rep); //B1     dB, VOD/VID, Attenuation	//A2
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	46a4      	mov	ip, r4
 8000ede:	2282      	movs	r2, #130	@ 0x82
 8000ee0:	21af      	movs	r1, #175	@ 0xaf
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fdc2 	bl	8000a6c <B1_setting.27>
	A1_setting(0x00, 0xAE, 0x80, adr_rep); //A1     dB, VOD/VID, Attenuation	//A1
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	46a4      	mov	ip, r4
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	21ae      	movs	r1, #174	@ 0xae
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fde0 	bl	8000ab8 <A1_setting.28>
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b003      	add	sp, #12
 8000efe:	bd90      	pop	{r4, r7, pc}

08000f00 <Redriver_Init.0>:
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4664      	mov	r4, ip
 8000f08:	4663      	mov	r3, ip
 8000f0a:	607b      	str	r3, [r7, #4]
	redriver_init_1 (Repeater1_RX); //Зашиваем 1 редрайвер на прием
 8000f0c:	46a4      	mov	ip, r4
 8000f0e:	2059      	movs	r0, #89	@ 0x59
 8000f10:	f7ff fdf8 	bl	8000b04 <redriver_init_1.1>
    HAL_Delay(5);
 8000f14:	2005      	movs	r0, #5
 8000f16:	f001 f857 	bl	8001fc8 <HAL_Delay>
    redriver_init_2 (Repeater2_RX);
 8000f1a:	46a4      	mov	ip, r4
 8000f1c:	205b      	movs	r0, #91	@ 0x5b
 8000f1e:	f7ff fe46 	bl	8000bae <redriver_init_2.11>
    HAL_Delay(5);
 8000f22:	2005      	movs	r0, #5
 8000f24:	f001 f850 	bl	8001fc8 <HAL_Delay>
    redriver_init_3 (Repeater3_RX);
 8000f28:	46a4      	mov	ip, r4
 8000f2a:	205f      	movs	r0, #95	@ 0x5f
 8000f2c:	f7ff fe94 	bl	8000c58 <redriver_init_3.20>
    HAL_Delay(10);
 8000f30:	200a      	movs	r0, #10
 8000f32:	f001 f849 	bl	8001fc8 <HAL_Delay>
    redriver_init_other1 (Repeater1_TX); //Зашиваем 1 редрайвер на передачу
 8000f36:	46a4      	mov	ip, r4
 8000f38:	205e      	movs	r0, #94	@ 0x5e
 8000f3a:	f7ff fee2 	bl	8000d02 <redriver_init_other1.29>
    HAL_Delay(5);
 8000f3e:	2005      	movs	r0, #5
 8000f40:	f001 f842 	bl	8001fc8 <HAL_Delay>
    redriver_init_other2 (Repeater2_TX); //2
 8000f44:	46a4      	mov	ip, r4
 8000f46:	2066      	movs	r0, #102	@ 0x66
 8000f48:	f7ff ff30 	bl	8000dac <redriver_init_other2.30>
    HAL_Delay(5);
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f001 f83b 	bl	8001fc8 <HAL_Delay>
    redriver_init_other3 (Repeater3_TX); //3
 8000f52:	46a4      	mov	ip, r4
 8000f54:	2060      	movs	r0, #96	@ 0x60
 8000f56:	f7ff ff7e 	bl	8000e56 <redriver_init_other3.31>
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b003      	add	sp, #12
 8000f60:	bd90      	pop	{r4, r7, pc}
	...

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f000 ffa8 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f824 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 f9f0 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f74:	f000 f9c8 	bl	8001308 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f78:	f000 f896 	bl	80010a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f7c:	f000 f8d6 	bl	800112c <MX_I2C2_Init>
  configred();
 8000f80:	f7ff fa22 	bl	80003c8 <configred>

  MX_TIM2_Init();
 8000f84:	f000 f914 	bl	80011b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f88:	f000 f968 	bl	800125c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f8c:	f000 f86e 	bl	800106c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



	configred();
 8000f90:	f7ff fa1a 	bl	80003c8 <configred>

	HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	@ 0x64
 8000f96:	f001 f817 	bl	8001fc8 <HAL_Delay>
	// Включаем прерывания для I2C
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000f9a:	2017      	movs	r0, #23
 8000f9c:	f001 f8f9 	bl	8002192 <HAL_NVIC_EnableIRQ>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_I2C_Slave_Transmit(&hi2c1, disk_status, 6, HAL_MAX_DELAY);
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	4902      	ldr	r1, [pc, #8]	@ (8000fb0 <main+0x4c>)
 8000fa6:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <main+0x50>)
 8000fa8:	2206      	movs	r2, #6
 8000faa:	f001 fe21 	bl	8002bf0 <HAL_I2C_Slave_Transmit>
 8000fae:	e7f7      	b.n	8000fa0 <main+0x3c>
 8000fb0:	20000224 	.word	0x20000224
 8000fb4:	2000002c 	.word	0x2000002c

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b093      	sub	sp, #76	@ 0x4c
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	2410      	movs	r4, #16
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2338      	movs	r3, #56	@ 0x38
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f003 fd49 	bl	8004a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fce:	003b      	movs	r3, r7
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f003 fd42 	bl	8004a60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f002 fa2d 	bl	8003440 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	193b      	adds	r3, r7, r4
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	0252      	lsls	r2, r2, #9
 8000ff2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff4:	0021      	movs	r1, r4
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2203      	movs	r2, #3
 8001000:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2210      	movs	r2, #16
 800100c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2280      	movs	r2, #128	@ 0x80
 8001012:	0292      	lsls	r2, r2, #10
 8001014:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	22c0      	movs	r2, #192	@ 0xc0
 800101a:	04d2      	lsls	r2, r2, #19
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	0592      	lsls	r2, r2, #22
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	187b      	adds	r3, r7, r1
 8001028:	0018      	movs	r0, r3
 800102a:	f002 fa49 	bl	80034c0 <HAL_RCC_OscConfig>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001032:	f000 fd2b 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	003b      	movs	r3, r7
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	003b      	movs	r3, r7
 800103e:	2202      	movs	r2, #2
 8001040:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	003b      	movs	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001048:	003b      	movs	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104e:	003b      	movs	r3, r7
 8001050:	2102      	movs	r1, #2
 8001052:	0018      	movs	r0, r3
 8001054:	f002 fd4e 	bl	8003af4 <HAL_RCC_ClockConfig>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800105c:	f000 fd16 	bl	8001a8c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001060:	f002 fed2 	bl	8003e08 <HAL_RCC_EnableCSS>
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b013      	add	sp, #76	@ 0x4c
 800106a:	bd90      	pop	{r4, r7, pc}

0800106c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2005      	movs	r0, #5
 8001076:	f001 f877 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800107a:	2005      	movs	r0, #5
 800107c:	f001 f889 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2006      	movs	r0, #6
 8001086:	f001 f86f 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800108a:	2006      	movs	r0, #6
 800108c:	f001 f881 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2007      	movs	r0, #7
 8001096:	f001 f867 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800109a:	2007      	movs	r0, #7
 800109c:	f001 f879 	bl	8002192 <HAL_NVIC_EnableIRQ>
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <MX_I2C1_Init+0x7c>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12469;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <MX_I2C1_Init+0x80>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 72;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010ba:	2248      	movs	r2, #72	@ 0x48
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010dc:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f001 fbb3 	bl	8002850 <HAL_I2C_Init>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ee:	f000 fccd 	bl	8001a8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	015a      	lsls	r2, r3, #5
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_I2C1_Init+0x78>)
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 f908 	bl	8003310 <HAL_I2CEx_ConfigAnalogFilter>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001104:	f000 fcc2 	bl	8001a8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <MX_I2C1_Init+0x78>)
 800110a:	2100      	movs	r1, #0
 800110c:	0018      	movs	r0, r3
 800110e:	f002 f94b 	bl	80033a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8001116:	f000 fcb9 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000002c 	.word	0x2000002c
 8001124:	40005400 	.word	0x40005400
 8001128:	00c12469 	.word	0x00c12469

0800112c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_I2C2_Init+0x78>)
 8001132:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <MX_I2C2_Init+0x7c>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C12166;
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_I2C2_Init+0x78>)
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <MX_I2C2_Init+0x80>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_I2C2_Init+0x78>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_I2C2_Init+0x78>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_I2C2_Init+0x78>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_I2C2_Init+0x78>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <MX_I2C2_Init+0x78>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_I2C2_Init+0x78>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001160:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_I2C2_Init+0x78>)
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	0292      	lsls	r2, r2, #10
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_I2C2_Init+0x78>)
 800116a:	0018      	movs	r0, r3
 800116c:	f001 fb70 	bl	8002850 <HAL_I2C_Init>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 fc8a 	bl	8001a8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_I2C2_Init+0x78>)
 800117a:	2100      	movs	r1, #0
 800117c:	0018      	movs	r0, r3
 800117e:	f002 f8c7 	bl	8003310 <HAL_I2CEx_ConfigAnalogFilter>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001186:	f000 fc81 	bl	8001a8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_I2C2_Init+0x78>)
 800118c:	2100      	movs	r1, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f002 f90a 	bl	80033a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 fc78 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	20000080 	.word	0x20000080
 80011a8:	40005800 	.word	0x40005800
 80011ac:	00c12166 	.word	0x00c12166

080011b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	2310      	movs	r3, #16
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	0018      	movs	r0, r3
 80011bc:	2310      	movs	r3, #16
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f003 fc4d 	bl	8004a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	0018      	movs	r0, r3
 80011ca:	230c      	movs	r3, #12
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f003 fc46 	bl	8004a60 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	05d2      	lsls	r2, r2, #23
 80011da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011de:	4a1d      	ldr	r2, [pc, #116]	@ (8001254 <MX_TIM2_Init+0xa4>)
 80011e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <MX_TIM2_Init+0xa8>)
 80011ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_TIM2_Init+0xa0>)
 80011fc:	0018      	movs	r0, r3
 80011fe:	f002 fff3 	bl	80041e8 <HAL_TIM_Base_Init>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001206:	f000 fc41 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	2110      	movs	r1, #16
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2280      	movs	r2, #128	@ 0x80
 8001210:	0152      	lsls	r2, r2, #5
 8001212:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001214:	187a      	adds	r2, r7, r1
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_TIM2_Init+0xa0>)
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f003 f972 	bl	8004504 <HAL_TIM_ConfigClockSource>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001224:	f000 fc32 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001234:	1d3a      	adds	r2, r7, #4
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_TIM2_Init+0xa0>)
 8001238:	0011      	movs	r1, r2
 800123a:	0018      	movs	r0, r3
 800123c:	f003 fb8a 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001244:	f000 fc22 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b008      	add	sp, #32
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000018c 	.word	0x2000018c
 8001254:	000003e7 	.word	0x000003e7
 8001258:	0000f9ff 	.word	0x0000f9ff

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	2310      	movs	r3, #16
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	0018      	movs	r0, r3
 8001268:	2310      	movs	r3, #16
 800126a:	001a      	movs	r2, r3
 800126c:	2100      	movs	r1, #0
 800126e:	f003 fbf7 	bl	8004a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	0018      	movs	r0, r3
 8001276:	230c      	movs	r3, #12
 8001278:	001a      	movs	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	f003 fbf0 	bl	8004a60 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_TIM3_Init+0xa0>)
 8001282:	4a1f      	ldr	r2, [pc, #124]	@ (8001300 <MX_TIM3_Init+0xa4>)
 8001284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 499;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_TIM3_Init+0xa0>)
 8001288:	22f4      	movs	r2, #244	@ 0xf4
 800128a:	32ff      	adds	r2, #255	@ 0xff
 800128c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_TIM3_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_TIM3_Init+0xa0>)
 8001296:	4a1b      	ldr	r2, [pc, #108]	@ (8001304 <MX_TIM3_Init+0xa8>)
 8001298:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_TIM3_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_TIM3_Init+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_TIM3_Init+0xa0>)
 80012a8:	0018      	movs	r0, r3
 80012aa:	f002 ff9d 	bl	80041e8 <HAL_TIM_Base_Init>
 80012ae:	1e03      	subs	r3, r0, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80012b2:	f000 fbeb 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	2110      	movs	r1, #16
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	0152      	lsls	r2, r2, #5
 80012be:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c0:	187a      	adds	r2, r7, r1
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_TIM3_Init+0xa0>)
 80012c4:	0011      	movs	r1, r2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f003 f91c 	bl	8004504 <HAL_TIM_ConfigClockSource>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012d0:	f000 fbdc 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e0:	1d3a      	adds	r2, r7, #4
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_TIM3_Init+0xa0>)
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f003 fb34 	bl	8004954 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012f0:	f000 fbcc 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b008      	add	sp, #32
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001d8 	.word	0x200001d8
 8001300:	40000400 	.word	0x40000400
 8001304:	0000f9ff 	.word	0x0000f9ff

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_DMA_Init+0x48>)
 8001310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_DMA_Init+0x48>)
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	639a      	str	r2, [r3, #56]	@ 0x38
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <MX_DMA_Init+0x48>)
 800131c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2009      	movs	r0, #9
 800132c:	f000 ff1c 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001330:	2009      	movs	r0, #9
 8001332:	f000 ff2e 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200a      	movs	r0, #10
 800133c:	f000 ff14 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001340:	200a      	movs	r0, #10
 8001342:	f000 ff26 	bl	8002192 <HAL_NVIC_EnableIRQ>

}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	40021000 	.word	0x40021000

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08b      	sub	sp, #44	@ 0x2c
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	2414      	movs	r4, #20
 800135c:	193b      	adds	r3, r7, r4
 800135e:	0018      	movs	r0, r3
 8001360:	2314      	movs	r3, #20
 8001362:	001a      	movs	r2, r3
 8001364:	2100      	movs	r1, #0
 8001366:	f003 fb7b 	bl	8004a60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <MX_GPIO_Init+0x188>)
 800136c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800136e:	4b5b      	ldr	r3, [pc, #364]	@ (80014dc <MX_GPIO_Init+0x188>)
 8001370:	2120      	movs	r1, #32
 8001372:	430a      	orrs	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	@ 0x34
 8001376:	4b59      	ldr	r3, [pc, #356]	@ (80014dc <MX_GPIO_Init+0x188>)
 8001378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800137a:	2220      	movs	r2, #32
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b56      	ldr	r3, [pc, #344]	@ (80014dc <MX_GPIO_Init+0x188>)
 8001384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001386:	4b55      	ldr	r3, [pc, #340]	@ (80014dc <MX_GPIO_Init+0x188>)
 8001388:	2104      	movs	r1, #4
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	@ 0x34
 800138e:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <MX_GPIO_Init+0x188>)
 8001390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001392:	2204      	movs	r2, #4
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <MX_GPIO_Init+0x188>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800139e:	4b4f      	ldr	r3, [pc, #316]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013a0:	2102      	movs	r1, #2
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013a6:	4b4d      	ldr	r3, [pc, #308]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	430a      	orrs	r2, r1
 80013bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013be:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	4b44      	ldr	r3, [pc, #272]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ce:	4b43      	ldr	r3, [pc, #268]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013d0:	2108      	movs	r1, #8
 80013d2:	430a      	orrs	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d6:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <MX_GPIO_Init+0x188>)
 80013d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013da:	2208      	movs	r2, #8
 80013dc:	4013      	ands	r3, r2
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : C_SGPIO_SClock_Pin C_SGPIO_SLoad_Pin */
  GPIO_InitStruct.Pin = C_SGPIO_SClock_Pin|C_SGPIO_SLoad_Pin;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2284      	movs	r2, #132	@ 0x84
 80013e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	2284      	movs	r2, #132	@ 0x84
 80013ec:	0392      	lsls	r2, r2, #14
 80013ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	4a39      	ldr	r2, [pc, #228]	@ (80014e0 <MX_GPIO_Init+0x18c>)
 80013fa:	0019      	movs	r1, r3
 80013fc:	0010      	movs	r0, r2
 80013fe:	f001 f871 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SGPIO_SClock_Pin A_SGPIO_SLoad_Pin B_SGPIO_SClock_Pin B_SGPIO_SLoad_Pin
                           D_SGPIO_SClock_Pin */
  GPIO_InitStruct.Pin = A_SGPIO_SClock_Pin|A_SGPIO_SLoad_Pin|B_SGPIO_SClock_Pin|B_SGPIO_SLoad_Pin
 8001402:	0021      	movs	r1, r4
 8001404:	187b      	adds	r3, r7, r1
 8001406:	4a37      	ldr	r2, [pc, #220]	@ (80014e4 <MX_GPIO_Init+0x190>)
 8001408:	601a      	str	r2, [r3, #0]
                          |D_SGPIO_SClock_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2284      	movs	r2, #132	@ 0x84
 800140e:	0392      	lsls	r2, r2, #14
 8001410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	000c      	movs	r4, r1
 8001414:	193b      	adds	r3, r7, r4
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	193b      	adds	r3, r7, r4
 800141c:	4a32      	ldr	r2, [pc, #200]	@ (80014e8 <MX_GPIO_Init+0x194>)
 800141e:	0019      	movs	r1, r3
 8001420:	0010      	movs	r0, r2
 8001422:	f001 f85f 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SGPIO_SData_Pin B_SGPIO_SData_Pin */
  GPIO_InitStruct.Pin = A_SGPIO_SData_Pin|B_SGPIO_SData_Pin;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	4a30      	ldr	r2, [pc, #192]	@ (80014ec <MX_GPIO_Init+0x198>)
 800142a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	193b      	adds	r3, r7, r4
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	193b      	adds	r3, r7, r4
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	193b      	adds	r3, r7, r4
 800143a:	4a2b      	ldr	r2, [pc, #172]	@ (80014e8 <MX_GPIO_Init+0x194>)
 800143c:	0019      	movs	r1, r3
 800143e:	0010      	movs	r0, r2
 8001440:	f001 f850 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_SGPIO_SLoad_Pin F_SGPIO_SClock_Pin F_SGPIO_SLoad_Pin */
  GPIO_InitStruct.Pin = E_SGPIO_SLoad_Pin|F_SGPIO_SClock_Pin|F_SGPIO_SLoad_Pin;
 8001444:	193b      	adds	r3, r7, r4
 8001446:	2286      	movs	r2, #134	@ 0x86
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800144c:	193b      	adds	r3, r7, r4
 800144e:	2284      	movs	r2, #132	@ 0x84
 8001450:	0392      	lsls	r2, r2, #14
 8001452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	193b      	adds	r3, r7, r4
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	193a      	adds	r2, r7, r4
 800145c:	23a0      	movs	r3, #160	@ 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f001 f83e 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_SGPIO_SData_Pin E_SGPIO_SData_Pin D_SGPIO_SData_Pin */
  GPIO_InitStruct.Pin = C_SGPIO_SData_Pin|E_SGPIO_SData_Pin|D_SGPIO_SData_Pin;
 8001468:	0021      	movs	r1, r4
 800146a:	187b      	adds	r3, r7, r1
 800146c:	22a2      	movs	r2, #162	@ 0xa2
 800146e:	0052      	lsls	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	000c      	movs	r4, r1
 8001474:	193b      	adds	r3, r7, r4
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	193b      	adds	r3, r7, r4
 8001482:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <MX_GPIO_Init+0x19c>)
 8001484:	0019      	movs	r1, r3
 8001486:	0010      	movs	r0, r2
 8001488:	f001 f82c 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_SGPIO_SData_Pin */
  GPIO_InitStruct.Pin = F_SGPIO_SData_Pin;
 800148c:	0021      	movs	r1, r4
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	000c      	movs	r4, r1
 8001498:	193b      	adds	r3, r7, r4
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(F_SGPIO_SData_GPIO_Port, &GPIO_InitStruct);
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <MX_GPIO_Init+0x18c>)
 80014a8:	0019      	movs	r1, r3
 80014aa:	0010      	movs	r0, r2
 80014ac:	f001 f81a 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_SGPIO_SClock_Pin D_SGPIO_SLoad_Pin */
  GPIO_InitStruct.Pin = E_SGPIO_SClock_Pin|D_SGPIO_SLoad_Pin;
 80014b0:	0021      	movs	r1, r4
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2230      	movs	r2, #48	@ 0x30
 80014b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2284      	movs	r2, #132	@ 0x84
 80014bc:	0392      	lsls	r2, r2, #14
 80014be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <MX_GPIO_Init+0x19c>)
 80014ca:	0019      	movs	r1, r3
 80014cc:	0010      	movs	r0, r2
 80014ce:	f001 f809 	bl	80024e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b00b      	add	sp, #44	@ 0x2c
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000
 80014e0:	50000800 	.word	0x50000800
 80014e4:	0000180b 	.word	0x0000180b
 80014e8:	50000400 	.word	0x50000400
 80014ec:	00002004 	.word	0x00002004
 80014f0:	50000c00 	.word	0x50000c00

080014f4 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	1dbb      	adds	r3, r7, #6
 80014fe:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == A_SGPIO_SLoad_Pin && currentChannel == CHANNEL_A)
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d111      	bne.n	800152c <HAL_GPIO_EXTI_Falling_Callback+0x38>
 8001508:	4bbc      	ldr	r3, [pc, #752]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_GPIO_EXTI_Falling_Callback+0x38>
	{
		// Начало приема данных для канала A
		isReceiving_A = 1;
 8001512:	4bbb      	ldr	r3, [pc, #748]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_A = 0;
 8001518:	4bba      	ldr	r3, [pc, #744]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 800151a:	2200      	movs	r2, #0
 800151c:	801a      	strh	r2, [r3, #0]
		bitCounter_A = 0;
 800151e:	4bba      	ldr	r3, [pc, #744]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 8001524:	4bb9      	ldr	r3, [pc, #740]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e072      	b.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	}
	else if (GPIO_Pin == B_SGPIO_SLoad_Pin && currentChannel == CHANNEL_B)
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	2380      	movs	r3, #128	@ 0x80
 8001532:	015b      	lsls	r3, r3, #5
 8001534:	429a      	cmp	r2, r3
 8001536:	d111      	bne.n	800155c <HAL_GPIO_EXTI_Falling_Callback+0x68>
 8001538:	4bb0      	ldr	r3, [pc, #704]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10c      	bne.n	800155c <HAL_GPIO_EXTI_Falling_Callback+0x68>
	{
		// Начало приема данных для канала B
		isReceiving_B = 1;
 8001542:	4bb3      	ldr	r3, [pc, #716]	@ (8001810 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_B = 0;
 8001548:	4bb2      	ldr	r3, [pc, #712]	@ (8001814 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 800154a:	2200      	movs	r2, #0
 800154c:	801a      	strh	r2, [r3, #0]
		bitCounter_B = 0;
 800154e:	4bb2      	ldr	r3, [pc, #712]	@ (8001818 <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 8001554:	4bad      	ldr	r3, [pc, #692]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e05a      	b.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	}
	else if (GPIO_Pin == C_SGPIO_SLoad_Pin && currentChannel == CHANNEL_C)
 800155c:	1dbb      	adds	r3, r7, #6
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2b80      	cmp	r3, #128	@ 0x80
 8001562:	d111      	bne.n	8001588 <HAL_GPIO_EXTI_Falling_Callback+0x94>
 8001564:	4ba5      	ldr	r3, [pc, #660]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d10c      	bne.n	8001588 <HAL_GPIO_EXTI_Falling_Callback+0x94>
	{
		// Начало приема данных для канала B
		isReceiving_C = 1;
 800156e:	4bab      	ldr	r3, [pc, #684]	@ (800181c <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_C = 0;
 8001574:	4baa      	ldr	r3, [pc, #680]	@ (8001820 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
		bitCounter_C = 0;
 800157a:	4baa      	ldr	r3, [pc, #680]	@ (8001824 <HAL_GPIO_EXTI_Falling_Callback+0x330>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 8001580:	4ba2      	ldr	r3, [pc, #648]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e044      	b.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	}
	else if (GPIO_Pin == D_SGPIO_SLoad_Pin && currentChannel == CHANNEL_D)
 8001588:	1dbb      	adds	r3, r7, #6
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	2b20      	cmp	r3, #32
 800158e:	d111      	bne.n	80015b4 <HAL_GPIO_EXTI_Falling_Callback+0xc0>
 8001590:	4b9a      	ldr	r3, [pc, #616]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b03      	cmp	r3, #3
 8001598:	d10c      	bne.n	80015b4 <HAL_GPIO_EXTI_Falling_Callback+0xc0>
	{
		// Начало приема данных для канала B
		isReceiving_D = 1;
 800159a:	4ba3      	ldr	r3, [pc, #652]	@ (8001828 <HAL_GPIO_EXTI_Falling_Callback+0x334>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_D = 0;
 80015a0:	4ba2      	ldr	r3, [pc, #648]	@ (800182c <HAL_GPIO_EXTI_Falling_Callback+0x338>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	801a      	strh	r2, [r3, #0]
		bitCounter_D = 0;
 80015a6:	4ba2      	ldr	r3, [pc, #648]	@ (8001830 <HAL_GPIO_EXTI_Falling_Callback+0x33c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 80015ac:	4b97      	ldr	r3, [pc, #604]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e02e      	b.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	}
	else if (GPIO_Pin == E_SGPIO_SLoad_Pin && currentChannel == CHANNEL_E)
 80015b4:	1dbb      	adds	r3, r7, #6
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d111      	bne.n	80015e4 <HAL_GPIO_EXTI_Falling_Callback+0xf0>
 80015c0:	4b8e      	ldr	r3, [pc, #568]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d10c      	bne.n	80015e4 <HAL_GPIO_EXTI_Falling_Callback+0xf0>
	{
		// Начало приема данных для канала B
		isReceiving_E = 1;
 80015ca:	4b9a      	ldr	r3, [pc, #616]	@ (8001834 <HAL_GPIO_EXTI_Falling_Callback+0x340>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_E = 0;
 80015d0:	4b99      	ldr	r3, [pc, #612]	@ (8001838 <HAL_GPIO_EXTI_Falling_Callback+0x344>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
		bitCounter_E = 0;
 80015d6:	4b99      	ldr	r3, [pc, #612]	@ (800183c <HAL_GPIO_EXTI_Falling_Callback+0x348>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 80015dc:	4b8b      	ldr	r3, [pc, #556]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e016      	b.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	}
	else if (GPIO_Pin == F_SGPIO_SLoad_Pin && currentChannel == CHANNEL_F)
 80015e4:	1dbb      	adds	r3, r7, #6
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d110      	bne.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
 80015f0:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10b      	bne.n	8001612 <HAL_GPIO_EXTI_Falling_Callback+0x11e>
	{
		// Начало приема данных для канала B
		isReceiving_F = 1;
 80015fa:	4b91      	ldr	r3, [pc, #580]	@ (8001840 <HAL_GPIO_EXTI_Falling_Callback+0x34c>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
		sgpioBuffer_F = 0;
 8001600:	4b90      	ldr	r3, [pc, #576]	@ (8001844 <HAL_GPIO_EXTI_Falling_Callback+0x350>)
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
		bitCounter_F = 0;
 8001606:	4b90      	ldr	r3, [pc, #576]	@ (8001848 <HAL_GPIO_EXTI_Falling_Callback+0x354>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
		sgpio_started = 1;
 800160c:	4b7f      	ldr	r3, [pc, #508]	@ (800180c <HAL_GPIO_EXTI_Falling_Callback+0x318>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == A_SGPIO_SClock_Pin && isReceiving_A && currentChannel == CHANNEL_A)
 8001612:	1dbb      	adds	r3, r7, #6
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d14a      	bne.n	80016b0 <HAL_GPIO_EXTI_Falling_Callback+0x1bc>
 800161a:	4b79      	ldr	r3, [pc, #484]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d046      	beq.n	80016b0 <HAL_GPIO_EXTI_Falling_Callback+0x1bc>
 8001622:	4b76      	ldr	r3, [pc, #472]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d141      	bne.n	80016b0 <HAL_GPIO_EXTI_Falling_Callback+0x1bc>
	{
		// Прием данных для канала A
		uint8_t dataBit = HAL_GPIO_ReadPin(A_SGPIO_SData_GPIO_Port, A_SGPIO_SData_Pin);
 800162c:	250f      	movs	r5, #15
 800162e:	197c      	adds	r4, r7, r5
 8001630:	4b86      	ldr	r3, [pc, #536]	@ (800184c <HAL_GPIO_EXTI_Falling_Callback+0x358>)
 8001632:	2104      	movs	r1, #4
 8001634:	0018      	movs	r0, r3
 8001636:	f001 f8b9 	bl	80027ac <HAL_GPIO_ReadPin>
 800163a:	0003      	movs	r3, r0
 800163c:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_A |= (dataBit << bitCounter_A);
 800163e:	197b      	adds	r3, r7, r5
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4a71      	ldr	r2, [pc, #452]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	4093      	lsls	r3, r2
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b6e      	ldr	r3, [pc, #440]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b6b      	ldr	r3, [pc, #428]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 8001658:	801a      	strh	r2, [r3, #0]
		bitCounter_A++;
 800165a:	4b6b      	ldr	r3, [pc, #428]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b69      	ldr	r3, [pc, #420]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 8001664:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_A >= 12) {
 8001666:	4b68      	ldr	r3, [pc, #416]	@ (8001808 <HAL_GPIO_EXTI_Falling_Callback+0x314>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b0b      	cmp	r3, #11
 800166c:	d800      	bhi.n	8001670 <HAL_GPIO_EXTI_Falling_Callback+0x17c>
 800166e:	e1e3      	b.n	8001a38 <HAL_GPIO_EXTI_Falling_Callback+0x544>
			isReceiving_A = 0;
 8001670:	4b63      	ldr	r3, [pc, #396]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_A, 20); // Обработка данных для дисков 0-3
 8001676:	4b63      	ldr	r3, [pc, #396]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2114      	movs	r1, #20
 800167c:	0018      	movs	r0, r3
 800167e:	f7fe fe19 	bl	80002b4 <ProcessSGPIOData>

			if(sgpioBuffer_A !=0)
 8001682:	4b60      	ldr	r3, [pc, #384]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_GPIO_EXTI_Falling_Callback+0x1a4>
			{
				sgpio_detected = 1;
 800168a:	4b71      	ldr	r3, [pc, #452]	@ (8001850 <HAL_GPIO_EXTI_Falling_Callback+0x35c>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001690:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <HAL_GPIO_EXTI_Falling_Callback+0x360>)
 8001692:	0018      	movs	r0, r3
 8001694:	f002 fe00 	bl	8004298 <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_A = 0; // Сброс буфера
 8001698:	4b5a      	ldr	r3, [pc, #360]	@ (8001804 <HAL_GPIO_EXTI_Falling_Callback+0x310>)
 800169a:	2200      	movs	r2, #0
 800169c:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал B только если прием данных завершен
			if (!isReceiving_B) {
 800169e:	4b5c      	ldr	r3, [pc, #368]	@ (8001810 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d000      	beq.n	80016a8 <HAL_GPIO_EXTI_Falling_Callback+0x1b4>
 80016a6:	e1c7      	b.n	8001a38 <HAL_GPIO_EXTI_Falling_Callback+0x544>
				currentChannel = CHANNEL_B;
 80016a8:	4b54      	ldr	r3, [pc, #336]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
	{
 80016ae:	e1c3      	b.n	8001a38 <HAL_GPIO_EXTI_Falling_Callback+0x544>
			}

		}
	}
	else if (GPIO_Pin == B_SGPIO_SClock_Pin && isReceiving_B && currentChannel == CHANNEL_B)
 80016b0:	1dbb      	adds	r3, r7, #6
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d14c      	bne.n	8001756 <HAL_GPIO_EXTI_Falling_Callback+0x262>
 80016bc:	4b54      	ldr	r3, [pc, #336]	@ (8001810 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d048      	beq.n	8001756 <HAL_GPIO_EXTI_Falling_Callback+0x262>
 80016c4:	4b4d      	ldr	r3, [pc, #308]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d143      	bne.n	8001756 <HAL_GPIO_EXTI_Falling_Callback+0x262>
	{
		// Прием данных для канала B
		uint8_t dataBit = HAL_GPIO_ReadPin(B_SGPIO_SData_GPIO_Port, B_SGPIO_SData_Pin);
 80016ce:	250e      	movs	r5, #14
 80016d0:	197c      	adds	r4, r7, r5
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	4a5d      	ldr	r2, [pc, #372]	@ (800184c <HAL_GPIO_EXTI_Falling_Callback+0x358>)
 80016d8:	0019      	movs	r1, r3
 80016da:	0010      	movs	r0, r2
 80016dc:	f001 f866 	bl	80027ac <HAL_GPIO_ReadPin>
 80016e0:	0003      	movs	r3, r0
 80016e2:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_B |= (dataBit << bitCounter_B);
 80016e4:	197b      	adds	r3, r7, r5
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001818 <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	4093      	lsls	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b48      	ldr	r3, [pc, #288]	@ (8001814 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 80016fe:	801a      	strh	r2, [r3, #0]
		bitCounter_B++;
 8001700:	4b45      	ldr	r3, [pc, #276]	@ (8001818 <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 800170a:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_B >= 12) {
 800170c:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <HAL_GPIO_EXTI_Falling_Callback+0x324>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b0b      	cmp	r3, #11
 8001712:	d800      	bhi.n	8001716 <HAL_GPIO_EXTI_Falling_Callback+0x222>
 8001714:	e192      	b.n	8001a3c <HAL_GPIO_EXTI_Falling_Callback+0x548>
			isReceiving_B = 0;
 8001716:	4b3e      	ldr	r3, [pc, #248]	@ (8001810 <HAL_GPIO_EXTI_Falling_Callback+0x31c>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_B, 16); // Обработка данных для дисков 4-7
 800171c:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	2110      	movs	r1, #16
 8001722:	0018      	movs	r0, r3
 8001724:	f7fe fdc6 	bl	80002b4 <ProcessSGPIOData>
			if(sgpioBuffer_B != 0)
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_EXTI_Falling_Callback+0x24a>
			{
				sgpio_detected = 1;
 8001730:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <HAL_GPIO_EXTI_Falling_Callback+0x35c>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_GPIO_EXTI_Falling_Callback+0x360>)
 8001738:	0018      	movs	r0, r3
 800173a:	f002 fdad 	bl	8004298 <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_B = 0; // Сброс буфера
 800173e:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_GPIO_EXTI_Falling_Callback+0x320>)
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал A
			if (!isReceiving_A) {
 8001744:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_GPIO_EXTI_Falling_Callback+0x30c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d000      	beq.n	800174e <HAL_GPIO_EXTI_Falling_Callback+0x25a>
 800174c:	e176      	b.n	8001a3c <HAL_GPIO_EXTI_Falling_Callback+0x548>
				currentChannel = CHANNEL_C;
 800174e:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
	{
 8001754:	e172      	b.n	8001a3c <HAL_GPIO_EXTI_Falling_Callback+0x548>
			}
		}
	}else if (GPIO_Pin == C_SGPIO_SClock_Pin && isReceiving_C && currentChannel == CHANNEL_C)
 8001756:	1dbb      	adds	r3, r7, #6
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d000      	beq.n	8001760 <HAL_GPIO_EXTI_Falling_Callback+0x26c>
 800175e:	e07d      	b.n	800185c <HAL_GPIO_EXTI_Falling_Callback+0x368>
 8001760:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d100      	bne.n	800176a <HAL_GPIO_EXTI_Falling_Callback+0x276>
 8001768:	e078      	b.n	800185c <HAL_GPIO_EXTI_Falling_Callback+0x368>
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d173      	bne.n	800185c <HAL_GPIO_EXTI_Falling_Callback+0x368>
	{
		// Прием данных для канала A
		uint8_t dataBit = HAL_GPIO_ReadPin(C_SGPIO_SData_GPIO_Port, C_SGPIO_SData_Pin);
 8001774:	250d      	movs	r5, #13
 8001776:	197c      	adds	r4, r7, r5
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4a36      	ldr	r2, [pc, #216]	@ (8001858 <HAL_GPIO_EXTI_Falling_Callback+0x364>)
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f001 f813 	bl	80027ac <HAL_GPIO_ReadPin>
 8001786:	0003      	movs	r3, r0
 8001788:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_C |= (dataBit << bitCounter_C);
 800178a:	197b      	adds	r3, r7, r5
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4a25      	ldr	r2, [pc, #148]	@ (8001824 <HAL_GPIO_EXTI_Falling_Callback+0x330>)
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	4093      	lsls	r3, r2
 8001794:	b21a      	sxth	r2, r3
 8001796:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b21b      	sxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b21b      	sxth	r3, r3
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 80017a4:	801a      	strh	r2, [r3, #0]
		bitCounter_C++;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <HAL_GPIO_EXTI_Falling_Callback+0x330>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <HAL_GPIO_EXTI_Falling_Callback+0x330>)
 80017b0:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_C >= 12) {
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <HAL_GPIO_EXTI_Falling_Callback+0x330>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b0b      	cmp	r3, #11
 80017b8:	d800      	bhi.n	80017bc <HAL_GPIO_EXTI_Falling_Callback+0x2c8>
 80017ba:	e141      	b.n	8001a40 <HAL_GPIO_EXTI_Falling_Callback+0x54c>
			isReceiving_C = 0;
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_C, 12); // Обработка данных для дисков 8-11
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	210c      	movs	r1, #12
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7fe fd73 	bl	80002b4 <ProcessSGPIOData>

			if(sgpioBuffer_C !=0)
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_GPIO_EXTI_Falling_Callback+0x2f0>
			{
				sgpio_detected = 1;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_GPIO_EXTI_Falling_Callback+0x35c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80017dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_GPIO_EXTI_Falling_Callback+0x360>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 fd5a 	bl	8004298 <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_C = 0; // Сброс буфера
 80017e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_GPIO_EXTI_Falling_Callback+0x32c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал B только если прием данных завершен
			if (!isReceiving_C) {
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_GPIO_EXTI_Falling_Callback+0x328>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d000      	beq.n	80017f4 <HAL_GPIO_EXTI_Falling_Callback+0x300>
 80017f2:	e125      	b.n	8001a40 <HAL_GPIO_EXTI_Falling_Callback+0x54c>
				currentChannel = CHANNEL_D;
 80017f4:	4b01      	ldr	r3, [pc, #4]	@ (80017fc <HAL_GPIO_EXTI_Falling_Callback+0x308>)
 80017f6:	2203      	movs	r2, #3
 80017f8:	701a      	strb	r2, [r3, #0]
	{
 80017fa:	e121      	b.n	8001a40 <HAL_GPIO_EXTI_Falling_Callback+0x54c>
 80017fc:	20000028 	.word	0x20000028
 8001800:	2000022e 	.word	0x2000022e
 8001804:	20000230 	.word	0x20000230
 8001808:	20000232 	.word	0x20000232
 800180c:	20000247 	.word	0x20000247
 8001810:	20000233 	.word	0x20000233
 8001814:	20000234 	.word	0x20000234
 8001818:	20000236 	.word	0x20000236
 800181c:	20000237 	.word	0x20000237
 8001820:	20000238 	.word	0x20000238
 8001824:	2000023a 	.word	0x2000023a
 8001828:	2000023b 	.word	0x2000023b
 800182c:	2000023c 	.word	0x2000023c
 8001830:	2000023e 	.word	0x2000023e
 8001834:	2000023f 	.word	0x2000023f
 8001838:	20000240 	.word	0x20000240
 800183c:	20000242 	.word	0x20000242
 8001840:	20000243 	.word	0x20000243
 8001844:	20000244 	.word	0x20000244
 8001848:	20000246 	.word	0x20000246
 800184c:	50000400 	.word	0x50000400
 8001850:	20000248 	.word	0x20000248
 8001854:	2000018c 	.word	0x2000018c
 8001858:	50000c00 	.word	0x50000c00
			}

		}
	}
	else if (GPIO_Pin == D_SGPIO_SClock_Pin && isReceiving_D && currentChannel == CHANNEL_D)
 800185c:	1dbb      	adds	r3, r7, #6
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d14a      	bne.n	80018fa <HAL_GPIO_EXTI_Falling_Callback+0x406>
 8001864:	4b7b      	ldr	r3, [pc, #492]	@ (8001a54 <HAL_GPIO_EXTI_Falling_Callback+0x560>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d046      	beq.n	80018fa <HAL_GPIO_EXTI_Falling_Callback+0x406>
 800186c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a58 <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b03      	cmp	r3, #3
 8001874:	d141      	bne.n	80018fa <HAL_GPIO_EXTI_Falling_Callback+0x406>
	{
		// Прием данных для канала B
		uint8_t dataBit = HAL_GPIO_ReadPin(D_SGPIO_SData_GPIO_Port, D_SGPIO_SData_Pin);
 8001876:	250c      	movs	r5, #12
 8001878:	197c      	adds	r4, r7, r5
 800187a:	4b78      	ldr	r3, [pc, #480]	@ (8001a5c <HAL_GPIO_EXTI_Falling_Callback+0x568>)
 800187c:	2140      	movs	r1, #64	@ 0x40
 800187e:	0018      	movs	r0, r3
 8001880:	f000 ff94 	bl	80027ac <HAL_GPIO_ReadPin>
 8001884:	0003      	movs	r3, r0
 8001886:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_D |= (dataBit << bitCounter_D);
 8001888:	197b      	adds	r3, r7, r5
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4a74      	ldr	r2, [pc, #464]	@ (8001a60 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 800188e:	7812      	ldrb	r2, [r2, #0]
 8001890:	4093      	lsls	r3, r2
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b73      	ldr	r3, [pc, #460]	@ (8001a64 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b70      	ldr	r3, [pc, #448]	@ (8001a64 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 80018a2:	801a      	strh	r2, [r3, #0]
		bitCounter_D++;
 80018a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a60 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 80018ae:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_D >= 12) {
 80018b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a60 <HAL_GPIO_EXTI_Falling_Callback+0x56c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b0b      	cmp	r3, #11
 80018b6:	d800      	bhi.n	80018ba <HAL_GPIO_EXTI_Falling_Callback+0x3c6>
 80018b8:	e0c4      	b.n	8001a44 <HAL_GPIO_EXTI_Falling_Callback+0x550>
			isReceiving_D = 0;
 80018ba:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_GPIO_EXTI_Falling_Callback+0x560>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_D, 8); // Обработка данных для дисков 12-15
 80018c0:	4b68      	ldr	r3, [pc, #416]	@ (8001a64 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	2108      	movs	r1, #8
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7fe fcf4 	bl	80002b4 <ProcessSGPIOData>
			if(sgpioBuffer_D != 0)
 80018cc:	4b65      	ldr	r3, [pc, #404]	@ (8001a64 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_EXTI_Falling_Callback+0x3ee>
			{
				sgpio_detected = 1;
 80018d4:	4b64      	ldr	r3, [pc, #400]	@ (8001a68 <HAL_GPIO_EXTI_Falling_Callback+0x574>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 80018da:	4b64      	ldr	r3, [pc, #400]	@ (8001a6c <HAL_GPIO_EXTI_Falling_Callback+0x578>)
 80018dc:	0018      	movs	r0, r3
 80018de:	f002 fcdb 	bl	8004298 <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_D = 0; // Сброс буфера
 80018e2:	4b60      	ldr	r3, [pc, #384]	@ (8001a64 <HAL_GPIO_EXTI_Falling_Callback+0x570>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал A
			if (!isReceiving_D) {
 80018e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a54 <HAL_GPIO_EXTI_Falling_Callback+0x560>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d000      	beq.n	80018f2 <HAL_GPIO_EXTI_Falling_Callback+0x3fe>
 80018f0:	e0a8      	b.n	8001a44 <HAL_GPIO_EXTI_Falling_Callback+0x550>
				currentChannel = CHANNEL_E;
 80018f2:	4b59      	ldr	r3, [pc, #356]	@ (8001a58 <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 80018f4:	2204      	movs	r2, #4
 80018f6:	701a      	strb	r2, [r3, #0]
	{
 80018f8:	e0a4      	b.n	8001a44 <HAL_GPIO_EXTI_Falling_Callback+0x550>
			}
		}
	}
else if (GPIO_Pin == E_SGPIO_SClock_Pin && isReceiving_E && currentChannel == CHANNEL_E)
 80018fa:	1dbb      	adds	r3, r7, #6
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d149      	bne.n	8001996 <HAL_GPIO_EXTI_Falling_Callback+0x4a2>
 8001902:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <HAL_GPIO_EXTI_Falling_Callback+0x57c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d045      	beq.n	8001996 <HAL_GPIO_EXTI_Falling_Callback+0x4a2>
 800190a:	4b53      	ldr	r3, [pc, #332]	@ (8001a58 <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b04      	cmp	r3, #4
 8001912:	d140      	bne.n	8001996 <HAL_GPIO_EXTI_Falling_Callback+0x4a2>
	{
		// Прием данных для канала A
		uint8_t dataBit = HAL_GPIO_ReadPin(E_SGPIO_SData_GPIO_Port, E_SGPIO_SData_Pin);
 8001914:	250b      	movs	r5, #11
 8001916:	197c      	adds	r4, r7, r5
 8001918:	4b50      	ldr	r3, [pc, #320]	@ (8001a5c <HAL_GPIO_EXTI_Falling_Callback+0x568>)
 800191a:	2104      	movs	r1, #4
 800191c:	0018      	movs	r0, r3
 800191e:	f000 ff45 	bl	80027ac <HAL_GPIO_ReadPin>
 8001922:	0003      	movs	r3, r0
 8001924:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_E |= (dataBit << bitCounter_E);
 8001926:	197b      	adds	r3, r7, r5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	4093      	lsls	r3, r2
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4313      	orrs	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a78 <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 8001940:	801a      	strh	r2, [r3, #0]
		bitCounter_E++;
 8001942:	4b4c      	ldr	r3, [pc, #304]	@ (8001a74 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 800194c:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_E >= 12) {
 800194e:	4b49      	ldr	r3, [pc, #292]	@ (8001a74 <HAL_GPIO_EXTI_Falling_Callback+0x580>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b0b      	cmp	r3, #11
 8001954:	d800      	bhi.n	8001958 <HAL_GPIO_EXTI_Falling_Callback+0x464>
 8001956:	e077      	b.n	8001a48 <HAL_GPIO_EXTI_Falling_Callback+0x554>
			isReceiving_E = 0;
 8001958:	4b45      	ldr	r3, [pc, #276]	@ (8001a70 <HAL_GPIO_EXTI_Falling_Callback+0x57c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_E, 4); // Обработка данных для дисков 16-19
 800195e:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	2104      	movs	r1, #4
 8001964:	0018      	movs	r0, r3
 8001966:	f7fe fca5 	bl	80002b4 <ProcessSGPIOData>

			if(sgpioBuffer_E !=0)
 800196a:	4b43      	ldr	r3, [pc, #268]	@ (8001a78 <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <HAL_GPIO_EXTI_Falling_Callback+0x48c>
			{
				sgpio_detected = 1;
 8001972:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <HAL_GPIO_EXTI_Falling_Callback+0x574>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001978:	4b3c      	ldr	r3, [pc, #240]	@ (8001a6c <HAL_GPIO_EXTI_Falling_Callback+0x578>)
 800197a:	0018      	movs	r0, r3
 800197c:	f002 fc8c 	bl	8004298 <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_E = 0; // Сброс буфера
 8001980:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <HAL_GPIO_EXTI_Falling_Callback+0x584>)
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал B только если прием данных завершен
			if (!isReceiving_E) {
 8001986:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <HAL_GPIO_EXTI_Falling_Callback+0x57c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d15c      	bne.n	8001a48 <HAL_GPIO_EXTI_Falling_Callback+0x554>
				currentChannel = CHANNEL_F;
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 8001990:	2205      	movs	r2, #5
 8001992:	701a      	strb	r2, [r3, #0]
	{
 8001994:	e058      	b.n	8001a48 <HAL_GPIO_EXTI_Falling_Callback+0x554>
			}

		}
	}
	else if (GPIO_Pin == F_SGPIO_SClock_Pin && isReceiving_F && currentChannel == CHANNEL_F)
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	429a      	cmp	r2, r3
 80019a0:	d153      	bne.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
 80019a2:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <HAL_GPIO_EXTI_Falling_Callback+0x588>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04f      	beq.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
 80019aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d14a      	bne.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
		// Прием данных для канала B
		uint8_t dataBit = HAL_GPIO_ReadPin(F_SGPIO_SData_GPIO_Port, F_SGPIO_SData_Pin);
 80019b4:	250a      	movs	r5, #10
 80019b6:	197c      	adds	r4, r7, r5
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4a30      	ldr	r2, [pc, #192]	@ (8001a80 <HAL_GPIO_EXTI_Falling_Callback+0x58c>)
 80019be:	0019      	movs	r1, r3
 80019c0:	0010      	movs	r0, r2
 80019c2:	f000 fef3 	bl	80027ac <HAL_GPIO_ReadPin>
 80019c6:	0003      	movs	r3, r0
 80019c8:	7023      	strb	r3, [r4, #0]

		// Сохранение бита в буфер
		sgpioBuffer_F |= (dataBit << bitCounter_F);
 80019ca:	197b      	adds	r3, r7, r5
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001a84 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	4093      	lsls	r3, r2
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a88 <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	4313      	orrs	r3, r2
 80019de:	b21b      	sxth	r3, r3
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 80019e4:	801a      	strh	r2, [r3, #0]
		bitCounter_F++;
 80019e6:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 80019f0:	701a      	strb	r2, [r3, #0]

		// Если принято 12 бит, завершить прием
		if (bitCounter_F >= 12) {
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_GPIO_EXTI_Falling_Callback+0x590>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b0b      	cmp	r3, #11
 80019f8:	d927      	bls.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
			isReceiving_F = 0;
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_GPIO_EXTI_Falling_Callback+0x588>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
			ProcessSGPIOData(sgpioBuffer_F, 0); // Обработка данных для дисков 20-23
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2100      	movs	r1, #0
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe fc54 	bl	80002b4 <ProcessSGPIOData>
			if(sgpioBuffer_F != 0)
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_EXTI_Falling_Callback+0x52e>
			{
				sgpio_detected = 1;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_GPIO_EXTI_Falling_Callback+0x574>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_GPIO_EXTI_Falling_Callback+0x578>)
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f002 fc3b 	bl	8004298 <HAL_TIM_Base_Stop_IT>
			}

			sgpioBuffer_F = 0; // Сброс буфера
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_GPIO_EXTI_Falling_Callback+0x594>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]

			// Переключаемся на канал A
			if (!isReceiving_F) {
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <HAL_GPIO_EXTI_Falling_Callback+0x588>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10c      	bne.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
				currentChannel = CHANNEL_A;
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_GPIO_EXTI_Falling_Callback+0x564>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001a36:	e008      	b.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_EXTI_Falling_Callback+0x556>
	{
 8001a48:	46c0      	nop			@ (mov r8, r8)
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b004      	add	sp, #16
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	2000023b 	.word	0x2000023b
 8001a58:	20000028 	.word	0x20000028
 8001a5c:	50000c00 	.word	0x50000c00
 8001a60:	2000023e 	.word	0x2000023e
 8001a64:	2000023c 	.word	0x2000023c
 8001a68:	20000248 	.word	0x20000248
 8001a6c:	2000018c 	.word	0x2000018c
 8001a70:	2000023f 	.word	0x2000023f
 8001a74:	20000242 	.word	0x20000242
 8001a78:	20000240 	.word	0x20000240
 8001a7c:	20000243 	.word	0x20000243
 8001a80:	50000800 	.word	0x50000800
 8001a84:	20000246 	.word	0x20000246
 8001a88:	20000244 	.word	0x20000244

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	e7fd      	b.n	8001a94 <Error_Handler+0x8>

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_MspInit+0x44>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_MspInit+0x44>)
 8001abc:	2180      	movs	r1, #128	@ 0x80
 8001abe:	0549      	lsls	r1, r1, #21
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_MspInit+0x44>)
 8001ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	4013      	ands	r3, r2
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b099      	sub	sp, #100	@ 0x64
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	234c      	movs	r3, #76	@ 0x4c
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	0018      	movs	r0, r3
 8001aee:	2314      	movs	r3, #20
 8001af0:	001a      	movs	r2, r3
 8001af2:	2100      	movs	r1, #0
 8001af4:	f002 ffb4 	bl	8004a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af8:	2418      	movs	r4, #24
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	0018      	movs	r0, r3
 8001afe:	2334      	movs	r3, #52	@ 0x34
 8001b00:	001a      	movs	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	f002 ffac 	bl	8004a60 <memset>
  if(hi2c->Instance==I2C1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a67      	ldr	r2, [pc, #412]	@ (8001cac <HAL_I2C_MspInit+0x1cc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d000      	beq.n	8001b14 <HAL_I2C_MspInit+0x34>
 8001b12:	e090      	b.n	8001c36 <HAL_I2C_MspInit+0x156>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	2220      	movs	r2, #32
 8001b18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b20:	193b      	adds	r3, r7, r4
 8001b22:	0018      	movs	r0, r3
 8001b24:	f002 f9a8 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b2c:	f7ff ffae 	bl	8001a8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b34:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001b36:	2102      	movs	r1, #2
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TEMP_I2C1_SCL_Pin|TEMP_I2C_SDA_Pin;
 8001b48:	214c      	movs	r1, #76	@ 0x4c
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	22c0      	movs	r2, #192	@ 0xc0
 8001b4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2212      	movs	r2, #18
 8001b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	2206      	movs	r2, #6
 8001b66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	4a52      	ldr	r2, [pc, #328]	@ (8001cb4 <HAL_I2C_MspInit+0x1d4>)
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	0010      	movs	r0, r2
 8001b70:	f000 fcb8 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b74:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b78:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001b7a:	2180      	movs	r1, #128	@ 0x80
 8001b7c:	0389      	lsls	r1, r1, #14
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b82:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	039b      	lsls	r3, r3, #14
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8001b90:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001b92:	4a4a      	ldr	r2, [pc, #296]	@ (8001cbc <HAL_I2C_MspInit+0x1dc>)
 8001b94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001b96:	4b48      	ldr	r3, [pc, #288]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001b98:	220a      	movs	r2, #10
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9c:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba2:	4b45      	ldr	r3, [pc, #276]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba8:	4b43      	ldr	r3, [pc, #268]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001baa:	2280      	movs	r2, #128	@ 0x80
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bae:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001bba:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 faff 	bl	80021cc <HAL_DMA_Init>
 8001bce:	1e03      	subs	r3, r0, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8001bd2:	f7ff ff5b 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a37      	ldr	r2, [pc, #220]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_I2C_MspInit+0x1d8>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001be4:	4a37      	ldr	r2, [pc, #220]	@ (8001cc4 <HAL_I2C_MspInit+0x1e4>)
 8001be6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001be8:	4b35      	ldr	r3, [pc, #212]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001bea:	220b      	movs	r2, #11
 8001bec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bee:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c06:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c12:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c18:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 fad6 	bl	80021cc <HAL_DMA_Init>
 8001c20:	1e03      	subs	r3, r0, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_MspInit+0x148>
    {
      Error_Handler();
 8001c24:	f7ff ff32 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a25      	ldr	r2, [pc, #148]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_I2C_MspInit+0x1e0>)
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c34:	e036      	b.n	8001ca4 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a23      	ldr	r2, [pc, #140]	@ (8001cc8 <HAL_I2C_MspInit+0x1e8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d131      	bne.n	8001ca4 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RED_I2C2_SCL_Pin|RED_I2C2_SDA_Pin;
 8001c58:	214c      	movs	r1, #76	@ 0x4c
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	22c0      	movs	r2, #192	@ 0xc0
 8001c5e:	0152      	lsls	r2, r2, #5
 8001c60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2212      	movs	r2, #18
 8001c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2206      	movs	r2, #6
 8001c78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	187a      	adds	r2, r7, r1
 8001c7c:	23a0      	movs	r3, #160	@ 0xa0
 8001c7e:	05db      	lsls	r3, r3, #23
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fc2e 	bl	80024e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001c8e:	2180      	movs	r1, #128	@ 0x80
 8001c90:	03c9      	lsls	r1, r1, #15
 8001c92:	430a      	orrs	r2, r1
 8001c94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_I2C_MspInit+0x1d0>)
 8001c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	03db      	lsls	r3, r3, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
}
 8001ca4:	46c0      	nop			@ (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b019      	add	sp, #100	@ 0x64
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	40005400 	.word	0x40005400
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	50000400 	.word	0x50000400
 8001cb8:	200000d4 	.word	0x200000d4
 8001cbc:	40020008 	.word	0x40020008
 8001cc0:	20000130 	.word	0x20000130
 8001cc4:	4002001c 	.word	0x4002001c
 8001cc8:	40005800 	.word	0x40005800

08001ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	05db      	lsls	r3, r3, #23
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d114      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_TIM_Base_MspInit+0x78>)
 8001ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_TIM_Base_MspInit+0x78>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_TIM_Base_MspInit+0x78>)
 8001cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	200f      	movs	r0, #15
 8001cfe:	f000 fa33 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f000 fa45 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d08:	e018      	b.n	8001d3c <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <HAL_TIM_Base_MspInit+0x7c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d113      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_TIM_Base_MspInit+0x78>)
 8001d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d18:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_TIM_Base_MspInit+0x78>)
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_TIM_Base_MspInit+0x78>)
 8001d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d24:	2202      	movs	r2, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2010      	movs	r0, #16
 8001d32:	f000 fa19 	bl	8002168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d36:	2010      	movs	r0, #16
 8001d38:	f000 fa2b 	bl	8002192 <HAL_NVIC_EnableIRQ>
}
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40000400 	.word	0x40000400

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001d50:	f002 f868 	bl	8003e24 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	e7fd      	b.n	8001d54 <NMI_Handler+0x8>

08001d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	e7fd      	b.n	8001d5c <HardFault_Handler+0x4>

08001d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f000 f90a 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SGPIO_SClock_Pin);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 fd2e 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(A_SGPIO_SLoad_Pin);
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f000 fd2b 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SGPIO_SClock_Pin);
 8001d9c:	2004      	movs	r0, #4
 8001d9e:	f000 fd23 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(D_SGPIO_SClock_Pin);
 8001da2:	2008      	movs	r0, #8
 8001da4:	f000 fd20 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_SGPIO_SClock_Pin);
 8001db2:	2010      	movs	r0, #16
 8001db4:	f000 fd18 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(D_SGPIO_SLoad_Pin);
 8001db8:	2020      	movs	r0, #32
 8001dba:	f000 fd15 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C_SGPIO_SLoad_Pin);
 8001dbe:	2080      	movs	r0, #128	@ 0x80
 8001dc0:	f000 fd12 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E_SGPIO_SLoad_Pin);
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 fd0d 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(F_SGPIO_SClock_Pin);
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fd08 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B_SGPIO_SClock_Pin);
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 fd03 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B_SGPIO_SLoad_Pin);
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 fcfe 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(F_SGPIO_SLoad_Pin);
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 fcf9 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <DMA1_Channel1_IRQHandler+0x14>)
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 fa6c 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	200000d4 	.word	0x200000d4

08001e14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 fa60 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e20:	46c0      	nop			@ (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	20000130 	.word	0x20000130

08001e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <TIM2_IRQHandler+0x14>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f002 fa5e 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	2000018c 	.word	0x2000018c

08001e44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <TIM3_IRQHandler+0x14>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f002 fa52 	bl	80042f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	200001d8 	.word	0x200001d8

08001e5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	46c0      	nop			@ (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e68:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e6c:	f7ff fff6 	bl	8001e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopForever+0xe>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopForever+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e96:	f002 fdeb 	bl	8004a70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e9a:	f7ff f863 	bl	8000f64 <main>

08001e9e <LoopForever>:

LoopForever:
  b LoopForever
 8001e9e:	e7fe      	b.n	8001e9e <LoopForever>
  ldr   r0, =_estack
 8001ea0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001eac:	08004b18 	.word	0x08004b18
  ldr r2, =_sbss
 8001eb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001eb4:	20000250 	.word	0x20000250

08001eb8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC1_COMP_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_Init+0x3c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_Init+0x3c>)
 8001ece:	2180      	movs	r1, #128	@ 0x80
 8001ed0:	0049      	lsls	r1, r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f810 	bl	8001efc <HAL_InitTick>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e001      	b.n	8001eec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fdd6 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	781b      	ldrb	r3, [r3, #0]
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f04:	230f      	movs	r3, #15
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HAL_InitTick+0x88>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d02b      	beq.n	8001f6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f14:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_InitTick+0x8c>)
 8001f16:	681c      	ldr	r4, [r3, #0]
 8001f18:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_InitTick+0x88>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	23fa      	movs	r3, #250	@ 0xfa
 8001f20:	0098      	lsls	r0, r3, #2
 8001f22:	f7fe f8ef 	bl	8000104 <__udivsi3>
 8001f26:	0003      	movs	r3, r0
 8001f28:	0019      	movs	r1, r3
 8001f2a:	0020      	movs	r0, r4
 8001f2c:	f7fe f8ea 	bl	8000104 <__udivsi3>
 8001f30:	0003      	movs	r3, r0
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f93d 	bl	80021b2 <HAL_SYSTICK_Config>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d112      	bne.n	8001f62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d80a      	bhi.n	8001f58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	2301      	movs	r3, #1
 8001f46:	425b      	negs	r3, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 f90c 	bl	8002168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_InitTick+0x90>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00d      	b.n	8001f74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f58:	230f      	movs	r3, #15
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e008      	b.n	8001f74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f62:	230f      	movs	r3, #15
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e003      	b.n	8001f74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b005      	add	sp, #20
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_IncTick+0x1c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	001a      	movs	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	18d2      	adds	r2, r2, r3
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	2000024c 	.word	0x2000024c

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	@ (8001fc4 <HAL_GetTick+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	2000024c 	.word	0x2000024c

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	189b      	adds	r3, r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	f7ff ffe0 	bl	8001fb4 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	20000008 	.word	0x20000008

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	0002      	movs	r2, r0
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b7f      	cmp	r3, #127	@ 0x7f
 8002022:	d809      	bhi.n	8002038 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	001a      	movs	r2, r3
 800202a:	231f      	movs	r3, #31
 800202c:	401a      	ands	r2, r3
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <__NVIC_EnableIRQ+0x30>)
 8002030:	2101      	movs	r1, #1
 8002032:	4091      	lsls	r1, r2
 8002034:	000a      	movs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	0002      	movs	r2, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b7f      	cmp	r3, #127	@ 0x7f
 8002058:	d828      	bhi.n	80020ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205a:	4a2f      	ldr	r2, [pc, #188]	@ (8002118 <__NVIC_SetPriority+0xd4>)
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b25b      	sxtb	r3, r3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	33c0      	adds	r3, #192	@ 0xc0
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	589b      	ldr	r3, [r3, r2]
 800206a:	1dfa      	adds	r2, r7, #7
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0011      	movs	r1, r2
 8002070:	2203      	movs	r2, #3
 8002072:	400a      	ands	r2, r1
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	21ff      	movs	r1, #255	@ 0xff
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	43d2      	mvns	r2, r2
 800207e:	401a      	ands	r2, r3
 8002080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	22ff      	movs	r2, #255	@ 0xff
 8002088:	401a      	ands	r2, r3
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	2303      	movs	r3, #3
 8002092:	4003      	ands	r3, r0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	481f      	ldr	r0, [pc, #124]	@ (8002118 <__NVIC_SetPriority+0xd4>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	430a      	orrs	r2, r1
 80020a4:	33c0      	adds	r3, #192	@ 0xc0
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020aa:	e031      	b.n	8002110 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <__NVIC_SetPriority+0xd8>)
 80020ae:	1dfb      	adds	r3, r7, #7
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	0019      	movs	r1, r3
 80020b4:	230f      	movs	r3, #15
 80020b6:	400b      	ands	r3, r1
 80020b8:	3b08      	subs	r3, #8
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3306      	adds	r3, #6
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1dfa      	adds	r2, r7, #7
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	0011      	movs	r1, r2
 80020cc:	2203      	movs	r2, #3
 80020ce:	400a      	ands	r2, r1
 80020d0:	00d2      	lsls	r2, r2, #3
 80020d2:	21ff      	movs	r1, #255	@ 0xff
 80020d4:	4091      	lsls	r1, r2
 80020d6:	000a      	movs	r2, r1
 80020d8:	43d2      	mvns	r2, r2
 80020da:	401a      	ands	r2, r3
 80020dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	22ff      	movs	r2, #255	@ 0xff
 80020e4:	401a      	ands	r2, r3
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0018      	movs	r0, r3
 80020ec:	2303      	movs	r3, #3
 80020ee:	4003      	ands	r3, r0
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f4:	4809      	ldr	r0, [pc, #36]	@ (800211c <__NVIC_SetPriority+0xd8>)
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	001c      	movs	r4, r3
 80020fc:	230f      	movs	r3, #15
 80020fe:	4023      	ands	r3, r4
 8002100:	3b08      	subs	r3, #8
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	430a      	orrs	r2, r1
 8002106:	3306      	adds	r3, #6
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	18c3      	adds	r3, r0, r3
 800210c:	3304      	adds	r3, #4
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b003      	add	sp, #12
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	045b      	lsls	r3, r3, #17
 8002130:	429a      	cmp	r2, r3
 8002132:	d301      	bcc.n	8002138 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002134:	2301      	movs	r3, #1
 8002136:	e010      	b.n	800215a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <SysTick_Config+0x44>)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	3a01      	subs	r2, #1
 800213e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002140:	2301      	movs	r3, #1
 8002142:	425b      	negs	r3, r3
 8002144:	2103      	movs	r1, #3
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff ff7c 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x44>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x44>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	210f      	movs	r1, #15
 8002174:	187b      	adds	r3, r7, r1
 8002176:	1c02      	adds	r2, r0, #0
 8002178:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	187b      	adds	r3, r7, r1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	0011      	movs	r1, r2
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	0002      	movs	r2, r0
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff ff33 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ffaf 	bl	8002120 <SysTick_Config>
 80021c2:	0003      	movs	r3, r0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e077      	b.n	80022ce <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a3d      	ldr	r2, [pc, #244]	@ (80022d8 <HAL_DMA_Init+0x10c>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	4463      	add	r3, ip
 80021e8:	2114      	movs	r1, #20
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fd ff8a 	bl	8000104 <__udivsi3>
 80021f0:	0003      	movs	r3, r0
 80021f2:	009a      	lsls	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2225      	movs	r2, #37	@ 0x25
 80021fc:	2102      	movs	r1, #2
 80021fe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4934      	ldr	r1, [pc, #208]	@ (80022dc <HAL_DMA_Init+0x110>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f8fb 	bl	8002444 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	429a      	cmp	r2, r3
 8002258:	d102      	bne.n	8002260 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	213f      	movs	r1, #63	@ 0x3f
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002276:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d011      	beq.n	80022a4 <HAL_DMA_Init+0xd8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d80d      	bhi.n	80022a4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f000 f906 	bl	800249c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e008      	b.n	80022b6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2225      	movs	r2, #37	@ 0x25
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	@ 0x24
 80022c8:	2100      	movs	r1, #0
 80022ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	bffdfff8 	.word	0xbffdfff8
 80022dc:	ffff800f 	.word	0xffff800f

080022e0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80022e8:	4b55      	ldr	r3, [pc, #340]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	221c      	movs	r2, #28
 80022fc:	4013      	ands	r3, r2
 80022fe:	2204      	movs	r2, #4
 8002300:	409a      	lsls	r2, r3
 8002302:	0013      	movs	r3, r2
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_IRQHandler+0x7a>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2204      	movs	r2, #4
 800230e:	4013      	ands	r3, r2
 8002310:	d023      	beq.n	800235a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2220      	movs	r2, #32
 800231a:	4013      	ands	r3, r2
 800231c:	d107      	bne.n	800232e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2104      	movs	r1, #4
 800232a:	438a      	bics	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800232e:	4b44      	ldr	r3, [pc, #272]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	221c      	movs	r2, #28
 8002338:	4013      	ands	r3, r2
 800233a:	2204      	movs	r2, #4
 800233c:	409a      	lsls	r2, r3
 800233e:	4b40      	ldr	r3, [pc, #256]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	2b00      	cmp	r3, #0
 800234a:	d100      	bne.n	800234e <HAL_DMA_IRQHandler+0x6e>
 800234c:	e073      	b.n	8002436 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	0010      	movs	r0, r2
 8002356:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002358:	e06d      	b.n	8002436 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	221c      	movs	r2, #28
 8002360:	4013      	ands	r3, r2
 8002362:	2202      	movs	r2, #2
 8002364:	409a      	lsls	r2, r3
 8002366:	0013      	movs	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	d02e      	beq.n	80023cc <HAL_DMA_IRQHandler+0xec>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2202      	movs	r2, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d02a      	beq.n	80023cc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2220      	movs	r2, #32
 800237e:	4013      	ands	r3, r2
 8002380:	d10b      	bne.n	800239a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	210a      	movs	r1, #10
 800238e:	438a      	bics	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2225      	movs	r2, #37	@ 0x25
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	221c      	movs	r2, #28
 80023a4:	4013      	ands	r3, r2
 80023a6:	2202      	movs	r2, #2
 80023a8:	409a      	lsls	r2, r3
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	@ 0x24
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03a      	beq.n	8002436 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	0010      	movs	r0, r2
 80023c8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80023ca:	e034      	b.n	8002436 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	221c      	movs	r2, #28
 80023d2:	4013      	ands	r3, r2
 80023d4:	2208      	movs	r2, #8
 80023d6:	409a      	lsls	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	d02b      	beq.n	8002438 <HAL_DMA_IRQHandler+0x158>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2208      	movs	r2, #8
 80023e4:	4013      	ands	r3, r2
 80023e6:	d027      	beq.n	8002438 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	210e      	movs	r1, #14
 80023f4:	438a      	bics	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	221c      	movs	r2, #28
 8002402:	4013      	ands	r3, r2
 8002404:	2201      	movs	r2, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <HAL_DMA_IRQHandler+0x160>)
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2225      	movs	r2, #37	@ 0x25
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	@ 0x24
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	0010      	movs	r0, r2
 8002434:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	46c0      	nop			@ (mov r8, r8)
}
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40020000 	.word	0x40020000

08002444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	4a10      	ldr	r2, [pc, #64]	@ (8002494 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002454:	4694      	mov	ip, r2
 8002456:	4463      	add	r3, ip
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	001a      	movs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	001a      	movs	r2, r3
 8002466:	23ff      	movs	r3, #255	@ 0xff
 8002468:	4013      	ands	r3, r2
 800246a:	3b08      	subs	r3, #8
 800246c:	2114      	movs	r1, #20
 800246e:	0018      	movs	r0, r3
 8002470:	f7fd fe48 	bl	8000104 <__udivsi3>
 8002474:	0003      	movs	r3, r0
 8002476:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a07      	ldr	r2, [pc, #28]	@ (8002498 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800247c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	221f      	movs	r2, #31
 8002482:	4013      	ands	r3, r2
 8002484:	2201      	movs	r2, #1
 8002486:	409a      	lsls	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800248c:	46c0      	nop			@ (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b004      	add	sp, #16
 8002492:	bd80      	pop	{r7, pc}
 8002494:	10008200 	.word	0x10008200
 8002498:	40020880 	.word	0x40020880

0800249c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	223f      	movs	r2, #63	@ 0x3f
 80024aa:	4013      	ands	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024b2:	4694      	mov	ip, r2
 80024b4:	4463      	add	r3, ip
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	001a      	movs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a07      	ldr	r2, [pc, #28]	@ (80024e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2201      	movs	r2, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	1000823f 	.word	0x1000823f
 80024e0:	40020940 	.word	0x40020940

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f2:	e147      	b.n	8002784 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4091      	lsls	r1, r2
 80024fe:	000a      	movs	r2, r1
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d100      	bne.n	800250c <HAL_GPIO_Init+0x28>
 800250a:	e138      	b.n	800277e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	4013      	ands	r3, r2
 8002514:	2b01      	cmp	r3, #1
 8002516:	d005      	beq.n	8002524 <HAL_GPIO_Init+0x40>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	4013      	ands	r3, r2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d130      	bne.n	8002586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	43da      	mvns	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	409a      	lsls	r2, r3
 8002546:	0013      	movs	r3, r2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255a:	2201      	movs	r2, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	43da      	mvns	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	2201      	movs	r2, #1
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	4013      	ands	r3, r2
 800258e:	2b03      	cmp	r3, #3
 8002590:	d017      	beq.n	80025c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d123      	bne.n	8002616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	58d3      	ldr	r3, [r2, r3]
 80025da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2207      	movs	r2, #7
 80025e0:	4013      	ands	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	43da      	mvns	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2107      	movs	r1, #7
 80025fa:	400b      	ands	r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	6939      	ldr	r1, [r7, #16]
 8002614:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	43da      	mvns	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2203      	movs	r2, #3
 8002634:	401a      	ands	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	23c0      	movs	r3, #192	@ 0xc0
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	d100      	bne.n	8002658 <HAL_GPIO_Init+0x174>
 8002656:	e092      	b.n	800277e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002658:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3318      	adds	r3, #24
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	589b      	ldr	r3, [r3, r2]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	220f      	movs	r2, #15
 8002670:	409a      	lsls	r2, r3
 8002672:	0013      	movs	r3, r2
 8002674:	43da      	mvns	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	23a0      	movs	r3, #160	@ 0xa0
 8002680:	05db      	lsls	r3, r3, #23
 8002682:	429a      	cmp	r2, r3
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x1ca>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a45      	ldr	r2, [pc, #276]	@ (80027a0 <HAL_GPIO_Init+0x2bc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x1c6>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a44      	ldr	r2, [pc, #272]	@ (80027a4 <HAL_GPIO_Init+0x2c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x1c2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a43      	ldr	r2, [pc, #268]	@ (80027a8 <HAL_GPIO_Init+0x2c4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x1be>
 800269e:	2303      	movs	r3, #3
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x1cc>
 80026ae:	2300      	movs	r3, #0
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	2103      	movs	r1, #3
 80026b4:	400a      	ands	r2, r1
 80026b6:	00d2      	lsls	r2, r2, #3
 80026b8:	4093      	lsls	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026c0:	4936      	ldr	r1, [pc, #216]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3318      	adds	r3, #24
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ce:	4b33      	ldr	r3, [pc, #204]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4013      	ands	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	035b      	lsls	r3, r3, #13
 80026e6:	4013      	ands	r3, r2
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43da      	mvns	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	039b      	lsls	r3, r3, #14
 8002710:	4013      	ands	r3, r2
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002722:	4a1e      	ldr	r2, [pc, #120]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002724:	2384      	movs	r3, #132	@ 0x84
 8002726:	58d3      	ldr	r3, [r2, r3]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43da      	mvns	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	4013      	ands	r3, r2
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002748:	4914      	ldr	r1, [pc, #80]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 800274a:	2284      	movs	r2, #132	@ 0x84
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002750:	4a12      	ldr	r2, [pc, #72]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	58d3      	ldr	r3, [r2, r3]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43da      	mvns	r2, r3
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	025b      	lsls	r3, r3, #9
 800276a:	4013      	ands	r3, r2
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002776:	4909      	ldr	r1, [pc, #36]	@ (800279c <HAL_GPIO_Init+0x2b8>)
 8002778:	2280      	movs	r2, #128	@ 0x80
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	40da      	lsrs	r2, r3
 800278c:	1e13      	subs	r3, r2, #0
 800278e:	d000      	beq.n	8002792 <HAL_GPIO_Init+0x2ae>
 8002790:	e6b0      	b.n	80024f4 <HAL_GPIO_Init+0x10>
  }
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46c0      	nop			@ (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b006      	add	sp, #24
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021800 	.word	0x40021800
 80027a0:	50000400 	.word	0x50000400
 80027a4:	50000800 	.word	0x50000800
 80027a8:	50000c00 	.word	0x50000c00

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	000a      	movs	r2, r1
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	1cba      	adds	r2, r7, #2
 80027c0:	8812      	ldrh	r2, [r2, #0]
 80027c2:	4013      	ands	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027c6:	230f      	movs	r3, #15
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e003      	b.n	80027d8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d0:	230f      	movs	r3, #15
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80027f4:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	1dba      	adds	r2, r7, #6
 80027fa:	8812      	ldrh	r2, [r2, #0]
 80027fc:	4013      	ands	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002800:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002802:	1dba      	adds	r2, r7, #6
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 f815 	bl	800283c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	1dba      	adds	r2, r7, #6
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	4013      	ands	r3, r2
 800281c:	d008      	beq.n	8002830 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002820:	1dba      	adds	r2, r7, #6
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002826:	1dbb      	adds	r3, r7, #6
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	f7fe fe62 	bl	80014f4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002830:	46c0      	nop			@ (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021800 	.word	0x40021800

0800283c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	0002      	movs	r2, r0
 8002844:	1dbb      	adds	r3, r7, #6
 8002846:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e08f      	b.n	8002982 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2241      	movs	r2, #65	@ 0x41
 8002866:	5c9b      	ldrb	r3, [r3, r2]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d107      	bne.n	800287e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2240      	movs	r2, #64	@ 0x40
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff f931 	bl	8001ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2241      	movs	r2, #65	@ 0x41
 8002882:	2124      	movs	r1, #36	@ 0x24
 8002884:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	438a      	bics	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	493b      	ldr	r1, [pc, #236]	@ (800298c <HAL_I2C_Init+0x13c>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4938      	ldr	r1, [pc, #224]	@ (8002990 <HAL_I2C_Init+0x140>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	0209      	lsls	r1, r1, #8
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e007      	b.n	80028de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2184      	movs	r1, #132	@ 0x84
 80028d8:	0209      	lsls	r1, r1, #8
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d109      	bne.n	80028fa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	0109      	lsls	r1, r1, #4
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	e007      	b.n	800290a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4923      	ldr	r1, [pc, #140]	@ (8002994 <HAL_I2C_Init+0x144>)
 8002906:	400a      	ands	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4920      	ldr	r1, [pc, #128]	@ (8002998 <HAL_I2C_Init+0x148>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	491a      	ldr	r1, [pc, #104]	@ (8002990 <HAL_I2C_Init+0x140>)
 8002926:	400a      	ands	r2, r1
 8002928:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
 8002934:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2241      	movs	r2, #65	@ 0x41
 800296e:	2120      	movs	r1, #32
 8002970:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2242      	movs	r2, #66	@ 0x42
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	f0ffffff 	.word	0xf0ffffff
 8002990:	ffff7fff 	.word	0xffff7fff
 8002994:	fffff7ff 	.word	0xfffff7ff
 8002998:	02008000 	.word	0x02008000

0800299c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	0008      	movs	r0, r1
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	0019      	movs	r1, r3
 80029aa:	230a      	movs	r3, #10
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	1c02      	adds	r2, r0, #0
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	2308      	movs	r3, #8
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	1c0a      	adds	r2, r1, #0
 80029b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2241      	movs	r2, #65	@ 0x41
 80029be:	5c9b      	ldrb	r3, [r3, r2]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d000      	beq.n	80029c8 <HAL_I2C_Master_Transmit+0x2c>
 80029c6:	e10a      	b.n	8002bde <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2240      	movs	r2, #64	@ 0x40
 80029cc:	5c9b      	ldrb	r3, [r3, r2]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0x3a>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e104      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x244>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	2101      	movs	r1, #1
 80029dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029de:	f7ff fae9 	bl	8001fb4 <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	0219      	lsls	r1, r3, #8
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2319      	movs	r3, #25
 80029f2:	2201      	movs	r2, #1
 80029f4:	f000 fa78 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80029f8:	1e03      	subs	r3, r0, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0ef      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2241      	movs	r2, #65	@ 0x41
 8002a04:	2121      	movs	r1, #33	@ 0x21
 8002a06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2242      	movs	r2, #66	@ 0x42
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2208      	movs	r2, #8
 8002a20:	18ba      	adds	r2, r7, r2
 8002a22:	8812      	ldrh	r2, [r2, #0]
 8002a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2bff      	cmp	r3, #255	@ 0xff
 8002a34:	d906      	bls.n	8002a44 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	22ff      	movs	r2, #255	@ 0xff
 8002a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	045b      	lsls	r3, r3, #17
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e007      	b.n	8002a54 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	049b      	lsls	r3, r3, #18
 8002a52:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d027      	beq.n	8002aac <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	697c      	ldr	r4, [r7, #20]
 8002a98:	230a      	movs	r3, #10
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	8819      	ldrh	r1, [r3, #0]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	4b51      	ldr	r3, [pc, #324]	@ (8002be8 <HAL_I2C_Master_Transmit+0x24c>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	0023      	movs	r3, r4
 8002aa6:	f000 fbf9 	bl	800329c <I2C_TransferConfig>
 8002aaa:	e06f      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697c      	ldr	r4, [r7, #20]
 8002ab4:	230a      	movs	r3, #10
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	8819      	ldrh	r1, [r3, #0]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <HAL_I2C_Master_Transmit+0x24c>)
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	0023      	movs	r3, r4
 8002ac2:	f000 fbeb 	bl	800329c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ac6:	e061      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 fa62 	bl	8002f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e081      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03a      	beq.n	8002b8c <HAL_I2C_Master_Transmit+0x1f0>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d136      	bne.n	8002b8c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	0013      	movs	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	@ 0x80
 8002b2c:	f000 f9dc 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e053      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2bff      	cmp	r3, #255	@ 0xff
 8002b40:	d911      	bls.n	8002b66 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	22ff      	movs	r2, #255	@ 0xff
 8002b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	045c      	lsls	r4, r3, #17
 8002b52:	230a      	movs	r3, #10
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	8819      	ldrh	r1, [r3, #0]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	0023      	movs	r3, r4
 8002b60:	f000 fb9c 	bl	800329c <I2C_TransferConfig>
 8002b64:	e012      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	049c      	lsls	r4, r3, #18
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	8819      	ldrh	r1, [r3, #0]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	0023      	movs	r3, r4
 8002b88:	f000 fb88 	bl	800329c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d198      	bne.n	8002ac8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 fa41 	bl	8003024 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e01a      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	490b      	ldr	r1, [pc, #44]	@ (8002bec <HAL_I2C_Master_Transmit+0x250>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2241      	movs	r2, #65	@ 0x41
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2242      	movs	r2, #66	@ 0x42
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2240      	movs	r2, #64	@ 0x40
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
  }
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b007      	add	sp, #28
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	80002000 	.word	0x80002000
 8002bec:	fe00e800 	.word	0xfe00e800

08002bf0 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	1dbb      	adds	r3, r7, #6
 8002bfe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2241      	movs	r2, #65	@ 0x41
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d000      	beq.n	8002c0e <HAL_I2C_Slave_Transmit+0x1e>
 8002c0c:	e143      	b.n	8002e96 <HAL_I2C_Slave_Transmit+0x2a6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_I2C_Slave_Transmit+0x2c>
 8002c14:	1dbb      	adds	r3, r7, #6
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2280      	movs	r2, #128	@ 0x80
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e137      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	@ 0x40
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Slave_Transmit+0x46>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e130      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2240      	movs	r2, #64	@ 0x40
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c3e:	f7ff f9b9 	bl	8001fb4 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2241      	movs	r2, #65	@ 0x41
 8002c4a:	2121      	movs	r1, #33	@ 0x21
 8002c4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2242      	movs	r2, #66	@ 0x42
 8002c52:	2120      	movs	r1, #32
 8002c54:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1dba      	adds	r2, r7, #6
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4989      	ldr	r1, [pc, #548]	@ (8002ea0 <HAL_I2C_Slave_Transmit+0x2b0>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	0013      	movs	r3, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	f000 f92b 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	0209      	lsls	r1, r1, #8
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0f5      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
    }

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	029b      	lsls	r3, r3, #10
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d111      	bne.n	8002cdc <HAL_I2C_Slave_Transmit+0xec>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d119      	bne.n	8002d20 <HAL_I2C_Slave_Transmit+0x130>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	f000 f8f5 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_I2C_Slave_Transmit+0x128>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	0209      	lsls	r1, r1, #8
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0bf      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	0259      	lsls	r1, r3, #9
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	0013      	movs	r3, r2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f000 f8da 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d02f      	beq.n	8002d98 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2180      	movs	r1, #128	@ 0x80
 8002d44:	0209      	lsls	r1, r1, #8
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0a4      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f91f 	bl	8002f98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_I2C_Slave_Transmit+0x184>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2180      	movs	r1, #128	@ 0x80
 8002d6a:	0209      	lsls	r1, r1, #8
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e091      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1d5      	bne.n	8002d4e <HAL_I2C_Slave_Transmit+0x15e>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 8002da2:	2513      	movs	r5, #19
 8002da4:	197c      	adds	r4, r7, r5
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	0013      	movs	r3, r2
 8002db0:	2200      	movs	r2, #0
 8002db2:	2110      	movs	r1, #16
 8002db4:	f000 f898 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	0003      	movs	r3, r0
 8002dba:	7023      	strb	r3, [r4, #0]

    if (error != HAL_OK)
 8002dbc:	197b      	adds	r3, r7, r5
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_I2C_Slave_Transmit+0x20c>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8002dcc:	801a      	strh	r2, [r3, #0]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d107      	bne.n	8002de6 <HAL_I2C_Slave_Transmit+0x1f6>
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <HAL_I2C_Slave_Transmit+0x1f6>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002de4:	e029      	b.n	8002e3a <HAL_I2C_Slave_Transmit+0x24a>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2180      	movs	r1, #128	@ 0x80
 8002df2:	0209      	lsls	r1, r1, #8
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e04d      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f850 	bl	8002ea4 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	6839      	ldr	r1, [r7, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f906 	bl	8003024 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_I2C_Slave_Transmit+0x242>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2180      	movs	r1, #128	@ 0x80
 8002e28:	0209      	lsls	r1, r1, #8
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e032      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2220      	movs	r2, #32
 8002e38:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	0219      	lsls	r1, r3, #8
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	0013      	movs	r3, r2
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f000 f84d 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_I2C_Slave_Transmit+0x278>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2180      	movs	r1, #128	@ 0x80
 8002e5e:	0209      	lsls	r1, r1, #8
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e017      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	0209      	lsls	r1, r1, #8
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2241      	movs	r2, #65	@ 0x41
 8002e7e:	2120      	movs	r1, #32
 8002e80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2242      	movs	r2, #66	@ 0x42
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2240      	movs	r2, #64	@ 0x40
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_I2C_Slave_Transmit+0x2a8>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b006      	add	sp, #24
 8002e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea0:	ffff7fff 	.word	0xffff7fff

08002ea4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d103      	bne.n	8002ec2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d007      	beq.n	8002ee0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]
  }
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	e03a      	b.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f8d3 	bl	80030ac <I2C_IsErrorOccurred>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e040      	b.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	3301      	adds	r3, #1
 8002f12:	d02d      	beq.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f14:	f7ff f84e 	bl	8001fb4 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d302      	bcc.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d122      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	4013      	ands	r3, r2
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	425a      	negs	r2, r3
 8002f3a:	4153      	adcs	r3, r2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	001a      	movs	r2, r3
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d113      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2241      	movs	r2, #65	@ 0x41
 8002f58:	2120      	movs	r1, #32
 8002f5a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2242      	movs	r2, #66	@ 0x42
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2240      	movs	r2, #64	@ 0x40
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e00f      	b.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	425a      	negs	r2, r3
 8002f80:	4153      	adcs	r3, r2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	001a      	movs	r2, r3
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d0b5      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa4:	e032      	b.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 f87d 	bl	80030ac <I2C_IsErrorOccurred>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e030      	b.n	800301c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d025      	beq.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe fff8 	bl	8001fb4 <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11a      	bne.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d013      	beq.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	2220      	movs	r2, #32
 8002fea:	431a      	orrs	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2241      	movs	r2, #65	@ 0x41
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2242      	movs	r2, #66	@ 0x42
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2240      	movs	r2, #64	@ 0x40
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d1c5      	bne.n	8002fa6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b004      	add	sp, #16
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003030:	e02f      	b.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f837 	bl	80030ac <I2C_IsErrorOccurred>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e02d      	b.n	80030a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe ffb5 	bl	8001fb4 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11a      	bne.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2220      	movs	r2, #32
 8003064:	4013      	ands	r3, r2
 8003066:	2b20      	cmp	r3, #32
 8003068:	d013      	beq.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	2220      	movs	r2, #32
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2241      	movs	r2, #65	@ 0x41
 800307a:	2120      	movs	r1, #32
 800307c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2242      	movs	r2, #66	@ 0x42
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2240      	movs	r2, #64	@ 0x40
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2220      	movs	r2, #32
 800309a:	4013      	ands	r3, r2
 800309c:	2b20      	cmp	r3, #32
 800309e:	d1c8      	bne.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2327      	movs	r3, #39	@ 0x27
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2210      	movs	r2, #16
 80030d4:	4013      	ands	r3, r2
 80030d6:	d100      	bne.n	80030da <I2C_IsErrorOccurred+0x2e>
 80030d8:	e079      	b.n	80031ce <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2210      	movs	r2, #16
 80030e0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030e2:	e057      	b.n	8003194 <I2C_IsErrorOccurred+0xe8>
 80030e4:	2227      	movs	r2, #39	@ 0x27
 80030e6:	18bb      	adds	r3, r7, r2
 80030e8:	18ba      	adds	r2, r7, r2
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	d04f      	beq.n	8003194 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fe ff5e 	bl	8001fb4 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <I2C_IsErrorOccurred+0x5e>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d144      	bne.n	8003194 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	01db      	lsls	r3, r3, #7
 8003114:	4013      	ands	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003118:	2013      	movs	r0, #19
 800311a:	183b      	adds	r3, r7, r0
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	2142      	movs	r1, #66	@ 0x42
 8003120:	5c52      	ldrb	r2, [r2, r1]
 8003122:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	401a      	ands	r2, r3
 8003130:	2380      	movs	r3, #128	@ 0x80
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	429a      	cmp	r2, r3
 8003136:	d126      	bne.n	8003186 <I2C_IsErrorOccurred+0xda>
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	01db      	lsls	r3, r3, #7
 800313e:	429a      	cmp	r2, r3
 8003140:	d021      	beq.n	8003186 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003142:	183b      	adds	r3, r7, r0
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b20      	cmp	r3, #32
 8003148:	d01d      	beq.n	8003186 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2180      	movs	r1, #128	@ 0x80
 8003156:	01c9      	lsls	r1, r1, #7
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800315c:	f7fe ff2a 	bl	8001fb4 <HAL_GetTick>
 8003160:	0003      	movs	r3, r0
 8003162:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003164:	e00f      	b.n	8003186 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003166:	f7fe ff25 	bl	8001fb4 <HAL_GetTick>
 800316a:	0002      	movs	r2, r0
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b19      	cmp	r3, #25
 8003172:	d908      	bls.n	8003186 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	2220      	movs	r2, #32
 8003178:	4313      	orrs	r3, r2
 800317a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800317c:	2327      	movs	r3, #39	@ 0x27
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]

              break;
 8003184:	e006      	b.n	8003194 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2220      	movs	r2, #32
 800318e:	4013      	ands	r3, r2
 8003190:	2b20      	cmp	r3, #32
 8003192:	d1e8      	bne.n	8003166 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2220      	movs	r2, #32
 800319c:	4013      	ands	r3, r2
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d004      	beq.n	80031ac <I2C_IsErrorOccurred+0x100>
 80031a2:	2327      	movs	r3, #39	@ 0x27
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d09b      	beq.n	80030e4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ac:	2327      	movs	r3, #39	@ 0x27
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2220      	movs	r2, #32
 80031bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2204      	movs	r2, #4
 80031c2:	4313      	orrs	r3, r2
 80031c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031c6:	2327      	movs	r3, #39	@ 0x27
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4013      	ands	r3, r2
 80031de:	d00c      	beq.n	80031fa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4313      	orrs	r3, r2
 80031e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2280      	movs	r2, #128	@ 0x80
 80031ee:	0052      	lsls	r2, r2, #1
 80031f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f2:	2327      	movs	r3, #39	@ 0x27
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4013      	ands	r3, r2
 8003202:	d00c      	beq.n	800321e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2208      	movs	r2, #8
 8003208:	4313      	orrs	r3, r2
 800320a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	00d2      	lsls	r2, r2, #3
 8003214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003216:	2327      	movs	r3, #39	@ 0x27
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d00c      	beq.n	8003242 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2202      	movs	r2, #2
 800322c:	4313      	orrs	r3, r2
 800322e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323a:	2327      	movs	r3, #39	@ 0x27
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003242:	2327      	movs	r3, #39	@ 0x27
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01d      	beq.n	8003288 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	0018      	movs	r0, r3
 8003250:	f7ff fe28 	bl	8002ea4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	490e      	ldr	r1, [pc, #56]	@ (8003298 <I2C_IsErrorOccurred+0x1ec>)
 8003260:	400a      	ands	r2, r1
 8003262:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2241      	movs	r2, #65	@ 0x41
 8003274:	2120      	movs	r1, #32
 8003276:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2242      	movs	r2, #66	@ 0x42
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2240      	movs	r2, #64	@ 0x40
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003288:	2327      	movs	r3, #39	@ 0x27
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	781b      	ldrb	r3, [r3, #0]
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b00a      	add	sp, #40	@ 0x28
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	fe00e800 	.word	0xfe00e800

0800329c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	0008      	movs	r0, r1
 80032a6:	0011      	movs	r1, r2
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	240a      	movs	r4, #10
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	1c02      	adds	r2, r0, #0
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	2009      	movs	r0, #9
 80032b4:	183b      	adds	r3, r7, r0
 80032b6:	1c0a      	adds	r2, r1, #0
 80032b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	059b      	lsls	r3, r3, #22
 80032c0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c2:	183b      	adds	r3, r7, r0
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	0419      	lsls	r1, r3, #16
 80032c8:	23ff      	movs	r3, #255	@ 0xff
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ce:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d6:	4313      	orrs	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032e6:	0d51      	lsrs	r1, r2, #21
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	00d2      	lsls	r2, r2, #3
 80032ec:	400a      	ands	r2, r1
 80032ee:	4907      	ldr	r1, [pc, #28]	@ (800330c <I2C_TransferConfig+0x70>)
 80032f0:	430a      	orrs	r2, r1
 80032f2:	43d2      	mvns	r2, r2
 80032f4:	401a      	ands	r2, r3
 80032f6:	0011      	movs	r1, r2
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b007      	add	sp, #28
 8003308:	bd90      	pop	{r4, r7, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	03ff63ff 	.word	0x03ff63ff

08003310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2241      	movs	r2, #65	@ 0x41
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d138      	bne.n	8003398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2240      	movs	r2, #64	@ 0x40
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003330:	2302      	movs	r3, #2
 8003332:	e032      	b.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2240      	movs	r2, #64	@ 0x40
 8003338:	2101      	movs	r1, #1
 800333a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2241      	movs	r2, #65	@ 0x41
 8003340:	2124      	movs	r1, #36	@ 0x24
 8003342:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2101      	movs	r1, #1
 8003350:	438a      	bics	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4911      	ldr	r1, [pc, #68]	@ (80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003360:	400a      	ands	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2101      	movs	r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2241      	movs	r2, #65	@ 0x41
 8003388:	2120      	movs	r1, #32
 800338a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2240      	movs	r2, #64	@ 0x40
 8003390:	2100      	movs	r1, #0
 8003392:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	ffffefff 	.word	0xffffefff

080033a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2241      	movs	r2, #65	@ 0x41
 80033b6:	5c9b      	ldrb	r3, [r3, r2]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d139      	bne.n	8003432 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2240      	movs	r2, #64	@ 0x40
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e033      	b.n	8003434 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2240      	movs	r2, #64	@ 0x40
 80033d0:	2101      	movs	r1, #1
 80033d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2241      	movs	r2, #65	@ 0x41
 80033d8:	2124      	movs	r1, #36	@ 0x24
 80033da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	438a      	bics	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a11      	ldr	r2, [pc, #68]	@ (800343c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2241      	movs	r2, #65	@ 0x41
 8003422:	2120      	movs	r1, #32
 8003424:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2240      	movs	r2, #64	@ 0x40
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
  }
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}
 800343c:	fffff0ff 	.word	0xfffff0ff

08003440 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	4b17      	ldr	r3, [pc, #92]	@ (80034b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d11f      	bne.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003464:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	0013      	movs	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	189b      	adds	r3, r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4912      	ldr	r1, [pc, #72]	@ (80034bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003472:	0018      	movs	r0, r3
 8003474:	f7fc fe46 	bl	8000104 <__udivsi3>
 8003478:	0003      	movs	r3, r0
 800347a:	3301      	adds	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800347e:	e008      	b.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3b01      	subs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e001      	b.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e009      	b.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	401a      	ands	r2, r3
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d0ed      	beq.n	8003480 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	40007000 	.word	0x40007000
 80034b4:	fffff9ff 	.word	0xfffff9ff
 80034b8:	20000000 	.word	0x20000000
 80034bc:	000f4240 	.word	0x000f4240

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e2fe      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	d100      	bne.n	80034de <HAL_RCC_OscConfig+0x1e>
 80034dc:	e07c      	b.n	80035d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4bc3      	ldr	r3, [pc, #780]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2238      	movs	r2, #56	@ 0x38
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4bc0      	ldr	r3, [pc, #768]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2203      	movs	r2, #3
 80034ee:	4013      	ands	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_OscConfig+0x3e>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4bb9      	ldr	r3, [pc, #740]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	029b      	lsls	r3, r3, #10
 800350c:	4013      	ands	r3, r2
 800350e:	d062      	beq.n	80035d6 <HAL_RCC_OscConfig+0x116>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d15e      	bne.n	80035d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e2d9      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	025b      	lsls	r3, r3, #9
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x78>
 8003528:	4bb0      	ldr	r3, [pc, #704]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4baf      	ldr	r3, [pc, #700]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800352e:	2180      	movs	r1, #128	@ 0x80
 8003530:	0249      	lsls	r1, r1, #9
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e020      	b.n	800357a <HAL_RCC_OscConfig+0xba>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	23a0      	movs	r3, #160	@ 0xa0
 800353e:	02db      	lsls	r3, r3, #11
 8003540:	429a      	cmp	r2, r3
 8003542:	d10e      	bne.n	8003562 <HAL_RCC_OscConfig+0xa2>
 8003544:	4ba9      	ldr	r3, [pc, #676]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4ba8      	ldr	r3, [pc, #672]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800354a:	2180      	movs	r1, #128	@ 0x80
 800354c:	02c9      	lsls	r1, r1, #11
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	4ba6      	ldr	r3, [pc, #664]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4ba5      	ldr	r3, [pc, #660]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e00b      	b.n	800357a <HAL_RCC_OscConfig+0xba>
 8003562:	4ba2      	ldr	r3, [pc, #648]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4ba1      	ldr	r3, [pc, #644]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003568:	49a1      	ldr	r1, [pc, #644]	@ (80037f0 <HAL_RCC_OscConfig+0x330>)
 800356a:	400a      	ands	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	4b9f      	ldr	r3, [pc, #636]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b9e      	ldr	r3, [pc, #632]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003574:	499f      	ldr	r1, [pc, #636]	@ (80037f4 <HAL_RCC_OscConfig+0x334>)
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d014      	beq.n	80035ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fe fd17 	bl	8001fb4 <HAL_GetTick>
 8003586:	0003      	movs	r3, r0
 8003588:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fd12 	bl	8001fb4 <HAL_GetTick>
 8003590:	0002      	movs	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	@ 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e298      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359e:	4b93      	ldr	r3, [pc, #588]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	4013      	ands	r3, r2
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xcc>
 80035aa:	e015      	b.n	80035d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fd02 	bl	8001fb4 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b6:	f7fe fcfd 	bl	8001fb4 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	@ 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e283      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c8:	4b88      	ldr	r3, [pc, #544]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	029b      	lsls	r3, r3, #10
 80035d0:	4013      	ands	r3, r2
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0xf6>
 80035d4:	e000      	b.n	80035d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2202      	movs	r2, #2
 80035de:	4013      	ands	r3, r2
 80035e0:	d100      	bne.n	80035e4 <HAL_RCC_OscConfig+0x124>
 80035e2:	e099      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e4:	4b81      	ldr	r3, [pc, #516]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2238      	movs	r2, #56	@ 0x38
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ee:	4b7f      	ldr	r3, [pc, #508]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2203      	movs	r2, #3
 80035f4:	4013      	ands	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_OscConfig+0x144>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d002      	beq.n	800360a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d135      	bne.n	8003676 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360a:	4b78      	ldr	r3, [pc, #480]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	@ 0x80
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4013      	ands	r3, r2
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x162>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e256      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b72      	ldr	r3, [pc, #456]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a74      	ldr	r2, [pc, #464]	@ (80037f8 <HAL_RCC_OscConfig+0x338>)
 8003628:	4013      	ands	r3, r2
 800362a:	0019      	movs	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	021a      	lsls	r2, r3, #8
 8003632:	4b6e      	ldr	r3, [pc, #440]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d112      	bne.n	8003664 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800363e:	4b6b      	ldr	r3, [pc, #428]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a6e      	ldr	r2, [pc, #440]	@ (80037fc <HAL_RCC_OscConfig+0x33c>)
 8003644:	4013      	ands	r3, r2
 8003646:	0019      	movs	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	4b67      	ldr	r3, [pc, #412]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003652:	4b66      	ldr	r3, [pc, #408]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0adb      	lsrs	r3, r3, #11
 8003658:	2207      	movs	r2, #7
 800365a:	4013      	ands	r3, r2
 800365c:	4a68      	ldr	r2, [pc, #416]	@ (8003800 <HAL_RCC_OscConfig+0x340>)
 800365e:	40da      	lsrs	r2, r3
 8003660:	4b68      	ldr	r3, [pc, #416]	@ (8003804 <HAL_RCC_OscConfig+0x344>)
 8003662:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003664:	4b68      	ldr	r3, [pc, #416]	@ (8003808 <HAL_RCC_OscConfig+0x348>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0018      	movs	r0, r3
 800366a:	f7fe fc47 	bl	8001efc <HAL_InitTick>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d051      	beq.n	8003716 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e22c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d030      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800367e:	4b5b      	ldr	r3, [pc, #364]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5e      	ldr	r2, [pc, #376]	@ (80037fc <HAL_RCC_OscConfig+0x33c>)
 8003684:	4013      	ands	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	4b57      	ldr	r3, [pc, #348]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003692:	4b56      	ldr	r3, [pc, #344]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b55      	ldr	r3, [pc, #340]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003698:	2180      	movs	r1, #128	@ 0x80
 800369a:	0049      	lsls	r1, r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fc88 	bl	8001fb4 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fc83 	bl	8001fb4 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e209      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036bc:	4b4b      	ldr	r3, [pc, #300]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4013      	ands	r3, r2
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b48      	ldr	r3, [pc, #288]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a4a      	ldr	r2, [pc, #296]	@ (80037f8 <HAL_RCC_OscConfig+0x338>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	021a      	lsls	r2, r3, #8
 80036d8:	4b44      	ldr	r3, [pc, #272]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80036e0:	4b42      	ldr	r3, [pc, #264]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80036e6:	4949      	ldr	r1, [pc, #292]	@ (800380c <HAL_RCC_OscConfig+0x34c>)
 80036e8:	400a      	ands	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fc62 	bl	8001fb4 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f6:	f7fe fc5d 	bl	8001fb4 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1e3      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003708:	4b38      	ldr	r3, [pc, #224]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	@ 0x80
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4013      	ands	r3, r2
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x236>
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003716:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2208      	movs	r2, #8
 800371e:	4013      	ands	r3, r2
 8003720:	d047      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003722:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2238      	movs	r2, #56	@ 0x38
 8003728:	4013      	ands	r3, r2
 800372a:	2b18      	cmp	r3, #24
 800372c:	d10a      	bne.n	8003744 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800372e:	4b2f      	ldr	r3, [pc, #188]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	2202      	movs	r2, #2
 8003734:	4013      	ands	r3, r2
 8003736:	d03c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d138      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e1c5      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d019      	beq.n	8003780 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800374c:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 800374e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003750:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003752:	2101      	movs	r1, #1
 8003754:	430a      	orrs	r2, r1
 8003756:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fc2c 	bl	8001fb4 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fe fc27 	bl	8001fb4 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1ad      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003774:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003778:	2202      	movs	r2, #2
 800377a:	4013      	ands	r3, r2
 800377c:	d0f1      	beq.n	8003762 <HAL_RCC_OscConfig+0x2a2>
 800377e:	e018      	b.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003782:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 8003786:	2101      	movs	r1, #1
 8003788:	438a      	bics	r2, r1
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fc12 	bl	8001fb4 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe fc0d 	bl	8001fb4 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e193      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a8:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d1f1      	bne.n	8003796 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2204      	movs	r2, #4
 80037b8:	4013      	ands	r3, r2
 80037ba:	d100      	bne.n	80037be <HAL_RCC_OscConfig+0x2fe>
 80037bc:	e0c6      	b.n	800394c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	231f      	movs	r3, #31
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2238      	movs	r2, #56	@ 0x38
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d11e      	bne.n	8003810 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_OscConfig+0x32c>)
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	2202      	movs	r2, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d100      	bne.n	80037de <HAL_RCC_OscConfig+0x31e>
 80037dc:	e0b6      	b.n	800394c <HAL_RCC_OscConfig+0x48c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d000      	beq.n	80037e8 <HAL_RCC_OscConfig+0x328>
 80037e6:	e0b1      	b.n	800394c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e171      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	fffeffff 	.word	0xfffeffff
 80037f4:	fffbffff 	.word	0xfffbffff
 80037f8:	ffff80ff 	.word	0xffff80ff
 80037fc:	ffffc7ff 	.word	0xffffc7ff
 8003800:	00f42400 	.word	0x00f42400
 8003804:	20000000 	.word	0x20000000
 8003808:	20000004 	.word	0x20000004
 800380c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003810:	4bb1      	ldr	r3, [pc, #708]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	055b      	lsls	r3, r3, #21
 8003818:	4013      	ands	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x362>
 8003820:	2300      	movs	r3, #0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003826:	4bac      	ldr	r3, [pc, #688]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800382a:	4bab      	ldr	r3, [pc, #684]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 800382c:	2180      	movs	r1, #128	@ 0x80
 800382e:	0549      	lsls	r1, r1, #21
 8003830:	430a      	orrs	r2, r1
 8003832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003834:	4ba8      	ldr	r3, [pc, #672]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	055b      	lsls	r3, r3, #21
 800383c:	4013      	ands	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003842:	231f      	movs	r3, #31
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384a:	4ba4      	ldr	r3, [pc, #656]	@ (8003adc <HAL_RCC_OscConfig+0x61c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4013      	ands	r3, r2
 8003854:	d11a      	bne.n	800388c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003856:	4ba1      	ldr	r3, [pc, #644]	@ (8003adc <HAL_RCC_OscConfig+0x61c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4ba0      	ldr	r3, [pc, #640]	@ (8003adc <HAL_RCC_OscConfig+0x61c>)
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	0049      	lsls	r1, r1, #1
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003864:	f7fe fba6 	bl	8001fb4 <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fe fba1 	bl	8001fb4 <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e127      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	4b96      	ldr	r3, [pc, #600]	@ (8003adc <HAL_RCC_OscConfig+0x61c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4013      	ands	r3, r2
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3e2>
 8003894:	4b90      	ldr	r3, [pc, #576]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003896:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003898:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 800389a:	2101      	movs	r1, #1
 800389c:	430a      	orrs	r2, r1
 800389e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038a0:	e01c      	b.n	80038dc <HAL_RCC_OscConfig+0x41c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x404>
 80038aa:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038ae:	4b8a      	ldr	r3, [pc, #552]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038b0:	2104      	movs	r1, #4
 80038b2:	430a      	orrs	r2, r1
 80038b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038b6:	4b88      	ldr	r3, [pc, #544]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038ba:	4b87      	ldr	r3, [pc, #540]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038bc:	2101      	movs	r1, #1
 80038be:	430a      	orrs	r2, r1
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0x41c>
 80038c4:	4b84      	ldr	r3, [pc, #528]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038c8:	4b83      	ldr	r3, [pc, #524]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038ca:	2101      	movs	r1, #1
 80038cc:	438a      	bics	r2, r1
 80038ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038d0:	4b81      	ldr	r3, [pc, #516]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038d4:	4b80      	ldr	r3, [pc, #512]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80038d6:	2104      	movs	r1, #4
 80038d8:	438a      	bics	r2, r1
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d014      	beq.n	800390e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fb66 	bl	8001fb4 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ec:	e009      	b.n	8003902 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe fb61 	bl	8001fb4 <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	4a79      	ldr	r2, [pc, #484]	@ (8003ae0 <HAL_RCC_OscConfig+0x620>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0e6      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	4b75      	ldr	r3, [pc, #468]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x42e>
 800390c:	e013      	b.n	8003936 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fe fb51 	bl	8001fb4 <HAL_GetTick>
 8003912:	0003      	movs	r3, r0
 8003914:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003916:	e009      	b.n	800392c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fe fb4c 	bl	8001fb4 <HAL_GetTick>
 800391c:	0002      	movs	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	4a6f      	ldr	r2, [pc, #444]	@ (8003ae0 <HAL_RCC_OscConfig+0x620>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0d1      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800392c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	2202      	movs	r2, #2
 8003932:	4013      	ands	r3, r2
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003936:	231f      	movs	r3, #31
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003944:	4b64      	ldr	r3, [pc, #400]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003946:	4967      	ldr	r1, [pc, #412]	@ (8003ae4 <HAL_RCC_OscConfig+0x624>)
 8003948:	400a      	ands	r2, r1
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d100      	bne.n	8003956 <HAL_RCC_OscConfig+0x496>
 8003954:	e0bb      	b.n	8003ace <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003956:	4b60      	ldr	r3, [pc, #384]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2238      	movs	r2, #56	@ 0x38
 800395c:	4013      	ands	r3, r2
 800395e:	2b10      	cmp	r3, #16
 8003960:	d100      	bne.n	8003964 <HAL_RCC_OscConfig+0x4a4>
 8003962:	e07b      	b.n	8003a5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d156      	bne.n	8003a1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b59      	ldr	r3, [pc, #356]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003972:	495d      	ldr	r1, [pc, #372]	@ (8003ae8 <HAL_RCC_OscConfig+0x628>)
 8003974:	400a      	ands	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fb1c 	bl	8001fb4 <HAL_GetTick>
 800397c:	0003      	movs	r3, r0
 800397e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fe fb17 	bl	8001fb4 <HAL_GetTick>
 8003986:	0002      	movs	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e09d      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003994:	4b50      	ldr	r3, [pc, #320]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	@ 0x80
 800399a:	049b      	lsls	r3, r3, #18
 800399c:	4013      	ands	r3, r2
 800399e:	d1f0      	bne.n	8003982 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a51      	ldr	r2, [pc, #324]	@ (8003aec <HAL_RCC_OscConfig+0x62c>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	431a      	orrs	r2, r3
 80039ce:	4b42      	ldr	r3, [pc, #264]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b40      	ldr	r3, [pc, #256]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	0449      	lsls	r1, r1, #17
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	0549      	lsls	r1, r1, #21
 80039ec:	430a      	orrs	r2, r1
 80039ee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe fae0 	bl	8001fb4 <HAL_GetTick>
 80039f4:	0003      	movs	r3, r0
 80039f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe fadb 	bl	8001fb4 <HAL_GetTick>
 80039fe:	0002      	movs	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e061      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	049b      	lsls	r3, r3, #18
 8003a14:	4013      	ands	r3, r2
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x53a>
 8003a18:	e059      	b.n	8003ace <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a20:	4931      	ldr	r1, [pc, #196]	@ (8003ae8 <HAL_RCC_OscConfig+0x628>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe fac5 	bl	8001fb4 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fac0 	bl	8001fb4 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e046      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a42:	4b25      	ldr	r3, [pc, #148]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	049b      	lsls	r3, r3, #18
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003a4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a54:	4926      	ldr	r1, [pc, #152]	@ (8003af0 <HAL_RCC_OscConfig+0x630>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e038      	b.n	8003ace <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e033      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2203      	movs	r2, #3
 8003a72:	401a      	ands	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d126      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2270      	movs	r2, #112	@ 0x70
 8003a80:	401a      	ands	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d11f      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	23fe      	movs	r3, #254	@ 0xfe
 8003a8e:	01db      	lsls	r3, r3, #7
 8003a90:	401a      	ands	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d116      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	23f8      	movs	r3, #248	@ 0xf8
 8003aa0:	039b      	lsls	r3, r3, #14
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d10e      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	23e0      	movs	r3, #224	@ 0xe0
 8003ab0:	051b      	lsls	r3, r3, #20
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	0f5b      	lsrs	r3, r3, #29
 8003ac0:	075a      	lsls	r2, r3, #29
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b008      	add	sp, #32
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40007000 	.word	0x40007000
 8003ae0:	00001388 	.word	0x00001388
 8003ae4:	efffffff 	.word	0xefffffff
 8003ae8:	feffffff 	.word	0xfeffffff
 8003aec:	11c1808c 	.word	0x11c1808c
 8003af0:	eefefffc 	.word	0xeefefffc

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0e9      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b76      	ldr	r3, [pc, #472]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	4013      	ands	r3, r2
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d91e      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b73      	ldr	r3, [pc, #460]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2207      	movs	r2, #7
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	4b70      	ldr	r3, [pc, #448]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b28:	f7fe fa44 	bl	8001fb4 <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b30:	e009      	b.n	8003b46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b32:	f7fe fa3f 	bl	8001fb4 <HAL_GetTick>
 8003b36:	0002      	movs	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0ca      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b46:	4b67      	ldr	r3, [pc, #412]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2207      	movs	r2, #7
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1ee      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d015      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2204      	movs	r2, #4
 8003b64:	4013      	ands	r3, r2
 8003b66:	d006      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b68:	4b60      	ldr	r3, [pc, #384]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003b6e:	21e0      	movs	r1, #224	@ 0xe0
 8003b70:	01c9      	lsls	r1, r1, #7
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b76:	4b5d      	ldr	r3, [pc, #372]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	0019      	movs	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	d057      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9c:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	029b      	lsls	r3, r3, #10
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d12b      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e097      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	049b      	lsls	r3, r3, #18
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d11f      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e08b      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bcc:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	2380      	movs	r3, #128	@ 0x80
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d113      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e07f      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be4:	4b41      	ldr	r3, [pc, #260]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be8:	2202      	movs	r2, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d108      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e074      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e06d      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c00:	4b3a      	ldr	r3, [pc, #232]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2207      	movs	r2, #7
 8003c06:	4393      	bics	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fe f9ce 	bl	8001fb4 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1c:	e009      	b.n	8003c32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1e:	f7fe f9c9 	bl	8001fb4 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e054      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2e      	ldr	r3, [pc, #184]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2238      	movs	r2, #56	@ 0x38
 8003c38:	401a      	ands	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1ec      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b27      	ldr	r3, [pc, #156]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2207      	movs	r2, #7
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d21e      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2207      	movs	r2, #7
 8003c58:	4393      	bics	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c64:	f7fe f9a6 	bl	8001fb4 <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c6c:	e009      	b.n	8003c82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6e:	f7fe f9a1 	bl	8001fb4 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e02c      	b.n	8003cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c82:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2207      	movs	r2, #7
 8003c88:	4013      	ands	r3, r2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2204      	movs	r2, #4
 8003c96:	4013      	ands	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9a:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <HAL_RCC_ClockConfig+0x200>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003caa:	430a      	orrs	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003cae:	f000 f829 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cb2:	0001      	movs	r1, r0
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	220f      	movs	r2, #15
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <HAL_RCC_ClockConfig+0x204>)
 8003cc0:	0092      	lsls	r2, r2, #2
 8003cc2:	58d3      	ldr	r3, [r2, r3]
 8003cc4:	221f      	movs	r2, #31
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	000a      	movs	r2, r1
 8003cca:	40da      	lsrs	r2, r3
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_RCC_ClockConfig+0x208>)
 8003cce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <HAL_RCC_ClockConfig+0x20c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fe f911 	bl	8001efc <HAL_InitTick>
 8003cda:	0003      	movs	r3, r0
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	00001388 	.word	0x00001388
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	fffff0ff 	.word	0xfffff0ff
 8003cf4:	ffff8fff 	.word	0xffff8fff
 8003cf8:	08004ad0 	.word	0x08004ad0
 8003cfc:	20000000 	.word	0x20000000
 8003d00:	20000004 	.word	0x20000004

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2238      	movs	r2, #56	@ 0x38
 8003d10:	4013      	ands	r3, r2
 8003d12:	d10f      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d14:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0adb      	lsrs	r3, r3, #11
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	0013      	movs	r3, r2
 8003d24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	4835      	ldr	r0, [pc, #212]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d2a:	f7fc f9eb 	bl	8000104 <__udivsi3>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e05d      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d34:	4b31      	ldr	r3, [pc, #196]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2238      	movs	r2, #56	@ 0x38
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d40:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e054      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d46:	4b2d      	ldr	r3, [pc, #180]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2238      	movs	r2, #56	@ 0x38
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d138      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d52:	4b2a      	ldr	r3, [pc, #168]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2203      	movs	r2, #3
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d5c:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	2207      	movs	r2, #7
 8003d64:	4013      	ands	r3, r2
 8003d66:	3301      	adds	r3, #1
 8003d68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4824      	ldr	r0, [pc, #144]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d74:	f7fc f9c6 	bl	8000104 <__udivsi3>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	227f      	movs	r2, #127	@ 0x7f
 8003d84:	4013      	ands	r3, r2
 8003d86:	434b      	muls	r3, r1
 8003d88:	617b      	str	r3, [r7, #20]
        break;
 8003d8a:	e00d      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	481c      	ldr	r0, [pc, #112]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d90:	f7fc f9b8 	bl	8000104 <__udivsi3>
 8003d94:	0003      	movs	r3, r0
 8003d96:	0019      	movs	r1, r3
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	227f      	movs	r2, #127	@ 0x7f
 8003da0:	4013      	ands	r3, r2
 8003da2:	434b      	muls	r3, r1
 8003da4:	617b      	str	r3, [r7, #20]
        break;
 8003da6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003da8:	4b14      	ldr	r3, [pc, #80]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0f5b      	lsrs	r3, r3, #29
 8003dae:	2207      	movs	r2, #7
 8003db0:	4013      	ands	r3, r2
 8003db2:	3301      	adds	r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	6978      	ldr	r0, [r7, #20]
 8003dba:	f7fc f9a3 	bl	8000104 <__udivsi3>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e015      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2238      	movs	r2, #56	@ 0x38
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d103      	bne.n	8003dd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dd8:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2238      	movs	r2, #56	@ 0x38
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b18      	cmp	r3, #24
 8003de2:	d103      	bne.n	8003dec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003de4:	23fa      	movs	r3, #250	@ 0xfa
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	e001      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003df0:	693b      	ldr	r3, [r7, #16]
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b006      	add	sp, #24
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	007a1200 	.word	0x007a1200

08003e08 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <HAL_RCC_EnableCSS+0x18>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b03      	ldr	r3, [pc, #12]	@ (8003e20 <HAL_RCC_EnableCSS+0x18>)
 8003e12:	2180      	movs	r1, #128	@ 0x80
 8003e14:	0309      	lsls	r1, r1, #12
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	22c0      	movs	r2, #192	@ 0xc0
 8003e36:	0092      	lsls	r2, r2, #2
 8003e38:	400a      	ands	r2, r1
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	2380      	movs	r3, #128	@ 0x80
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4013      	ands	r3, r2
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003e46:	f000 f80d 	bl	8003e64 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4013      	ands	r3, r2
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 8003e54:	f000 f80b 	bl	8003e6e <HAL_RCC_LSECSSCallback>
  }
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8003e68:	46c0      	nop			@ (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e80:	2313      	movs	r3, #19
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e88:	2312      	movs	r3, #18
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	@ 0x80
 8003e96:	029b      	lsls	r3, r3, #10
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003e9c:	e0a3      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9e:	2011      	movs	r0, #17
 8003ea0:	183b      	adds	r3, r7, r0
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea6:	4bc3      	ldr	r3, [pc, #780]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eaa:	2380      	movs	r3, #128	@ 0x80
 8003eac:	055b      	lsls	r3, r3, #21
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d110      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4bc0      	ldr	r3, [pc, #768]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb6:	4bbf      	ldr	r3, [pc, #764]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eb8:	2180      	movs	r1, #128	@ 0x80
 8003eba:	0549      	lsls	r1, r1, #21
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ec0:	4bbc      	ldr	r3, [pc, #752]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	055b      	lsls	r3, r3, #21
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed4:	4bb8      	ldr	r3, [pc, #736]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4bb7      	ldr	r3, [pc, #732]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003eda:	2180      	movs	r1, #128	@ 0x80
 8003edc:	0049      	lsls	r1, r1, #1
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee2:	f7fe f867 	bl	8001fb4 <HAL_GetTick>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eea:	e00b      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eec:	f7fe f862 	bl	8001fb4 <HAL_GetTick>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d904      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003efa:	2313      	movs	r3, #19
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2203      	movs	r2, #3
 8003f00:	701a      	strb	r2, [r3, #0]
        break;
 8003f02:	e005      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f04:	4bac      	ldr	r3, [pc, #688]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d0ed      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003f10:	2313      	movs	r3, #19
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d154      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f1a:	4ba6      	ldr	r3, [pc, #664]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f1e:	23c0      	movs	r3, #192	@ 0xc0
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d019      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d014      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f36:	4b9f      	ldr	r3, [pc, #636]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	4aa0      	ldr	r2, [pc, #640]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f40:	4b9c      	ldr	r3, [pc, #624]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f44:	4b9b      	ldr	r3, [pc, #620]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f46:	2180      	movs	r1, #128	@ 0x80
 8003f48:	0249      	lsls	r1, r1, #9
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4e:	4b99      	ldr	r3, [pc, #612]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f52:	4b98      	ldr	r3, [pc, #608]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f54:	499a      	ldr	r1, [pc, #616]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003f56:	400a      	ands	r2, r1
 8003f58:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f5a:	4b96      	ldr	r3, [pc, #600]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2201      	movs	r2, #1
 8003f64:	4013      	ands	r3, r2
 8003f66:	d016      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fe f824 	bl	8001fb4 <HAL_GetTick>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f70:	e00c      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe f81f 	bl	8001fb4 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	4a91      	ldr	r2, [pc, #580]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d904      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f82:	2313      	movs	r3, #19
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	2203      	movs	r2, #3
 8003f88:	701a      	strb	r2, [r3, #0]
            break;
 8003f8a:	e004      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8c:	4b89      	ldr	r3, [pc, #548]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	2202      	movs	r2, #2
 8003f92:	4013      	ands	r3, r2
 8003f94:	d0ed      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003f96:	2313      	movs	r3, #19
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa0:	4b84      	ldr	r3, [pc, #528]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa4:	4a85      	ldr	r2, [pc, #532]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fae:	4b81      	ldr	r3, [pc, #516]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fb4:	e00c      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fb6:	2312      	movs	r3, #18
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2213      	movs	r2, #19
 8003fbc:	18ba      	adds	r2, r7, r2
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e005      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	2312      	movs	r3, #18
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	2213      	movs	r2, #19
 8003fca:	18ba      	adds	r2, r7, r2
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd0:	2311      	movs	r3, #17
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d105      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fda:	4b76      	ldr	r3, [pc, #472]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fde:	4b75      	ldr	r3, [pc, #468]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fe0:	4979      	ldr	r1, [pc, #484]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	4013      	ands	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff0:	4b70      	ldr	r3, [pc, #448]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004000:	430a      	orrs	r2, r1
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2202      	movs	r2, #2
 800400a:	4013      	ands	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800400e:	4b69      	ldr	r3, [pc, #420]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	220c      	movs	r2, #12
 8004014:	4393      	bics	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	4b65      	ldr	r3, [pc, #404]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800401e:	430a      	orrs	r2, r1
 8004020:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2210      	movs	r2, #16
 8004028:	4013      	ands	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800402c:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	4a66      	ldr	r2, [pc, #408]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004032:	4013      	ands	r3, r2
 8004034:	0019      	movs	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800403c:	430a      	orrs	r2, r1
 800403e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4013      	ands	r3, r2
 800404a:	d009      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800404c:	4b59      	ldr	r3, [pc, #356]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	4a5f      	ldr	r2, [pc, #380]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	4b56      	ldr	r3, [pc, #344]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800405c:	430a      	orrs	r2, r1
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4013      	ands	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800406c:	4b51      	ldr	r3, [pc, #324]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	4a58      	ldr	r2, [pc, #352]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004072:	4013      	ands	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	4b4e      	ldr	r3, [pc, #312]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800407c:	430a      	orrs	r2, r1
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2220      	movs	r2, #32
 8004086:	4013      	ands	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408a:	4b4a      	ldr	r3, [pc, #296]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	4a52      	ldr	r2, [pc, #328]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004090:	4013      	ands	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	4b46      	ldr	r3, [pc, #280]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800409a:	430a      	orrs	r2, r1
 800409c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	@ 0x80
 80040a4:	01db      	lsls	r3, r3, #7
 80040a6:	4013      	ands	r3, r2
 80040a8:	d015      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040aa:	4b42      	ldr	r3, [pc, #264]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	0899      	lsrs	r1, r3, #2
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	4b3f      	ldr	r3, [pc, #252]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040b8:	430a      	orrs	r2, r1
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	2380      	movs	r3, #128	@ 0x80
 80040c2:	05db      	lsls	r3, r3, #23
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d106      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040c8:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4b39      	ldr	r3, [pc, #228]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ce:	2180      	movs	r1, #128	@ 0x80
 80040d0:	0249      	lsls	r1, r1, #9
 80040d2:	430a      	orrs	r2, r1
 80040d4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	4013      	ands	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040e2:	4b34      	ldr	r3, [pc, #208]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e6:	2240      	movs	r2, #64	@ 0x40
 80040e8:	4393      	bics	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040f0:	4b30      	ldr	r3, [pc, #192]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040f2:	430a      	orrs	r2, r1
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	039b      	lsls	r3, r3, #14
 80040fe:	4013      	ands	r3, r2
 8004100:	d016      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004102:	4b2c      	ldr	r3, [pc, #176]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	4a35      	ldr	r2, [pc, #212]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004110:	4b28      	ldr	r3, [pc, #160]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004112:	430a      	orrs	r2, r1
 8004114:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	03db      	lsls	r3, r3, #15
 800411e:	429a      	cmp	r2, r3
 8004120:	d106      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004128:	2180      	movs	r1, #128	@ 0x80
 800412a:	0449      	lsls	r1, r1, #17
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	03db      	lsls	r3, r3, #15
 8004138:	4013      	ands	r3, r2
 800413a:	d016      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800413c:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800414c:	430a      	orrs	r2, r1
 800414e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	045b      	lsls	r3, r3, #17
 8004158:	429a      	cmp	r2, r3
 800415a:	d106      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800415c:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004162:	2180      	movs	r1, #128	@ 0x80
 8004164:	0449      	lsls	r1, r1, #17
 8004166:	430a      	orrs	r2, r1
 8004168:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4013      	ands	r3, r2
 8004174:	d016      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004176:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417a:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	4b0b      	ldr	r3, [pc, #44]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004186:	430a      	orrs	r2, r1
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004196:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800419c:	2180      	movs	r1, #128	@ 0x80
 800419e:	0249      	lsls	r1, r1, #9
 80041a0:	430a      	orrs	r2, r1
 80041a2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80041a4:	2312      	movs	r3, #18
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	781b      	ldrb	r3, [r3, #0]
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b006      	add	sp, #24
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	fffffcff 	.word	0xfffffcff
 80041c0:	fffeffff 	.word	0xfffeffff
 80041c4:	00001388 	.word	0x00001388
 80041c8:	efffffff 	.word	0xefffffff
 80041cc:	fffff3ff 	.word	0xfffff3ff
 80041d0:	fff3ffff 	.word	0xfff3ffff
 80041d4:	ffcfffff 	.word	0xffcfffff
 80041d8:	ffffcfff 	.word	0xffffcfff
 80041dc:	ffbfffff 	.word	0xffbfffff
 80041e0:	feffffff 	.word	0xfeffffff
 80041e4:	ffff3fff 	.word	0xffff3fff

080041e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e04a      	b.n	8004290 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	223d      	movs	r2, #61	@ 0x3d
 80041fe:	5c9b      	ldrb	r3, [r3, r2]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	223c      	movs	r2, #60	@ 0x3c
 800420a:	2100      	movs	r1, #0
 800420c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f7fd fd5b 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	223d      	movs	r2, #61	@ 0x3d
 800421a:	2102      	movs	r1, #2
 800421c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	0019      	movs	r1, r3
 8004228:	0010      	movs	r0, r2
 800422a:	f000 fa69 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2248      	movs	r2, #72	@ 0x48
 8004232:	2101      	movs	r1, #1
 8004234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	223e      	movs	r2, #62	@ 0x3e
 800423a:	2101      	movs	r1, #1
 800423c:	5499      	strb	r1, [r3, r2]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	223f      	movs	r2, #63	@ 0x3f
 8004242:	2101      	movs	r1, #1
 8004244:	5499      	strb	r1, [r3, r2]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2240      	movs	r2, #64	@ 0x40
 800424a:	2101      	movs	r1, #1
 800424c:	5499      	strb	r1, [r3, r2]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2241      	movs	r2, #65	@ 0x41
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2242      	movs	r2, #66	@ 0x42
 800425a:	2101      	movs	r1, #1
 800425c:	5499      	strb	r1, [r3, r2]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2243      	movs	r2, #67	@ 0x43
 8004262:	2101      	movs	r1, #1
 8004264:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2244      	movs	r2, #68	@ 0x44
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2245      	movs	r2, #69	@ 0x45
 8004272:	2101      	movs	r1, #1
 8004274:	5499      	strb	r1, [r3, r2]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2246      	movs	r2, #70	@ 0x46
 800427a:	2101      	movs	r1, #1
 800427c:	5499      	strb	r1, [r3, r2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2247      	movs	r2, #71	@ 0x47
 8004282:	2101      	movs	r1, #1
 8004284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	223d      	movs	r2, #61	@ 0x3d
 800428a:	2101      	movs	r1, #1
 800428c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2101      	movs	r1, #1
 80042ac:	438a      	bics	r2, r1
 80042ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <HAL_TIM_Base_Stop_IT+0x54>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	d10d      	bne.n	80042d8 <HAL_TIM_Base_Stop_IT+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a0b      	ldr	r2, [pc, #44]	@ (80042f0 <HAL_TIM_Base_Stop_IT+0x58>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_Base_Stop_IT+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2101      	movs	r1, #1
 80042d4:	438a      	bics	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	223d      	movs	r2, #61	@ 0x3d
 80042dc:	2101      	movs	r1, #1
 80042de:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	00001111 	.word	0x00001111
 80042f0:	00000444 	.word	0x00000444

080042f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d021      	beq.n	8004358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2202      	movs	r2, #2
 8004318:	4013      	ands	r3, r2
 800431a:	d01d      	beq.n	8004358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2203      	movs	r2, #3
 8004322:	4252      	negs	r2, r2
 8004324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2203      	movs	r2, #3
 8004334:	4013      	ands	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 f9c8 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 8004340:	e007      	b.n	8004352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f000 f9bb 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f9c7 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2204      	movs	r2, #4
 800435c:	4013      	ands	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2204      	movs	r2, #4
 8004364:	4013      	ands	r3, r2
 8004366:	d01e      	beq.n	80043a6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2205      	movs	r2, #5
 800436e:	4252      	negs	r2, r2
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	23c0      	movs	r3, #192	@ 0xc0
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4013      	ands	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0018      	movs	r0, r3
 800438a:	f000 f9a1 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 800438e:	e007      	b.n	80043a0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	0018      	movs	r0, r3
 8004394:	f000 f994 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	0018      	movs	r0, r3
 800439c:	f000 f9a0 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2208      	movs	r2, #8
 80043aa:	4013      	ands	r3, r2
 80043ac:	d021      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2208      	movs	r2, #8
 80043b2:	4013      	ands	r3, r2
 80043b4:	d01d      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2209      	movs	r2, #9
 80043bc:	4252      	negs	r2, r2
 80043be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2204      	movs	r2, #4
 80043c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	2203      	movs	r2, #3
 80043ce:	4013      	ands	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 f97b 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 80043da:	e007      	b.n	80043ec <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 f96e 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0018      	movs	r0, r3
 80043e8:	f000 f97a 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2210      	movs	r2, #16
 80043f6:	4013      	ands	r3, r2
 80043f8:	d022      	beq.n	8004440 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2210      	movs	r2, #16
 80043fe:	4013      	ands	r3, r2
 8004400:	d01e      	beq.n	8004440 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2211      	movs	r2, #17
 8004408:	4252      	negs	r2, r2
 800440a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2208      	movs	r2, #8
 8004410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	23c0      	movs	r3, #192	@ 0xc0
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f000 f954 	bl	80046d0 <HAL_TIM_IC_CaptureCallback>
 8004428:	e007      	b.n	800443a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f000 f947 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0018      	movs	r0, r3
 8004436:	f000 f953 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2201      	movs	r2, #1
 8004444:	4013      	ands	r3, r2
 8004446:	d00c      	beq.n	8004462 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	4013      	ands	r3, r2
 800444e:	d008      	beq.n	8004462 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2202      	movs	r2, #2
 8004456:	4252      	negs	r2, r2
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f000 f927 	bl	80046b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2280      	movs	r2, #128	@ 0x80
 8004466:	4013      	ands	r3, r2
 8004468:	d104      	bne.n	8004474 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	2380      	movs	r3, #128	@ 0x80
 800446e:	019b      	lsls	r3, r3, #6
 8004470:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004472:	d00b      	beq.n	800448c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	4013      	ands	r3, r2
 800447a:	d007      	beq.n	800448c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <HAL_TIM_IRQHandler+0x208>)
 8004482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 fada 	bl	8004a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4013      	ands	r3, r2
 8004494:	d00b      	beq.n	80044ae <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2280      	movs	r2, #128	@ 0x80
 800449a:	4013      	ands	r3, r2
 800449c:	d007      	beq.n	80044ae <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a17      	ldr	r2, [pc, #92]	@ (8004500 <HAL_TIM_IRQHandler+0x20c>)
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fad1 	bl	8004a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2240      	movs	r2, #64	@ 0x40
 80044b2:	4013      	ands	r3, r2
 80044b4:	d00c      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	4013      	ands	r3, r2
 80044bc:	d008      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2241      	movs	r2, #65	@ 0x41
 80044c4:	4252      	negs	r2, r2
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 f910 	bl	80046f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2220      	movs	r2, #32
 80044d4:	4013      	ands	r3, r2
 80044d6:	d00c      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	4013      	ands	r3, r2
 80044de:	d008      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2221      	movs	r2, #33	@ 0x21
 80044e6:	4252      	negs	r2, r2
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 fa9f 	bl	8004a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	ffffdf7f 	.word	0xffffdf7f
 8004500:	fffffeff 	.word	0xfffffeff

08004504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	230f      	movs	r3, #15
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	223c      	movs	r2, #60	@ 0x3c
 800451a:	5c9b      	ldrb	r3, [r3, r2]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIM_ConfigClockSource+0x20>
 8004520:	2302      	movs	r3, #2
 8004522:	e0bc      	b.n	800469e <HAL_TIM_ConfigClockSource+0x19a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	223c      	movs	r2, #60	@ 0x3c
 8004528:	2101      	movs	r1, #1
 800452a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	223d      	movs	r2, #61	@ 0x3d
 8004530:	2102      	movs	r1, #2
 8004532:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004540:	4013      	ands	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a59      	ldr	r2, [pc, #356]	@ (80046ac <HAL_TIM_ConfigClockSource+0x1a8>)
 8004548:	4013      	ands	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2280      	movs	r2, #128	@ 0x80
 800455a:	0192      	lsls	r2, r2, #6
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xde>
 8004560:	2280      	movs	r2, #128	@ 0x80
 8004562:	0192      	lsls	r2, r2, #6
 8004564:	4293      	cmp	r3, r2
 8004566:	d900      	bls.n	800456a <HAL_TIM_ConfigClockSource+0x66>
 8004568:	e088      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 800456a:	2280      	movs	r2, #128	@ 0x80
 800456c:	0152      	lsls	r2, r2, #5
 800456e:	4293      	cmp	r3, r2
 8004570:	d100      	bne.n	8004574 <HAL_TIM_ConfigClockSource+0x70>
 8004572:	e088      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x182>
 8004574:	2280      	movs	r2, #128	@ 0x80
 8004576:	0152      	lsls	r2, r2, #5
 8004578:	4293      	cmp	r3, r2
 800457a:	d900      	bls.n	800457e <HAL_TIM_ConfigClockSource+0x7a>
 800457c:	e07e      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 800457e:	2b70      	cmp	r3, #112	@ 0x70
 8004580:	d018      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xb0>
 8004582:	d900      	bls.n	8004586 <HAL_TIM_ConfigClockSource+0x82>
 8004584:	e07a      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 8004586:	2b60      	cmp	r3, #96	@ 0x60
 8004588:	d04f      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x126>
 800458a:	d900      	bls.n	800458e <HAL_TIM_ConfigClockSource+0x8a>
 800458c:	e076      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 800458e:	2b50      	cmp	r3, #80	@ 0x50
 8004590:	d03b      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x106>
 8004592:	d900      	bls.n	8004596 <HAL_TIM_ConfigClockSource+0x92>
 8004594:	e072      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 8004596:	2b40      	cmp	r3, #64	@ 0x40
 8004598:	d057      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x146>
 800459a:	d900      	bls.n	800459e <HAL_TIM_ConfigClockSource+0x9a>
 800459c:	e06e      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 800459e:	2b30      	cmp	r3, #48	@ 0x30
 80045a0:	d063      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x166>
 80045a2:	d86b      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d060      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x166>
 80045a8:	d868      	bhi.n	800467c <HAL_TIM_ConfigClockSource+0x178>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d05d      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x166>
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d05b      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x166>
 80045b2:	e063      	b.n	800467c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	f000 f9a6 	bl	8004914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2277      	movs	r2, #119	@ 0x77
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	609a      	str	r2, [r3, #8]
      break;
 80045e0:	e052      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	f000 f98f 	bl	8004914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2180      	movs	r1, #128	@ 0x80
 8004602:	01c9      	lsls	r1, r1, #7
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]
      break;
 8004608:	e03e      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	001a      	movs	r2, r3
 8004618:	f000 f900 	bl	800481c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2150      	movs	r1, #80	@ 0x50
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f95a 	bl	80048dc <TIM_ITRx_SetConfig>
      break;
 8004628:	e02e      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004636:	001a      	movs	r2, r3
 8004638:	f000 f91e 	bl	8004878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2160      	movs	r1, #96	@ 0x60
 8004642:	0018      	movs	r0, r3
 8004644:	f000 f94a 	bl	80048dc <TIM_ITRx_SetConfig>
      break;
 8004648:	e01e      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	001a      	movs	r2, r3
 8004658:	f000 f8e0 	bl	800481c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2140      	movs	r1, #64	@ 0x40
 8004662:	0018      	movs	r0, r3
 8004664:	f000 f93a 	bl	80048dc <TIM_ITRx_SetConfig>
      break;
 8004668:	e00e      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	0019      	movs	r1, r3
 8004674:	0010      	movs	r0, r2
 8004676:	f000 f931 	bl	80048dc <TIM_ITRx_SetConfig>
      break;
 800467a:	e005      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800467c:	230f      	movs	r3, #15
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
      break;
 8004684:	e000      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004686:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	223d      	movs	r2, #61	@ 0x3d
 800468c:	2101      	movs	r1, #1
 800468e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223c      	movs	r2, #60	@ 0x3c
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

  return status;
 8004698:	230f      	movs	r3, #15
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	ffceff88 	.word	0xffceff88
 80046ac:	ffff00ff 	.word	0xffff00ff

080046b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046b8:	46c0      	nop			@ (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b002      	add	sp, #8
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3b      	ldr	r2, [pc, #236]	@ (8004800 <TIM_Base_SetConfig+0x100>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d008      	beq.n	800472a <TIM_Base_SetConfig+0x2a>
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	05db      	lsls	r3, r3, #23
 800471e:	429a      	cmp	r2, r3
 8004720:	d003      	beq.n	800472a <TIM_Base_SetConfig+0x2a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a37      	ldr	r2, [pc, #220]	@ (8004804 <TIM_Base_SetConfig+0x104>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2270      	movs	r2, #112	@ 0x70
 800472e:	4393      	bics	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a30      	ldr	r2, [pc, #192]	@ (8004800 <TIM_Base_SetConfig+0x100>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <TIM_Base_SetConfig+0x76>
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	2380      	movs	r3, #128	@ 0x80
 8004748:	05db      	lsls	r3, r3, #23
 800474a:	429a      	cmp	r2, r3
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0x76>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2c      	ldr	r2, [pc, #176]	@ (8004804 <TIM_Base_SetConfig+0x104>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0x76>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2b      	ldr	r2, [pc, #172]	@ (8004808 <TIM_Base_SetConfig+0x108>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0x76>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2a      	ldr	r2, [pc, #168]	@ (800480c <TIM_Base_SetConfig+0x10c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0x76>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a29      	ldr	r2, [pc, #164]	@ (8004810 <TIM_Base_SetConfig+0x110>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0x76>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a28      	ldr	r2, [pc, #160]	@ (8004814 <TIM_Base_SetConfig+0x114>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a27      	ldr	r2, [pc, #156]	@ (8004818 <TIM_Base_SetConfig+0x118>)
 800477a:	4013      	ands	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2280      	movs	r2, #128	@ 0x80
 800478c:	4393      	bics	r3, r2
 800478e:	001a      	movs	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a13      	ldr	r2, [pc, #76]	@ (8004800 <TIM_Base_SetConfig+0x100>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <TIM_Base_SetConfig+0xce>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <TIM_Base_SetConfig+0x10c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_Base_SetConfig+0xce>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a13      	ldr	r2, [pc, #76]	@ (8004810 <TIM_Base_SetConfig+0x110>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_Base_SetConfig+0xce>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a12      	ldr	r2, [pc, #72]	@ (8004814 <TIM_Base_SetConfig+0x114>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d103      	bne.n	80047d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2201      	movs	r2, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2201      	movs	r2, #1
 80047ee:	4393      	bics	r3, r2
 80047f0:	001a      	movs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	611a      	str	r2, [r3, #16]
  }
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b004      	add	sp, #16
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40000400 	.word	0x40000400
 8004808:	40002000 	.word	0x40002000
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	fffffcff 	.word	0xfffffcff

0800481c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	2201      	movs	r2, #1
 8004834:	4393      	bics	r3, r2
 8004836:	001a      	movs	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	22f0      	movs	r2, #240	@ 0xf0
 8004846:	4393      	bics	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	220a      	movs	r2, #10
 8004858:	4393      	bics	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b006      	add	sp, #24
 8004876:	bd80      	pop	{r7, pc}

08004878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	2210      	movs	r2, #16
 8004890:	4393      	bics	r3, r2
 8004892:	001a      	movs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4a0d      	ldr	r2, [pc, #52]	@ (80048d8 <TIM_TI2_ConfigInputStage+0x60>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	031b      	lsls	r3, r3, #12
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	22a0      	movs	r2, #160	@ 0xa0
 80048b4:	4393      	bics	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b006      	add	sp, #24
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	ffff0fff 	.word	0xffff0fff

080048dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <TIM_ITRx_SetConfig+0x34>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	2207      	movs	r2, #7
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	609a      	str	r2, [r3, #8]
}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	ffcfff8f 	.word	0xffcfff8f

08004914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <TIM_ETR_SetConfig+0x3c>)
 800492c:	4013      	ands	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	431a      	orrs	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	46c0      	nop			@ (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b006      	add	sp, #24
 800494e:	bd80      	pop	{r7, pc}
 8004950:	ffff00ff 	.word	0xffff00ff

08004954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	223c      	movs	r2, #60	@ 0x3c
 8004962:	5c9b      	ldrb	r3, [r3, r2]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004968:	2302      	movs	r3, #2
 800496a:	e055      	b.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	223c      	movs	r2, #60	@ 0x3c
 8004970:	2101      	movs	r1, #1
 8004972:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	223d      	movs	r2, #61	@ 0x3d
 8004978:	2102      	movs	r1, #2
 800497a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a23      	ldr	r2, [pc, #140]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a22      	ldr	r2, [pc, #136]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800499a:	4013      	ands	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2270      	movs	r2, #112	@ 0x70
 80049ac:	4393      	bics	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00f      	beq.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	05db      	lsls	r3, r3, #23
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d009      	beq.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a12      	ldr	r2, [pc, #72]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a11      	ldr	r2, [pc, #68]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2280      	movs	r2, #128	@ 0x80
 80049f0:	4393      	bics	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	223d      	movs	r2, #61	@ 0x3d
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	223c      	movs	r2, #60	@ 0x3c
 8004a12:	2100      	movs	r1, #0
 8004a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b004      	add	sp, #16
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	ff0fffff 	.word	0xff0fffff
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40014000 	.word	0x40014000

08004a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a48:	46c0      	nop			@ (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a58:	46c0      	nop			@ (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <memset>:
 8004a60:	0003      	movs	r3, r0
 8004a62:	1882      	adds	r2, r0, r2
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d100      	bne.n	8004a6a <memset+0xa>
 8004a68:	4770      	bx	lr
 8004a6a:	7019      	strb	r1, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	e7f9      	b.n	8004a64 <memset+0x4>

08004a70 <__libc_init_array>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	2600      	movs	r6, #0
 8004a74:	4c0c      	ldr	r4, [pc, #48]	@ (8004aa8 <__libc_init_array+0x38>)
 8004a76:	4d0d      	ldr	r5, [pc, #52]	@ (8004aac <__libc_init_array+0x3c>)
 8004a78:	1b64      	subs	r4, r4, r5
 8004a7a:	10a4      	asrs	r4, r4, #2
 8004a7c:	42a6      	cmp	r6, r4
 8004a7e:	d109      	bne.n	8004a94 <__libc_init_array+0x24>
 8004a80:	2600      	movs	r6, #0
 8004a82:	f000 f819 	bl	8004ab8 <_init>
 8004a86:	4c0a      	ldr	r4, [pc, #40]	@ (8004ab0 <__libc_init_array+0x40>)
 8004a88:	4d0a      	ldr	r5, [pc, #40]	@ (8004ab4 <__libc_init_array+0x44>)
 8004a8a:	1b64      	subs	r4, r4, r5
 8004a8c:	10a4      	asrs	r4, r4, #2
 8004a8e:	42a6      	cmp	r6, r4
 8004a90:	d105      	bne.n	8004a9e <__libc_init_array+0x2e>
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
 8004a94:	00b3      	lsls	r3, r6, #2
 8004a96:	58eb      	ldr	r3, [r5, r3]
 8004a98:	4798      	blx	r3
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	e7ee      	b.n	8004a7c <__libc_init_array+0xc>
 8004a9e:	00b3      	lsls	r3, r6, #2
 8004aa0:	58eb      	ldr	r3, [r5, r3]
 8004aa2:	4798      	blx	r3
 8004aa4:	3601      	adds	r6, #1
 8004aa6:	e7f2      	b.n	8004a8e <__libc_init_array+0x1e>
 8004aa8:	08004b10 	.word	0x08004b10
 8004aac:	08004b10 	.word	0x08004b10
 8004ab0:	08004b14 	.word	0x08004b14
 8004ab4:	08004b10 	.word	0x08004b10

08004ab8 <_init>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr

08004ac4 <_fini>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr
